<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Musoucrow&#39; BLOG</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://musoucrow.github.io/"/>
  <updated>2022-10-16T07:44:56.937Z</updated>
  <id>https://musoucrow.github.io/</id>
  
  <author>
    <name>Musoucrow</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Playable API结合蓝图驱动的动画方案</title>
    <link href="https://musoucrow.github.io/2022/10/16/anim_graph/"/>
    <id>https://musoucrow.github.io/2022/10/16/anim_graph/</id>
    <published>2022-10-16T07:01:36.000Z</published>
    <updated>2022-10-16T07:44:56.937Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　转眼间到了十月，再不写点东西都不会写了。正好现在《拉维瓦纳》的新动画方案也算经过将近一年的验证，可以拿出来分享一二了。本文所称的动画皆属Unity下的AnimationClip，在阅读本文之前建议对<a href="https://docs.unity.cn/cn/current/Manual/Playables.html" target="_blank" rel="external">Playable API</a>与<a href="https://zhuanlan.zhihu.com/p/509535400" target="_blank" rel="external">蓝图</a>有一定的了解，那么事不宜迟这就开始！<br>　　首先第一个问题，好好的<a href="https://docs.unity.cn/cn/current/Manual/AnimatorControllers.html" target="_blank" rel="external">Animator</a>方案放着不用搁那造轮子是要干什么玩意？<br>　　Animator本身的功能是基本完备的，需要的功能（动画播放、速度控制、分层混合、动画过渡）都有，但存在如下问题：</p>
<ul>
<li>所有动画信息、动画之间的过渡关系都需要集中配置，且继承功能羸弱，缺乏灵活性，极端情况下会呈现蜘蛛网：</li>
<li><img src="https://musoucrow.github.io/images/anim_graph/0.jpg" alt="0"></li>
<li>Animator的Update无法很舒服的控制，虽然提供了[Animator.Update(<a href="https://docs.unity.cn/cn/current/ScriptReference/Animator.Update.html)]方法，但想精准控制还需通过调控[Animator.speed](https://docs.unity.cn/cn/current/ScriptReference/Animator-speed.html)实现" target="_blank" rel="external">https://docs.unity.cn/cn/current/ScriptReference/Animator.Update.html)]方法，但想精准控制还需通过调控[Animator.speed](https://docs.unity.cn/cn/current/ScriptReference/Animator-speed.html)实现</a></li>
<li>若想符合Animator预设动画之间的过渡效果，需让Animator自行驱动动画状态切换，而非手动调用<a href="https://docs.unity.cn/cn/current/ScriptReference/Animator.Play.html" target="_blank" rel="external">Animator.Play</a>，对于一些条件切换还需通过<a href="https://docs.unity.cn/cn/current/ScriptReference/AnimatorControllerParameter.html" target="_blank" rel="external">AnimatorControllerParameter</a>进行，这使得Animator的状态机运作是独立于逻辑运行的，存在一定的不可控性：</li>
<li><img src="https://musoucrow.github.io/images/anim_graph/1.png" alt="1"></li>
</ul>
<p>　　基于上述原因，虽然捏着鼻子用也不是不行，但Unity也自知理亏，推出了可定制性更强的动画方案——Playable API</p>
<h2 id="Playable-API"><a href="#Playable-API" class="headerlink" title="Playable API"></a>Playable API</h2><p>　　Playable API基于动画的用例可参考<a href="https://zhuanlan.zhihu.com/p/380124248" target="_blank" rel="external">这篇文章</a>，本质上它是一种混合器（根据多种数据输入源组织混合输出结果）的树，只是Unity官方实现了关于动画与音效的各项驱动器，从而使得我们可以实现更具可控性的动画方案：<br><img src="https://musoucrow.github.io/images/anim_graph/2.png" alt="2"><br>　　Playable API如其名般，就是<a href="https://docs.unity.cn/cn/current/ScriptReference/Playables.Playable.html" target="_blank" rel="external">一系列API</a>提供的数据结构，通过调用它们进行数据的组织，最终输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">using UnityEngine;</div><div class="line">using UnityEngine.Playables;</div><div class="line">using UnityEngine.Animations;</div><div class="line"></div><div class="line">// 某个MonoBehavior内</div><div class="line"></div><div class="line">// 需要播放的动画</div><div class="line">public AnimationClip clip;</div><div class="line"></div><div class="line">// Playable运作的主体</div><div class="line">private PlayableGraph graph;</div><div class="line"></div><div class="line">public void Start() &#123;</div><div class="line">    // 添加Animator组件，动画播放还是需要它，只是不会对它进行操作了</div><div class="line">    var animator = this.gameObject.AddComponent&lt;Animator&gt;();</div><div class="line"></div><div class="line">    // 创建对象</div><div class="line">    this.graph = PlayableGraph.Create();</div><div class="line">    // 设置Update模式为手动调用</div><div class="line">    this.graph.SetTimeUpdateMode(DirectorUpdateMode.Manual);</div><div class="line">    </div><div class="line">    // 动画播放源，决定要播放什么动画</div><div class="line">    var clipPlayable = AnimationClipPlayable.Create(this.graph, this.clip);</div><div class="line">    </div><div class="line">    // 创建Playable输出项，决定为动画</div><div class="line">    var output = AnimationPlayableOutput.Create(this.graph, this.gameObject.name, animator);</div><div class="line">    // 绑定动画播放源，输出成立！</div><div class="line">    output.SetSourcePlayable(clipPlayable);</div><div class="line"></div><div class="line">    // 播放Playable</div><div class="line">    this.graph.Play();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void Update() &#123;</div><div class="line">    // 每帧驱动Playable更新，实现动画运作</div><div class="line">    this.graph.Evaluate(Time.deltaTime);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　以上代码示例展示了最简单的Animation Playable用法——<strong>为当前GameObject播放一个AnimationClip动画</strong>，若安装了<a href="https://docs.unity3d.com/Packages/com.unity.playablegraph-visualizer@0.2/manual/index.html" target="_blank" rel="external">PlayableGraph Visualizer</a>扩展包，还可通过菜单栏<code>Window/Analysis/PlayableGraph Visualizer</code>打开Playable预览窗口，在运行时点击GameObject即可看到具体的构造：<br><img src="https://musoucrow.github.io/images/anim_graph/3.png" alt="3"><br>　　如前图所示，动画相关的Playable类还有很多（AnimationMixerPlayable、AnimationLayerMixerPlayable），足以实现我们需要的基本功能：  </p>
<ul>
<li>播放AnimationClip动画（利用AnimationClipPlayable）</li>
<li>按权重混合两个动画结果，实现混合树以及动画过渡（利用AnimationMixerPlayable）</li>
<li>设置AvatarMask，实现分部位与叠加动画（利用AnimationLayerMixerPlayable）</li>
</ul>
<p>　　下图便是一套实际项目运作的Playable图结构，表示两个部位（身体、部件）运作、且实现了动画过渡（所以分别有两个AnimationClip节点，表示新旧）：<br><img src="https://musoucrow.github.io/images/anim_graph/4.png" alt="4"><br>　　由此可见Playable API在功能上是能够满足需要的，但直接这样吭哧吭哧的直接写肯定是不行的，所以要基于此构思出一套新的工作流，实现其对应的封装。</p>
<h2 id="动画蓝图"><a href="#动画蓝图" class="headerlink" title="动画蓝图"></a>动画蓝图</h2><p>　　若是论对Playable API的动画封装方案，<a href="https://kybernetik.com.au/animancer/" target="_blank" rel="external">Animancer</a>倒是一个不错的选择。该有的功能都有了，还有相关编辑器配套。但最终还是没有选用，原因系Animancer无法直接嵌入我设想的工作流中，且尚需加一些特色功能，这表示需要做一定的改动。最重要的一点在于：<strong>自己重新封装一套的成本并不高</strong>，那既然都要折腾，不妨大干一场了！<br>　　封装方案的具体细节后续再说，先来看看成品的使用情况：<br><img src="https://musoucrow.github.io/images/anim_graph/5.png" alt="5"><br>　　可以看出这是一段基于<a href="https://zhuanlan.zhihu.com/p/509535400" target="_blank" rel="external">xNode的蓝图方案</a>构造的动画配置过程，讲述的是身体本体为播放名为<code>Slash3</code>的动画而做的一系列准备，包括动画帧事件、与<code>Idle</code>动画的切换过渡、速度曲线变化、绑定攻速属性等。从资源图标可以看出，这里的动画资源都是AnimationClip，而非什么名称索引，达到了要<strong>播什么就上什么</strong>的效果，无需像Animator集中配置。这样一段节点过程将会存成单独的蓝图文件，我称之为<strong>动画蓝图</strong>，以供所需之处调用。<br>　　从动画蓝图的参数配置可以看出，它是支持<strong>多个播放实体与多个部件</strong>的，虽然上图只是展示了Body实体下的Base层。但由此可见肯定会有登记具体GameObject为实体的方式：<br><img src="https://musoucrow.github.io/images/anim_graph/6.png" alt="6"><br>　　如此便将小雪人的本体模型登记为名为<code>Body</code>的动画实体了，但由此可以看出还是不够的，必定还有个统一管辖动画的组件：<br><img src="https://musoucrow.github.io/images/anim_graph/7.png" alt="7"><br>　　通过挂载<code>Anim Machine</code>组件提供功能，然后在各处挂载<code>Anim Agent</code>作动画实体登记，再佐以动画蓝图驱动，这便是我的动画工作流！这套方案较之Animator有个很大的优势：它统一管辖了各个动画部件，将<strong>多个部件在一套管理模式下统一运作</strong>，在业务层封装成动画蓝图的形式，实现了<strong>想播什么就播什么</strong>的效果。当然动画蓝图针对的都是具体的AnimationClip，若是想实现<strong>同一套逻辑下不同单位播放不同动画</strong>的话，还可以在Anim Machine组件登记专属的动画蓝图，也就是这个部分：<br><img src="https://musoucrow.github.io/images/anim_graph/8.png" alt="8"><br>　　这时候便如同Animator那般通过名称做了一层映射，在实际调用动画蓝图时会填写名称查找登记，<strong>若登记存在对应动画蓝图则调用登记版本</strong>的，否则为节点参数的：<br><img src="https://musoucrow.github.io/images/anim_graph/9.png" alt="9"><br>　　新的动画工作流方案便这么点内容，我们再回顾一下上文提到的Animator缺点，看看解决情况如何：</p>
<ul>
<li><em>所有动画信息、动画之间的过渡关系都需要集中配置，且继承功能羸弱，缺乏灵活性，极端情况下会呈现蜘蛛网</em><ul>
<li>解决，动画信息无需集中配置，以动画蓝图的形式配置，想播谁调谁</li>
<li>动画之间的过渡关系针对每个动画单独配置，而非蜘蛛网的形式（当然这点也许各有利弊）</li>
<li>继承功能通过在Anim Machine组件登记，调用蓝图时通过名称映射实现替换</li>
</ul>
</li>
<li><em>Animator的Update无法很舒服的控制，虽然提供了<a href="https://docs.unity.cn/cn/current/ScriptReference/Animator.Update.html" target="_blank" rel="external">Animator.Update</a>方法，但想精准控制还需通过调控<a href="https://docs.unity.cn/cn/current/ScriptReference/Animator-speed.html" target="_blank" rel="external">Animator.speed</a>实现</em><ul>
<li>解决，Playable Graph可手动Update，与主逻辑严丝合缝</li>
</ul>
</li>
<li><em>若想符合Animator预设动画之间的过渡效果，需让Animator自行驱动动画状态切换，而非手动调用<a href="https://docs.unity.cn/cn/current/ScriptReference/Animator.Play.html" target="_blank" rel="external">Animator.Play</a>，对于一些条件切换还需通过<a href="https://docs.unity.cn/cn/current/ScriptReference/AnimatorControllerParameter.html" target="_blank" rel="external">AnimatorControllerParameter</a>进行，这使得Animator的状态机运作是独立于逻辑运行的，存在一定的不可控性</em><ul>
<li>解决，动画蓝图记录了针对其他动画的过渡方案，播了就有过渡，不存在独立运作的动画控制流程，按业务层严格控制</li>
</ul>
</li>
<li>除此之外，新方案还统一管辖了多个动画实体，让业务层无需过多操心，并根据业务需求做出诸多扩展，属于根据项目实际情况做出的实践</li>
</ul>
<h2 id="封装构成"><a href="#封装构成" class="headerlink" title="封装构成"></a>封装构成</h2><p>　　在聊具体的代码结构前我们先来看看Playable Graph的具体构成：<br><img src="https://musoucrow.github.io/images/anim_graph/10.png" alt="10"><br>　　可以看出这套结构下LayerPlayable节点是基层的管理单元，表示<strong>一个动画实体下某层部位的动画运作</strong>，基本可以对应为Animator的Layer层。它负责管理新旧两个AnimationClipPlayable以及它们的混合器AnimationMixerPlayable以实现<strong>动画过渡</strong>的功能，外加动画过程相关的<strong>速度曲线变化以及帧事件功能</strong>。<br>　　在LayerPlayable之上便是AnimationPlayableOutput了，它代表着一个动画播放单元，对应着一个Anim Agent组件以及Animator组件。在一整套Playable Graph环境中可以有多个AnimationPlayableOutput，在一个Graph下统一运作。<br>　　接下来便到了具体的代码结构，接下来将以一张描述了核心数据结构的UML图展开具体的组成结构，这不代表全部的代码结构，但足以说清楚核心部分：<br><img src="https://musoucrow.github.io/images/anim_graph/11.png" alt="11"><br>　　上图内容颇多，讲述了各个数据结构的基本成分与它们之间的关联。接下来将以具体的蓝图功能为引，牵引出相关种种。  </p>
<h3 id="设置动画"><a href="#设置动画" class="headerlink" title="设置动画"></a>设置动画</h3><p><img src="https://musoucrow.github.io/images/anim_graph/12.png" alt="12"><br>　　上图为动画功能节点中的核心成分：设置动画（SetClip）。从前文可知这套动画方案是类似图形API的设置若干状态后执行的，所以这里只是为指定的动画实体（Part）下的部件（Layer）设置将要播放的AnimationClip资源。这将是个穿针引线的好机会，以下为关键代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    private PlayableGraph graph;</div><div class="line">    private Dictionary&lt;string, Part&gt; partMap;</div><div class="line"></div><div class="line">    public void SetClip(string name, string layer, AnimationClip clip, bool isOnly=false) &#123;</div><div class="line">        // 根据name判断当前动画实体是否存在</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        if (layerMap.ContainsKey(layer)) &#123;</div><div class="line">            // isOnly参数判断不播放相同的动画</div><div class="line">            if (isOnly &amp;&amp; layerMap[layer].behaviour.Clip == clip) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            // 若无当前Layer则创建</div><div class="line">            this.NewLayer(name, layer);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 通过clip创建AnimationClipPlayable</div><div class="line">        var playable = AnimationClipPlayable.Create(this.graph, clip);</div><div class="line">        </div><div class="line">        if (clip &amp;&amp; !clip.isLooping) &#123;</div><div class="line">            // 设置动画时长</div><div class="line">            playable.SetDuration(clip.length);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 获取先前的动画过渡设置中是否有此动画的相关项</div><div class="line">        var cond = this.GetTransition(layerMap[layer].conds, layerMap[layer].appendConds, clip);</div><div class="line">        </div><div class="line">        // 调用LayerPlayable，传入AnimationClipPlayable和过渡项</div><div class="line">        layerMap[layer].behaviour.Play(playable, cond);</div><div class="line">        layerMap[layer].playable.SetSpeed(1);</div><div class="line">        layerMap[layer].isOnly = isOnly;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　以上为AnimMachine层面的SetClip方法内容，大致便是做了Part与Layer的相关准备工作，创建了AnimationClipPlayable与获取动画过渡项，最后通过LayerPlayable驱动。那么接下来看看LayerPlayable.Play的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">// LayerPlayable.cs</div><div class="line"></div><div class="line">public class LayerPlayable : PlayableBehaviour &#123;</div><div class="line">    public FrameEvent[] events;</div><div class="line"></div><div class="line">    private AnimationMixerPlayable mixerPlayable;</div><div class="line">    private AnimationClipPlayable beforePlayable;</div><div class="line">    private AnimationClipPlayable currentPlayable;</div><div class="line">    private int eventIndex;</div><div class="line"></div><div class="line">    private Tween transitTween;</div><div class="line">    private Tween speedTween;</div><div class="line"></div><div class="line">    public void Play(in AnimationClipPlayable playable, TransitionCond cond) &#123;</div><div class="line">        // 将先前的AnimationClipPlayable全部断连，可理解为重置</div><div class="line">        for (int i = 0; i &lt; this.mixerPlayable.GetInputCount(); i++) &#123;</div><div class="line">            this.mixerPlayable.DisconnectInput(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Playable数据结构基本为值类型，通过此方法管理内存</div><div class="line">        if (this.beforePlayable.IsValid()) &#123;</div><div class="line">            this.beforePlayable.Destroy();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 标记前动画Playable与现在的</div><div class="line">        this.beforePlayable = this.currentPlayable;</div><div class="line">        this.currentPlayable = playable;</div><div class="line"></div><div class="line">        // 根据有效性计算AnimationMixerPlayable的输入数量</div><div class="line">        int count = 0;</div><div class="line">        count = this.currentPlayable.IsValid() ? count++ : count;</div><div class="line">        count = this.beforePlayable.IsValid() ? count++ : count;</div><div class="line">        this.mixerPlayable.SetInputCount(count);</div><div class="line"></div><div class="line">        // 部署新旧AnimationClipPlayable的权重，为动画过渡作准备</div><div class="line">        int n = 0;</div><div class="line"></div><div class="line">        if (this.currentPlayable.IsValid()) &#123;</div><div class="line">            this.Connect(n, this.currentPlayable);</div><div class="line">            this.mixerPlayable.SetInputWeight(n, 0);</div><div class="line">            n++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (this.beforePlayable.IsValid()) &#123;</div><div class="line">            this.Connect(n, this.beforePlayable);</div><div class="line">            this.mixerPlayable.SetInputWeight(n, 1);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 重置帧事件相关</div><div class="line">        this.events = null;</div><div class="line">        this.eventIndex = 0;</div><div class="line"></div><div class="line">        // 准备过渡插值，关闭速度变化插值</div><div class="line">        this.EnterTransitTween(cond.time);</div><div class="line">        this.speedTween.Exit();</div><div class="line"></div><div class="line">        // 准备过渡初始化</div><div class="line">        this.mixerPlayable.SetTime(0);</div><div class="line">        this.mixerPlayable.SetSpeed(1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　上述代码中的<code>Tween</code>类型是未曾介绍的，不过有过相关动效经验的人士相信一眼便看出来是什么了：它可通过指定起始、目标值，经历时间，然后根据特定的<strong>插值模式</strong>实现富有曲线变化的插值效果：<br><img src="https://musoucrow.github.io/images/anim_graph/13.png" alt="13"><br>　　简而言之，便是能让动画速度与过渡效果<strong>更富有节奏变化</strong>的中间件。当然实际上过渡这块并没有用上特殊的插值模式，因为实践下来无甚区别。接下来正好将动画过渡这块展开讲讲——  </p>
<h3 id="动画过渡"><a href="#动画过渡" class="headerlink" title="动画过渡"></a>动画过渡</h3><p>　　在聊动画过渡之前，我们先来看看它到底是个啥：<br><img src="https://musoucrow.github.io/images/anim_graph/14.gif" alt="14"><br>　　重点关注攻击结束到恢复站立的那段动画过程，实际上它是由<strong>一个动画（Attack）过渡到了另一个动画（Idle）</strong>：<br><img src="https://musoucrow.github.io/images/anim_graph/15.png" alt="15"><br>　　由于骨骼动画的本质是在一个个姿势之间插值，所以跨动画姿势插值自然是可以做到的。但不似一段动画过程中的姿势插值，跨动画的姿势插值没有明确的插值时间，且各种动画之间的插值效果也是不确定的。所以我们需要为此做出一套管理机制，这便是此节点的意义：<br><img src="https://musoucrow.github.io/images/anim_graph/16.png" alt="16"><br>　　上图节点是在展示中的攻击动画蓝图里的，用途为<strong>当切换为Idle动画时，用0.15秒过渡过去</strong>，而切换到其他动画的话则是按默认过渡时间<em>0.1秒</em>进行，也可通过过渡项填空的方式指定默认过渡时间：<br><img src="https://musoucrow.github.io/images/anim_graph/17.png" alt="17"><br>　　当然除了这种从动画自身考虑切换到其他动画的情况，还有一种是主动设定切换到本动画时的过渡时间：<br><img src="https://musoucrow.github.io/images/anim_graph/18.png" alt="18"><br>　　如上图般设置，当播放此动画时便会直接完成切换，没有过渡。在诸如挨打动画这种讲究蒙太奇效果的场合很合适：<br><img src="https://musoucrow.github.io/images/anim_graph/41.gif" alt="41"><br>　　如此可见，本套方案便是用这种离散式的节点设置替代了Animator的蜘蛛网，可谓有利有弊吧，但显然是更得我心的。接下来看看具体的代码实现：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    [Serializable]</div><div class="line">    public struct TransitionCond &#123;</div><div class="line">        public AnimationClip target;</div><div class="line">        public float time;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 就是普通的设置</div><div class="line">    public void SetTransitionConds(string name, string layer, TransitionCond[] conds) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        if (!layerMap.ContainsKey(layer)) &#123;</div><div class="line">            this.NewLayer(name, layer);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        layerMap[layer].conds = conds;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void SetTransit(string name, string layer, float time) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        if (!layerMap.ContainsKey(layer)) &#123;</div><div class="line">            this.NewLayer(name, layer);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 直接启动过渡插值，所以需要在SetClip之后调用</div><div class="line">        layerMap[layer].behaviour.EnterTransitTween(time);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 根据clip寻找符合条件的过渡方案</div><div class="line">    private TransitionCond GetTransition(TransitionCond[] conds, AnimationClip clip) &#123;</div><div class="line">        // 缺省情况</div><div class="line">        if (conds == null) &#123;</div><div class="line">            return new TransitionCond() &#123;time = 0.1f&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 遍历搜索</div><div class="line">        foreach (var t in conds) &#123;</div><div class="line">            if (t.target == clip) &#123;</div><div class="line">                return t;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 若最后为空则为默认设置</div><div class="line">        if (conds[conds.Length - 1].target == null) &#123;</div><div class="line">            return conds[conds.Length - 1];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 默认为0.1秒切换</div><div class="line">        return new TransitionCond() &#123;time = 0.1f&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void SetClip(string name, string layer, AnimationClip clip, bool isOnly=false) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 获取符合条件的过渡方案</div><div class="line">        var cond = this.GetTransition(layerMap[layer].conds, clip);</div><div class="line">        // LayerPlayable设置动画相关</div><div class="line">        layerMap[layer].behaviour.Play(playable, cond);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　可以看出AnimMachine部分并无什么重点，主要是根据AnimationClip搜索TransitionCond，还是看看关键的LayerPlayable吧：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">// LayerPlayable.cs</div><div class="line"></div><div class="line">public class LayerPlayable : PlayableBehaviour &#123;</div><div class="line">    // 外部传入的设置AnimationLayerPlayable的回调</div><div class="line">    public Action&lt;float&gt; SetLayerWeight;</div><div class="line">    </div><div class="line">    private Tween transitTween;</div><div class="line"></div><div class="line">    // 创建回调</div><div class="line">    public override void OnPlayableCreate(Playable playable) &#123;</div><div class="line">        base.OnPlayableCreate(playable);</div><div class="line"></div><div class="line">        // 创建Tween对象，设置运行回调</div><div class="line">        this.transitTween = new Tween(this.OnTransitTween);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Update函数</div><div class="line">    public override void PrepareFrame(Playable playable, FrameData info) &#123;</div><div class="line">        base.PrepareFrame(playable, info);</div><div class="line"></div><div class="line">        this.transitTween.Update(info.deltaTime);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 启动过渡插值</div><div class="line">    public void EnterTransitTween(float time) &#123;</div><div class="line">        this.transitTween.Enter(0, 1, time);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // TransitionCond由AnimMachine通过GetTransition获得传入</div><div class="line">    public void Play(in AnimationClipPlayable playable, TransitionCond cond) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 启动过渡插值</div><div class="line">        this.EnterTransitTween(cond.time);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 过渡插值运行时调用</div><div class="line">    private void OnTransitTween() &#123;</div><div class="line">        // 获取当前插值的进度（0-1）</div><div class="line">        float rate = this.transitTween.Rate;</div><div class="line">        // 获取当前动画的Clip资源</div><div class="line">        AnimationClip clip = this.currentPlayable.GetAnimationClip();</div><div class="line"></div><div class="line">        // 当没有动画时，会逐渐将本Layer的权重降为0，不产生效果</div><div class="line">        if (clip == null) &#123;</div><div class="line">            this.SetLayerWeight(1 - rate);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 设置当前动画的权重，逐渐增大(0 -&gt; 1)，产生效果</div><div class="line">        this.mixerPlayable.SetInputWeight(0, rate);</div><div class="line"></div><div class="line">        // 若存在旧动画</div><div class="line">        if (this.mixerPlayable.GetInputCount() &gt; 1) &#123;</div><div class="line">            // 设置旧动画的权重，逐渐减少(1 -&gt; 0)，失去效果</div><div class="line">            this.mixerPlayable.SetInputWeight(1, 1 - rate);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　上述代码主要是通过<code>transitTween</code>驱动<code>mixerPlayable</code>对新旧动画输入源的权重调整实现过渡效果，其中的重点在于Layer无Clip时的处理：通过调用上层传入的<code>SetLayerWeight</code>回调从而控制<code>AnimationLayerMixerPlayable</code>对当前Layer输入源的权重从而实现逐渐失效：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    public class Part &#123;</div><div class="line">        public GameObject gameObject;</div><div class="line">        public AnimationPlayableOutput output;</div><div class="line">        public AnimationLayerMixerPlayable mixerPlayable;</div><div class="line">        public Dictionary&lt;string, Layer&gt; layerMap;</div><div class="line">        public List&lt;Layer&gt; layers;</div><div class="line">        public bool needSort;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class Layer &#123;</div><div class="line">        public AvatarMask mask;</div><div class="line">        public bool isAdditive;</div><div class="line">        public float weight;</div><div class="line">        public ScriptPlayable&lt;LayerPlayable&gt; playable;</div><div class="line">        public LayerPlayable behaviour;</div><div class="line">        public TransitionCond[] conds;</div><div class="line">        public bool isOnly;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void NewLayer(string name, string layer) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line">        var layers = this.partMap[name].layers;</div><div class="line"></div><div class="line">        // 标记播放时将对layers进行排序</div><div class="line">        this.partMap[name].needSort = true;</div><div class="line"></div><div class="line">        // layerMap用于通过名称索引对象，layers用于确保Layer的输入源id</div><div class="line">        var obj = new Layer();</div><div class="line">        layerMap.Add(layer, obj);</div><div class="line">        layers.Add(obj);</div><div class="line"></div><div class="line">        // 创建LayerPlayable</div><div class="line">        obj.playable = ScriptPlayable&lt;LayerPlayable&gt;.Create(this.graph, 1);</div><div class="line">        obj.weight = 1;</div><div class="line">        obj.index = -1;</div><div class="line"></div><div class="line">        // 获取真正的PlayableBehaviour对象</div><div class="line">        obj.behaviour = obj.playable.GetBehaviour();</div><div class="line">        // 设置SetLayerWeight回调</div><div class="line">        obj.behaviour.SetLayerWeight = (rate) =&gt; &#123;</div><div class="line">            // obj.index将在真正播放时分配</div><div class="line">            if (obj.index &gt;= 0) &#123;</div><div class="line">                // 设置AnimationLayerMixerPlayable的输入源权重</div><div class="line">                this.partMap[name].mixerPlayable.SetInputWeight(obj.index, obj.weight * rate);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　上述代码展示了Layer的创建过程，并引入了Part部分的mixerPlayable。可以理解为Layer层面下有个针对<strong>新旧动画之间</strong>的Mixer，Part层面下有个针对<strong>Layer之间</strong>的Mixer。而为了Layer是有序接入Part的Mixer的，还需为Layer设计两套容器存储（<code>layerMap</code>和<code>layers</code>）。既然已经引入到了Part，那么接下来关联性最大的节点为引展开讲讲吧——  </p>
<h3 id="播放"><a href="#播放" class="headerlink" title="播放"></a>播放</h3><p><img src="https://musoucrow.github.io/images/anim_graph/19.png" alt="19"><br>　　播放节点作为动画蓝图设置完毕后的执行命令，类似渲染管线里的<code>CommandBuffer.Submit()</code>——将先前设置的状态打包执行。当然与Submit一样，播放节点也不会立即执行生效，而是在之后的逻辑时机统一执行，除非你勾选了<code>force</code>参数：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    private HashSet&lt;string&gt; playSet;</div><div class="line"></div><div class="line">    protected void Awake() &#123;</div><div class="line">        this.graph = PlayableGraph.Create(this.gameObject.name);</div><div class="line">        this.graph.SetTimeUpdateMode(DirectorUpdateMode.Manual);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void Start() &#123;</div><div class="line">        this.graph.Play();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void Update() &#123;</div><div class="line">        // 手动更新Playable Graph</div><div class="line">        if (!this.IsPaused) &#123;</div><div class="line">            this.graph.Evaluate(Time.deltaTime);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void LateUpdate(float dt) &#123;</div><div class="line">        if (this.playSet.Count &gt; 0) &#123;</div><div class="line">            // 遍历命令播放</div><div class="line">            foreach (var p in this.playSet) &#123;</div><div class="line">                this.PlayAux(p);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            this.playSet.Clear();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void Play(string name, bool force=false) &#123;</div><div class="line">        // force则直接执行</div><div class="line">        if (force) &#123;</div><div class="line">            this.PlayAux(name);</div><div class="line">            this.playSet.Remove(name);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            this.playSet.Add(name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 真正的播放执行</div><div class="line">    private void PlayAux(string name) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var part = this.partMap[name];</div><div class="line"></div><div class="line">        // 清空Layer输入源</div><div class="line">        for (int i = 0; i &lt; part.mixerPlayable.GetInputCount(); i++) &#123;</div><div class="line">            part.mixerPlayable.DisconnectInput(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 对Layer们进行排序，若是有新Layer加入的话</div><div class="line">        if (part.needSort) &#123;</div><div class="line">            part.layers.Sort(this.Sort);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 设置输入源数量</div><div class="line">        part.mixerPlayable.SetInputCount(part.layers.Count);</div><div class="line">        int n = 0;</div><div class="line"></div><div class="line">        // 遍历Layer对象，将符合条件的LayerPlayable都加入到mixerPlayable中</div><div class="line">        for (int i = 0; i &lt; part.layers.Count; i++) &#123;</div><div class="line">            var layer = part.layers[i];</div><div class="line"></div><div class="line">            // 无权重、无动画者退出</div><div class="line">            if (layer.weight == 0 || !layer.behaviour.Clip) &#123;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 设置接入、序号、权重、是否为叠加效果</div><div class="line">            part.mixerPlayable.ConnectInput(n, layer.playable, 0);</div><div class="line">            part.mixerPlayable.SetInputWeight(n, layer.weight);</div><div class="line">            part.mixerPlayable.SetLayerAdditive((uint)n, layer.isAdditive);</div><div class="line">            layer.index = n;</div><div class="line"></div><div class="line">            // 若是有AvatarMask，则用于指定具体生效骨骼</div><div class="line">            if (layer.mask) &#123;</div><div class="line">                part.mixerPlayable.SetLayerMaskFromAvatarMask((uint)n, layer.mask);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            n++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　可以看出，Play真正执行的内容便是构建<code>part.mixerPlayable</code>，Layer部分的Play内容已经在<code>SetClip()</code>时通过<code>LayerPlayable.Play()</code>完成了。将播放执行放在后续逻辑统一进行是为了业务的稳定性，也为特殊情况提供了force参数网开一面。<br>　　说道这份上，顺带再看看动画实体Part的初始化过程，以补全最后一块拼图吧：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    // 通过AnimAgent组件调用</div><div class="line">    public void SetPart(string name, GameObject gameObject) &#123;</div><div class="line">        // 若存在相同Part则拒绝</div><div class="line">        if (this.partMap.ContainsKey(name) &amp;&amp; this.partMap[name].gameObject == gameObject) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 销毁已存在的Playable</div><div class="line">        if (this.partMap.ContainsKey(name)) &#123;</div><div class="line">            this.partMap[name].mixerPlayable.Destroy();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // gameObject为空则表示卸载</div><div class="line">        if (!gameObject) &#123;</div><div class="line">            this.partMap.Remove(name);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var animator = gameObject.GetComponent&lt;Animator&gt;();</div><div class="line"></div><div class="line">        // Playable API动画需要Animator组件支持，若不存在则创建</div><div class="line">        if (!animator) &#123;</div><div class="line">            animator = gameObject.AddComponent&lt;Animator&gt;();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 正式创建Part对象</div><div class="line">        var part = new Part();</div><div class="line">        part.gameObject = gameObject;</div><div class="line">        part.layerMap = new Dictionary&lt;string, Layer&gt;();</div><div class="line">        part.layers = new List&lt;Layer&gt;();</div><div class="line">        part.mixerPlayable = AnimationLayerMixerPlayable.Create(this.graph);</div><div class="line">        part.output = AnimationPlayableOutput.Create(this.graph, gameObject.name, animator);</div><div class="line">        part.output.SetSourcePlayable(part.mixerPlayable);</div><div class="line">        this.partMap[name] = part;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="专门功能"><a href="#专门功能" class="headerlink" title="专门功能"></a>专门功能</h2><p>　　通过<strong>设置动画、动画过渡、播放</strong>三块，我们将整个动画方案的核心构成都梳理清楚了。接下来便是介绍在此之上的诸多功能了，与先前相同，也是通过蓝图节点为引进行介绍：  </p>
<h3 id="帧事件"><a href="#帧事件" class="headerlink" title="帧事件"></a>帧事件</h3><p><img src="https://musoucrow.github.io/images/anim_graph/20.png" alt="20"><br>　　本动画方案并没有选择Unity为AnimationClip准备的<a href="https://docs.unity.cn/cn/current/Manual/script-AnimationWindowEvent.html" target="_blank" rel="external">AnimationEvent</a>，而是选择自定义了一套帧事件方案：通过设置事件蓝图填写每个时间点触发的对应事件名，在动画执行到对应时间点时将调用回调函数通知外界对应事件触发。从编辑交互的角度来说可谓原始得很了，被AnimationEvent完爆。这一块确实没那么讲究，凑合了。<br>　　之所以不考虑AnimationEvent，有以下几点原因：  </p>
<ul>
<li>在某些极端情况下会跳帧，事件未触发</li>
<li>在动画过渡期间旧动画的事件依旧会执行</li>
<li>与动画播放强耦合了，不利于纯逻辑运行</li>
<li>不方便大规模编辑</li>
<li>底层事件调用性能不佳</li>
</ul>
<p>　　于是自己造一套便势在必行了，当然对于使用Timeline制作流程业务的方案下就不需要了，因为Timeline本身便是帧事件触发。当然我并没有选择Timeline方案，所以帧事件也算是一种替代了。如上图所示般，那是一段攻击动画涉及的种种事件，之所以不是填写具体的动画帧数而是时间，首先是为能够让帧事件独立运作留个后门，其次是<strong>不同的AnimationClip的FPS是不一定一致的</strong>，从而会导致描述不稳定，且按帧作为时间刻度的话可能太大了（FPS较低）的话，这个问题在AnimationEvent很明显。<br><img src="https://musoucrow.github.io/images/anim_graph/21.png" alt="21"><br>　　上图便是播放攻击动画的状态蓝图，可见便是在动画蓝图中登记的对应事件业务。状态机这边通过注册回调以获得动画事件的触发，从而调用状态蓝图中对应的功能，实现动画驱动逻辑的效果。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    [Serializable]</div><div class="line">    public struct FrameEvent &#123;</div><div class="line">        public float time;</div><div class="line">        public string name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 平平无奇的设置数据</div><div class="line">    public void SetFrameEvents(string name, string layer, FrameEvent[] events) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        if (!layerMap.ContainsKey(layer)) &#123;</div><div class="line">            this.NewLayer(name, layer);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        layerMap[layer].behaviour.events = events;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　然后便到代码环节了，AnimMachine部分无甚出奇的内容，就是个对应设置事件的蓝图节点，还是看看重点部分吧：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">// LayerPlayable.cs</div><div class="line"></div><div class="line">public class LayerPlayable : PlayableBehaviour &#123;</div><div class="line">    // 事件集，由AnimMachine.SetFrameEvents()传入</div><div class="line">    public FrameEvent[] events;</div><div class="line">    // 事件触发回调</div><div class="line">    public Action&lt;string&gt; OnEvent;</div><div class="line"></div><div class="line">    // 当前执行到的事件进度</div><div class="line">    private int eventIndex;</div><div class="line"></div><div class="line">    public void Play(in AnimationClipPlayable playable, TransitionCond cond) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 设置动画时会清空事件相关</div><div class="line">        this.events = null;</div><div class="line">        this.eventIndex = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Update</div><div class="line">    public override void PrepareFrame(Playable playable, FrameData info) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 无事件则结束</div><div class="line">        if (this.events == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 获取当前动画的进度时间</div><div class="line">        var time = this.currentPlayable.GetTime();</div><div class="line"></div><div class="line">        // 从当前事件序号进度开始遍历，为防止事件触发后events清空，故加判定</div><div class="line">        // 这般遍历是为了确保哪怕跳帧也能不错漏触发事件</div><div class="line">        for (int i = this.eventIndex; this.events != null &amp;&amp; i &lt; this.events.Length; i++) &#123;</div><div class="line">            var t = this.events[i].time;</div><div class="line"></div><div class="line">            if (time &gt;= t) &#123;</div><div class="line">                this.eventIndex = i + 1;</div><div class="line">                this.OnEvent(this.events[i].name);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 处理循环动画的情况，恢复事件进度</div><div class="line">        if (this.Clip &amp;&amp; this.Clip.isLooping &amp;&amp; time &gt;= this.Clip.length) &#123;</div><div class="line">            var retain = time - this.Clip.length;</div><div class="line">            this.currentPlayable.SetTime(retain);</div><div class="line">            this.eventIndex = 0;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　可以看出帧事件的实现相当简单，主要注意<strong>动画速度过快时跳帧也不要漏过事件</strong>即可。由于《拉维瓦纳》是纯粹的单机游戏，没有划分纯逻辑层的动机，所以理应独立运行的帧事件也寄宿于Playable中了，阿弥陀佛。  </p>
<h3 id="速度控制"><a href="#速度控制" class="headerlink" title="速度控制"></a>速度控制</h3><p><img src="https://musoucrow.github.io/images/anim_graph/22.gif" alt="22"> <img src="https://musoucrow.github.io/images/anim_graph/23.gif" alt="23"><br>　　对比上图，前者为纯匀速，后者为加入了速度变化的效果，以此增添更强的节奏感。当然其实纯匀速的效果也并不差，在多数游戏估计就这么行了，毕竟动画制作时关键帧之间的插值也不是线性的，本身就具有节奏感。但我选择开发了速度变化功能以此兜底，之所以不选择回到DCC重修动画，一来这样工作流比较折腾，其次实际演出是很综合性的结果，孤立的调整动画很难找到那种感觉，且不同的演出下哪怕是用了相同的动画，其对于节奏的要求也许也是不同的，故做了这个蓝图节点：<br><img src="https://musoucrow.github.io/images/anim_graph/24.png" alt="24"><br>　　含义非常简单，为某个动画设置<strong>起始速度、终点速度、变化时间、插值曲线</strong>，产生一段动画速度的插值变化，也可以<code>From, To</code>都填相同的数值实现简单的速度设置。其实这里算是偷懒了，存在一个硬伤：<strong>无法实现低-高-低的速度变化</strong>，只有从一个值到另一个值，按理来说为此应该使用<a href="https://docs.unity.cn/cn/current/ScriptReference/AnimationCurve.html" target="_blank" rel="external">AnimationCurve</a>实现，但其缺点为难以拉出比算法强的曲线，但可开发配套工具利用算法生成，这个纳入日后的待办事项吧。<br>　　除此之外速度相关的还有与具体属性绑定的蓝图节点，根据属性影响动画速度，与速度变化是相乘关系：<br><img src="https://musoucrow.github.io/images/anim_graph/25.png" alt="25"><br>　　如上图所示般，攻击动画绑定了攻速属性，将受攻速影响：<br><img src="https://musoucrow.github.io/images/anim_graph/26.gif" alt="26"><br>　　当然要注意攻击特效的播放速度也得跟随动画速度，所以也会提供相关获取播放速度的API以供外界调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    // 整个动画系统的总速度</div><div class="line">    public float speed = 1;</div><div class="line"></div><div class="line">    protected void Update() &#123;</div><div class="line">        // 总speed生效</div><div class="line">        float dt = Time.deltaTime * this.speed;</div><div class="line">        </div><div class="line">        if (!this.IsPaused) &#123;</div><div class="line">            this.graph.Evaluate(dt);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 设置LayerPlayable的播放速度，这里对应的是绑定属性的速度</div><div class="line">    public void SetSpeed(string name, string layer, float speed) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        if (!layerMap.ContainsKey(layer)) &#123;</div><div class="line">            this.NewLayer(name, layer);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        layerMap[layer].playable.SetSpeed(speed);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 启动速度变化插值，这里调整的是Layer.mixerPlayable的播放速度</div><div class="line">    public void EnterSpeedTween(string name, string layer, float from, float to, float time, Tween.Easing easing, float clock=0) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        if (!layerMap.ContainsKey(layer)) &#123;</div><div class="line">            this.NewLayer(name, layer);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        layerMap[layer].behaviour.EnterSpeedTween(from, to, time, easing, clock);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取动画实体总体的播放速度，根据各种情况计算</div><div class="line">    public float GetSpeed(string name, string layer) &#123;</div><div class="line">        // 查无此人时返回1</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return 1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        // 查无此层时返回总速度</div><div class="line">        if (!layerMap.ContainsKey(layer)) &#123;</div><div class="line">            return this.speed;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 总速度 * 属性速度 * 变化速度</div><div class="line">        return this.speed * layerMap[layer].behaviour.Speed * (float)layerMap[layer].playable.GetSpeed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　可以看出动画方案将速度分成了三层：总速度（影响全局）、属性速度（影响Layer）、变化速度（Layer之下），借助Playable Graph的特性，<strong>输入源的速度可影响下层的速度</strong>，且彼此的数值管理独立，分别将属性速度与变化速度存于不同的Playable中，满足功能需求。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// LayerPlayable.cs</div><div class="line"></div><div class="line">public class LayerPlayable : PlayableBehaviour &#123;</div><div class="line">    private AnimationMixerPlayable mixerPlayable;</div><div class="line">    private Tween speedTween;</div><div class="line"></div><div class="line">    public override void OnPlayableCreate(Playable playable) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 创建变化速度的Tween，绑定运行回调</div><div class="line">        this.speedTween = new Tween(this.OnSpeedTween);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override void PrepareFrame(Playable playable, FrameData info) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 每帧驱动运行</div><div class="line">        this.speedTween.Update(info.deltaTime);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void Play(in AnimationClipPlayable playable, TransitionCond cond) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 设置动画后关闭，需重新设置</div><div class="line">        this.speedTween.Exit();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 启动速度变化</div><div class="line">    public void EnterSpeedTween(float from, float to, float time, Tween.Easing easing, float clock=0) &#123;</div><div class="line">        this.speedTween.Enter(from, to, time, easing);</div><div class="line">        this.speedTween.Clock = clock;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 速度变化Tween运行时调用</div><div class="line">    private void OnSpeedTween() &#123;</div><div class="line">        // 获取当前速度值，赋值给mixerPlayable</div><div class="line">        this.mixerPlayable.SetSpeed(this.speedTween.Value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　若是改为AnimationCurve的方案则不能用Tween了，得根据播放时间采样对应曲线上的值，当然那是后话了——</p>
<h3 id="暂停控制"><a href="#暂停控制" class="headerlink" title="暂停控制"></a>暂停控制</h3><p><img src="https://musoucrow.github.io/images/anim_graph/27.gif" alt="27"> <img src="https://musoucrow.github.io/images/anim_graph/28.gif" alt="28"><br>　　如上两图所示，动画播放因为业务的原因（卡肉、硬直）会陷入一段时间的暂停。本来这块对外提供个暂停接口再实现相关业务即可，但想到若是要兼容多种暂停的情况势必得开发个暂停管理层，那干脆将相关业务直接写进AnimMachine好了：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    // 提供单位是否暂停的组件</div><div class="line">    private Identity identity;</div><div class="line"></div><div class="line">    // 硬直计时器</div><div class="line">    public Timer lagTimer;</div><div class="line">    // 通用暂停开关</div><div class="line">    public bool isPaused;</div><div class="line">    </div><div class="line">    public bool IsPaused &#123;</div><div class="line">        get &#123;</div><div class="line">            // 暂停条件</div><div class="line">            return (this.identity &amp;&amp; this.identity.isPaused) || this.lagTimer.IsRunning || this.isPaused;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void Awake() &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        this.lagTimer = new Timer();</div><div class="line">        this.identity = this.GetComponent&lt;Identity&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void Update() &#123;</div><div class="line">        float dt = Time.deltaTime * this.speed</div><div class="line"></div><div class="line">        this.lagTimer.Update(dt);</div><div class="line"></div><div class="line">        // 暂停时则停止Play Graph运作</div><div class="line">        if (!this.IsPaused) &#123;</div><div class="line">            this.graph.Evaluate(dt);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void PlayAux(string name) &#123;</div><div class="line">        // ...</div><div class="line"></div><div class="line">        // 播放时取消硬直计时器</div><div class="line">        this.lagTimer.Exit();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　由于卡肉属于单位全局性的暂停，所以交给其他组件负责，AnimMachine作配合即可。硬直方面则通过在外界启动<code>lagTimer</code>进行控制，再配合<code>isPaused</code>变量作一般功能性的暂停控制。  </p>
<h3 id="AvatarMask"><a href="#AvatarMask" class="headerlink" title="AvatarMask"></a>AvatarMask</h3><p><img src="https://musoucrow.github.io/images/anim_graph/29.gif" alt="29"><br>　　AvatarMask，Unity提供选择某些部位执行动画的方案，在Playable API下依旧存在。与Animator那样Layer绑定特定AvatarMask不同，在本方案下是根据蓝图节点自由设置的，可随时切换：<br><img src="https://musoucrow.github.io/images/anim_graph/30.png" alt="30"> <img src="https://musoucrow.github.io/images/anim_graph/31.png" alt="31">  <img src="https://musoucrow.github.io/images/anim_graph/32.gif" alt="32"><br>　　在转转时移动播放此动画，通过AvatarMask使得只有腿部骨骼生效，即可实现上半身攻击下半身走路的效果。且设置权重值为0.8，产生与本体动画的混合感。  </p>
<h2 id="特色用法"><a href="#特色用法" class="headerlink" title="特色用法"></a>特色用法</h2><p>　　除了以上专门功能外，还有一些特色用法值得说说。这下真是最后一段了，拖太长了。  </p>
<h3 id="单帧设置"><a href="#单帧设置" class="headerlink" title="单帧设置"></a>单帧设置</h3><p><img src="https://musoucrow.github.io/images/anim_graph/33.gif" alt="33"><br>　　如上图所示，其朝向鼠标指针的转向其实也是个动画：<br><img src="https://musoucrow.github.io/images/anim_graph/34.gif" alt="34"><br>　　它本质上是个由0-360帧组成对应0-360度转身的功能性动画，这样的动画自然是不能直接播放的，反而需要设置单帧固定好：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// AnimMachine.cs</div><div class="line"></div><div class="line">public class AnimMachine : MonoBehaviour &#123;</div><div class="line">    public void SetTime(string name, string layer, float time, bool paused=true) &#123;</div><div class="line">        if (!this.partMap.ContainsKey(name)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var layerMap = this.partMap[name].layerMap;</div><div class="line"></div><div class="line">        if (!layerMap.ContainsKey(layer)) &#123;</div><div class="line">            this.NewLayer(name, layer);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 设置CurrentPlayable的帧时间并暂停</div><div class="line">        layerMap[layer].behaviour.IsPaused = paused;</div><div class="line">        layerMap[layer].behaviour.Time = time;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　然后通过鼠标指针与单位的相对角度转换为帧时间设置，且为转向动画使用专门的AvatarMask，即可实现跟随鼠标转向的效果了。  </p>
<h3 id="部件动画协同"><a href="#部件动画协同" class="headerlink" title="部件动画协同"></a>部件动画协同</h3><p><img src="https://musoucrow.github.io/images/anim_graph/35.gif" alt="35"><br>　　这样看似简单的跑步动画实际上是由两个动画组成的，本体与部件：<br><img src="https://musoucrow.github.io/images/anim_graph/36.gif" alt="36"> <img src="https://musoucrow.github.io/images/anim_graph/37.gif" alt="37"><br>　　这么做是为了通用性，跑步动画是所有单位皆可使用的，所以为了在此基础上加料就得单独做个动画，最后组合起来播放：<br><img src="https://musoucrow.github.io/images/anim_graph/38.png" alt="38"><br>　　如上图所示，为了省事专门开发了部署部件的蓝图节点，在调用通用跑步的动画蓝图后，Part层对Body层的设置进行了继承，并播放了专门的部件Clip配合相关AvatarMask，并且部件动画之间也有自己的过渡关系：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// AnimSvc.cs</div><div class="line"></div><div class="line">public static class AnimSvc &#123;</div><div class="line">    public static void SetAvatarPart(AnimMachine animMachine, string name, string layer, string bodyLayer, AnimationClip clip, AvatarMask mask) &#123;</div><div class="line">        // dstLayer继承srcLayer的各项属性</div><div class="line">        animMachine.Inherit(name, srcLayer, dstLayer);</div><div class="line">        animMachine.SetClip(name, layer, clip, isOnly);</div><div class="line">        animMachine.SetAvatarMask(name, layer, mask, isAdditive);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="组合动画"><a href="#组合动画" class="headerlink" title="组合动画"></a>组合动画</h3><p><img src="https://musoucrow.github.io/images/anim_graph/39.gif" alt="39"><br>　　如上图所示，像这种由多个部件组合而成的流程动画控制也是交由本动画方案实现的，毕竟AnimationClip可不只是骨骼动画。为每个子GameObject标注为动画实体，通过动画蓝图统一调度：<br><img src="https://musoucrow.github.io/images/anim_graph/40.png" alt="40">  </p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　总算是写完了，本篇文章断断续续写了好几天（属实是拉了），光是配图都配了41张。难免会有割裂之处，还请谅解。由于与业务深度捆绑，也不便作个开源版本，大伙便从这只言片语中看个思想，也算作为Unity动画方案的一种思路吧。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　转眼间到了十月，再不写点东西都不会写了。
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Tools" scheme="https://musoucrow.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>基于xNode构造的蓝图方案</title>
    <link href="https://musoucrow.github.io/2022/05/05/blueprint/"/>
    <id>https://musoucrow.github.io/2022/05/05/blueprint/</id>
    <published>2022-05-04T23:13:33.000Z</published>
    <updated>2022-05-05T04:16:49.986Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　经历两月的上海疫情风波，过完了一个毫无实感的五一假期后蓦然回首今年居然还没写博客。恰好现有的一套方案也刚好历时半年以上的验证了，也到了该分享的时候了，也作为Gameplay相关分享的回归开幕。<br>　　有过Gameplay相关经验的朋友应该对于业务开发流程都有自己的一套，每个项目可能都不尽相同。相比的《DFQ》的纯代码硬磕、相关参数读取配置的方案，《拉维瓦纳》选择的是导出关键API、围绕蓝图组织逻辑与数据的方案。这样不仅存在让策划深度参与的可能性、也使得逻辑与数据的隔阂被打破——甚至可以说蓝图就是一种<strong>具有逻辑表达能力的数据</strong>。<br>　　为此我们起先选择了<a href="https://flowcanvas.paradoxnotion.com" target="_blank" rel="external">FlowCanvas</a>作为蓝图的解决方案，如果只是如此的话倒也没什么可说的。经过<a href="https://zhuanlan.zhihu.com/p/365472093" target="_blank" rel="external">技术性Demo</a>发布后，随着日益增长的需求，FlowCanvas凸显出其在性能方面的不足。主要体现在<strong>创建蓝图时的开销较大，且存在居高不下的GC Allow</strong>，再结合源码复杂度高难以修改、编辑器与运行时捆绑较强等问题，于是乎决定自己造了个轮子：<a href="https://github.com/MusouCrow/xNodeGraph" target="_blank" rel="external">xNodeGraph</a>  </p>
<p><img src="https://musoucrow.github.io/images/blueprint/0.png" alt="0"><br><img src="https://musoucrow.github.io/images/blueprint/1.png" alt="1">  </p>
<p>　　以上两图分别为FlowCanvas与xNodeGraph对同一业务的对比，可以看出后者除却支持中文、摆的好看了点，大体上是大差不差的。然而FlowCanvas作为<strong>商业销售</strong>的插件，在功能上是大而全的。而我们实际上用不到那么多功能，只保证满足核心需求即可：</p>
<ul>
<li>一款能够编辑节点、组织数据结构的编辑器</li>
<li>一款简洁高效、提供蓝图资源即可运作的运行时</li>
<li>提供便捷的API导出节点的方案</li>
</ul>
<p>　　如此，基于一款基于<a href="https://github.com/Siccity/xNode" target="_blank" rel="external">xNode</a>作为节点编辑器、自行编写运行时及相关工具链的解决方案便呼之欲出了。</p>
<h2 id="xNode-amp-Odin"><a href="#xNode-amp-Odin" class="headerlink" title="xNode &amp; Odin"></a>xNode &amp; Odin</h2><p><img src="https://user-images.githubusercontent.com/6402525/53689100-3821e680-3d4e-11e9-8440-e68bd802bfd9.png" alt="xNode">  </p>
<p>　　入上图所示，xNode是一款<strong>纯粹的节点编辑器</strong>解决方案，并且你可以在不修改源码的前提下高自由度地定制界面形式。且定义了节点数据最基本的抽象（Graph、Node），并将它们组织了起来。在Unity的层面来说就是一个个<a href="https://docs.unity.cn/cn/current/ScriptReference/ScriptableObject.html" target="_blank" rel="external">ScriptableObject</a>：  </p>
<p><img src="https://musoucrow.github.io/images/blueprint/2.png" alt="2">  </p>
<p>　　说到界面定制，就不得不提xNode的好搭档<a href="https://odininspector.com" target="_blank" rel="external">Odin</a>了。多数情况下无需编写<a href="https://docs.unity.cn/cn/current/Manual/GUIScriptingGuide.html" target="_blank" rel="external">IMGUI</a>是它最大的优势，但这并非我要引入的重点。关键在于Odin本身集成一些成熟的界面形式且xNode本身与之结合良好：  </p>
<p><img src="https://musoucrow.github.io/images/blueprint/3.png" alt="3">  </p>
<p>　　如上图的节点选择菜单便是使用Odin自带的<a href="https://odininspector.com/documentation/sirenix.odininspector.editor.genericselector-1" target="_blank" rel="external">GenericSelector</a>实现的。当然使用Odin与否在某些团队是个路线之争，这个便因地制宜了。</p>
<h2 id="数据流-or-代码流"><a href="#数据流-or-代码流" class="headerlink" title="数据流 or 代码流"></a>数据流 or 代码流</h2><p>　　说完界面部分，便到了运行时的首要抉择：<em>蓝图的最终运行形式是怎样的</em>？关于这块的方案业界有不少实现：有类似虚拟机运行节点触发逻辑的、有将蓝图转换为Lua代码的、有直接生成C#代码的（致天国的Bolt2）、甚至还有UE那般虚拟机与代码生成都提供的。<br>　　xNodeGraph最终选择了虚拟机方案，最核心的原因是蓝图的部分并非性能热点，用虚拟机也可以接受。且真正实现了一种<strong>具有逻辑表达的资源</strong>，若是代码生成还要多一层转换。<br>　　在决定了虚拟机方案后，我决定在xNode的节点数据结构上直接填充逻辑，这虽然不太优雅（运行时与xNode绑定了），但我不想整太多抽象转换之类的事了，反正xNode本身足够轻量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// LogNode.cs</div><div class="line"></div><div class="line">[CreateNodeMenuAttribute(&quot;调试输出&quot;)]</div><div class="line">public class LogNode : FlowNode &#123;</div><div class="line">    public override string Title &#123;</div><div class="line">        get &#123;</div><div class="line">            return &quot;调试输出&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public override string Note &#123;</div><div class="line">        get &#123;</div><div class="line">            return @&quot;打印输出结果&quot;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [Input(connectionType = ConnectionType.Override)]</div><div class="line">    public string value;</div><div class="line">    private BaseNode valueNode;</div><div class="line"></div><div class="line">    protected override void Init() &#123;</div><div class="line">        base.Init();</div><div class="line"></div><div class="line">        this.valueNode = this.GetPortNode(&quot;value&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 核心逻辑函数</div><div class="line">    public override object Run(Runtime runtime, int id) &#123;</div><div class="line">        var value = this.GetValue&lt;object&gt;(this.value, this.valueNode, runtime);</div><div class="line">        Debug.Log(value.ToString());</div><div class="line"></div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　以上是最简单的调试输出节点的代码实现，如此也能看出这套虚拟机运行时的本质便是调用一个个节点对象的<code>Run</code>函数以实现逻辑驱动。</p>
<h2 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h2><p>　　从上文代码也能看出节点运行逻辑时有着名为<code>runtime</code>的参数，那便是驱动蓝图运行的对象，我们可以在需要运作蓝图的地方创建runtime对象，还可传递一些变量进去供蓝图使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// GraphBehaviour.cs</div><div class="line"></div><div class="line">public class GraphBehaviour : MonoBehaviour &#123;</div><div class="line">    public BaseGraph graph;</div><div class="line">    public BlackBoard blackBoard;</div><div class="line"></div><div class="line">    private Runtime runtime;</div><div class="line"></div><div class="line">    protected void Awake() &#123;</div><div class="line">        this.runtime = new Runtime(this.graph, this.blackBoard);</div><div class="line">        this.runtime.SetVariable(&quot;gameObject&quot;, this.gameObject);</div><div class="line">        this.runtime.RunFunc(&quot;Awake&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如代码所示，这便是在一个<code>MonoBehavior</code>的基础上通过外部提供的蓝图资源创建运行时，并将自身的<code>gameObject</code>作为变量传递到了蓝图，最终调用蓝图内定义的<code>Awake</code>函数，将gameObject输出：  </p>
<p><img src="https://musoucrow.github.io/images/blueprint/4.png" alt="4">  </p>
<p>　　从上述例子也能大致看出运行时除了根据Func作为入口点按序调用节点之外，还包括变量的存储、以及避免提供数据的节点反复运算的缓存，对于需要重复进行新计算的结果的节点，选择复制多一份节点即可：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// Runtime.cs</div><div class="line"></div><div class="line">public class Runtime &#123;</div><div class="line">    private BaseGraph graph;</div><div class="line">    public Dictionary&lt;BaseNode, object&gt; cache;</div><div class="line">    public Dictionary&lt;string, object&gt; variable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　从上文节点可看出节点分为供应节点与流程节点，流程节点具有<code>In</code>和<code>Out</code>两个插槽，而供应节点则必定有返回值插槽（否则就没有意义了）。流程节点也可以有返回值插槽，而且由于缓存机制的原因不会导致重复调用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">// Runtime.cs</div><div class="line"></div><div class="line">public void RunNode(BaseNode node, int id) &#123;</div><div class="line">    // 判断当前流程是否已执行完毕</div><div class="line">    if (this.exitIdSet.Contains(id) || this.IsExit) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 调用节点的核心逻辑</div><div class="line">    node.Run(this, id);</div><div class="line"></div><div class="line">    // 获取Out插槽指向的In插槽节点</div><div class="line">    var next = node.NextNode;</div><div class="line"></div><div class="line">    if (next) &#123;</div><div class="line">        this.RunNode(next, id);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// BaseNode.cs</div><div class="line"></div><div class="line">public T GetValue&lt;T&gt;(T value, BaseNode node, Runtime runtime) &#123;</div><div class="line">    if (node) &#123;</div><div class="line">        // 判断缓存内是否有该节点的返回值</div><div class="line">        if (runtime.cache.ContainsKey(node)) &#123;</div><div class="line">            return (T)runtime.cache[node];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 调用核心逻辑获得数据，并在核心逻辑内将返回值数据缓存</div><div class="line">        return (T)node.Run(runtime, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 若是该值来源不通过节点则使用自身数据</div><div class="line">    return value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　从上述代码还可看出有着名为<code>id</code>的参数，且它与判断流程是否执行完毕有关。在同步执行下这本来应该不是问题，毕竟整个流程的执行过程都是阻塞的，不过一口气执行到结尾罢了，根本没有判断的必要。这显然是为了异步的情况而生的：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">// Runtime.cs</div><div class="line"></div><div class="line">private HashSet&lt;int&gt; exitIdSet;</div><div class="line"></div><div class="line">// 异步执行函数</div><div class="line">public async Task RunFuncWaitting(string func, int id=0, BaseGraph graph=null) &#123;</div><div class="line">    graph = graph == null ? this.graph : graph;</div><div class="line"></div><div class="line">    if (!graph.funcMap.ContainsKey(func)) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var f = graph.funcMap[func];</div><div class="line">    id = id &gt; 0 ? id : func.GetHashCode(); // 若未提供id，则使用func名称的哈希码</div><div class="line"></div><div class="line">    if (id &gt; 0 &amp;&amp; this.exitIdSet.Contains(id)) &#123;</div><div class="line">        this.exitIdSet.Remove(id);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 根据该流程是否为异步决定执行</div><div class="line">    if (f.async) &#123;</div><div class="line">        await this.RunNodeAsync(f.node, id);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        this.RunNode(f.node, id);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// RunNode的异步版</div><div class="line">public async Task RunNodeAsync(BaseNode node, int id=0) &#123;</div><div class="line">    if (this.exitIdSet.Contains(id) || this.IsExit) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 调用节点的逻辑函数异步版</div><div class="line">    await node.RunAsync(this, id);</div><div class="line"></div><div class="line">    var next = node.NextNode;</div><div class="line">    </div><div class="line">    if (next) &#123;</div><div class="line">        await this.RunNodeAsync(next, id);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 结束流程，将id登记到exitIdSet</div><div class="line">public void ExitFunc(int id) &#123;</div><div class="line">    if (id &gt; 0) &#123;</div><div class="line">        this.exitIdSet.Add(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 当然也提供无id的版本</div><div class="line">public void ExitFunc(string func) &#123;</div><div class="line">    this.ExitFunc(func.GetHashCode());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　从上述代码可见，运行时使用的异步方案是C#的<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/concepts/async/" target="_blank" rel="external">Async/Await</a>，这套方案最大的缺点在于<strong>外部无法很方便的直接中断异步</strong>的执行，于是采用了通过id作为标识符的方式、逐节点检查的方式进行流程中断控制。<br>　　由于异步传染的问题，每个节点都要实现对应的同步与异步两个版本函数（RunFunc/RunFuncAsync），每个Func节点会检查所属流程中是否含有异步节点（这件事会在编辑器端进行并保存为数据，也就是前文提到的<code>f.async</code>），理论上可以只保留异步版本也没关系，但实际测试下来异步的调用堆栈会比同步的要深以及略微的GC Allow，为了提升一点性能故选择了分离的做法。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// LogNode.cs</div><div class="line"></div><div class="line">// Log节点的异步版本</div><div class="line">public async override Task&lt;object&gt; RunAsync(Runtime runtime, int id) &#123;</div><div class="line">    var value = await this.GetValueAsync&lt;object&gt;(this.value, this.valueNode, runtime);</div><div class="line">    Debug.Log(value.ToString());</div><div class="line"></div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// BaseNode.cs</div><div class="line"></div><div class="line">// 获取数据的异步版</div><div class="line">public async Task&lt;T&gt; GetValueAsync&lt;T&gt;(T value, BaseNode node, Runtime runtime) &#123;</div><div class="line">    if (node) &#123;</div><div class="line">        if (runtime.cache.ContainsKey(node)) &#123;</div><div class="line">            return (T)runtime.cache[node];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var v = await node.RunAsync(runtime, 0);</div><div class="line"></div><div class="line">        return (T)v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="节点生成"><a href="#节点生成" class="headerlink" title="节点生成"></a>节点生成</h2><p>　　从上述LogNode可以看出复杂度还是有不少的，一些特殊节点倒也罢了，若是每个节点都如此手写那可真是太手工业了。于是乎节点代码生成势在必行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// Math.cs</div><div class="line"></div><div class="line">public static class Math &#123;</div><div class="line">    [Node(&quot;数学-向量相加&quot;, &quot;a + b&quot;, false)]</div><div class="line">    public static Vector3 AddVec(Vector3 a, Vector3 b) &#123;</div><div class="line">        return a + b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　节点生成需要对函数做标记，那么使用C#的Attribute特性便很自然了，通过提供函数的节点名称、说明、是否为流程节点自动生成类文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">// Generated/Graph/Game/Lib/Math/AddVecNode.cs</div><div class="line"></div><div class="line">namespace Generated.Graph.GGame.Lib.Math_ &#123;</div><div class="line">    [CreateNodeMenuAttribute(&quot;数学-向量相加&quot;)]</div><div class="line">    public class AddVecNode : BaseNode &#123;</div><div class="line">        public override string Title &#123;</div><div class="line">            get &#123;</div><div class="line">                return &quot;数学-向量相加&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public override string Note &#123;</div><div class="line">            get &#123;</div><div class="line">                return &quot;a + b&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public override bool Async &#123;</div><div class="line">            get &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        [Input(connectionType = ConnectionType.Override)]</div><div class="line">        public Game.Graph.Vec3 a;</div><div class="line">        private BaseNode aNode;</div><div class="line">        </div><div class="line">        [Input(connectionType = ConnectionType.Override)]</div><div class="line">        public Game.Graph.Vec3 b;</div><div class="line">        private BaseNode bNode;</div><div class="line">        </div><div class="line">        [Output]public Game.Graph.Vec3 ret;</div><div class="line"></div><div class="line">        protected override void Init() &#123;</div><div class="line">            base.Init();</div><div class="line">            </div><div class="line">            this.aNode = this.GetPortNode(&quot;a&quot;);</div><div class="line">            this.bNode = this.GetPortNode(&quot;b&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public override object Run(Runtime runtime, int id) &#123;</div><div class="line">            var a = this.GetValue&lt;Game.Graph.Vec3&gt;(this.a, this.aNode, runtime);</div><div class="line">            var b = this.GetValue&lt;Game.Graph.Vec3&gt;(this.b, this.bNode, runtime);</div><div class="line">            this.ret.value = Game.Lib.Math.AddVec(a.value, b.value);</div><div class="line"></div><div class="line">            return this.ret;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public async override Task&lt;object&gt; RunAsync(Runtime runtime, int id) &#123;</div><div class="line">            var a = await this.GetValueAsync&lt;Game.Graph.Vec3&gt;(this.a, this.aNode, runtime);</div><div class="line">            var b = await this.GetValueAsync&lt;Game.Graph.Vec3&gt;(this.b, this.bNode, runtime);</div><div class="line">            this.ret.value = Game.Lib.Math.AddVec(a.value, b.value);</div><div class="line">            await Task.CompletedTask;</div><div class="line"></div><div class="line">            return this.ret;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这生成的还挺人模狗样的，原理倒也不复杂，便是通过在菜单点击代码生成的按钮后，遍历所有标记了<code>NodeAttribute</code>的函数，通过反射API获取函数的各项属性（名称、返回值、参数、是否异步等），基于代码模板生成文件即可：  </p>
<p><img src="https://musoucrow.github.io/images/blueprint/5.png" alt="5">  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">// GenerateNodes.cs</div><div class="line"></div><div class="line">public static class GenerateNodes &#123;</div><div class="line">private const string CODE = @&quot;using System.Threading.Tasks;</div><div class="line">using Game.Graph;</div><div class="line"></div><div class="line">namespace Generated.Graph.&#123;Namespace&#125;_ &#123;</div><div class="line">    [CreateNodeMenuAttribute(&apos;&#123;Title&#125;&apos;)]</div><div class="line">    public class &#123;ClassName&#125; : &#123;ParentNode&#125; &#123;</div><div class="line">        public override string Title &#123;</div><div class="line">            get &#123;</div><div class="line">                return &apos;&#123;Title&#125;&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public override string Note &#123;</div><div class="line">            get &#123;</div><div class="line">                return &apos;&#123;Note&#125;&apos;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public override bool Async &#123;</div><div class="line">            get &#123;</div><div class="line">                return &#123;Async&#125;;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">&#123;Defines&#125;</div><div class="line"></div><div class="line">        protected override void Init() &#123;</div><div class="line">            base.Init();</div><div class="line">            </div><div class="line">&#123;Init&#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public override object Run(Runtime runtime, int id) &#123;</div><div class="line">&#123;Call&#125;</div><div class="line">            return &#123;ReturnRun&#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public async override Task&lt;object&gt; RunAsync(Runtime runtime, int id) &#123;</div><div class="line">&#123;CallAsync&#125;</div><div class="line">            return &#123;ReturnRun&#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">        &quot;;</div><div class="line"></div><div class="line">    // 类型转换映射</div><div class="line">    public static Dictionary&lt;Type, Type&gt; TypeMapping = new Dictionary&lt;Type, Type&gt;() &#123;</div><div class="line">        &#123;typeof(System.Single), typeof(Number)&#125;,</div><div class="line">        &#123;typeof(System.Int32), typeof(Number)&#125;,</div><div class="line">        &#123;typeof(System.Boolean), typeof(Bool)&#125;,</div><div class="line">        &#123;typeof(UnityEngine.Vector3), typeof(Vec3)&#125;,</div><div class="line">        &#123;typeof(UnityEngine.Quaternion), typeof(Quat)&#125;,</div><div class="line">        &#123;typeof(System.Object), typeof(Obj)&#125;,</div><div class="line">        &#123;typeof(UnityEngine.Color), typeof(Col)&#125;,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    [MenuItem(&quot;Tools/Generate Nodes&quot;)]</div><div class="line">    public static void Menu() &#123;</div><div class="line">        ClearFolder();</div><div class="line">        Generates();</div><div class="line">        EditorUtility.RequestScriptReload();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static void Generates() &#123;</div><div class="line">        var types = typeof(NodeAttribute).Assembly.GetExportedTypes();</div><div class="line"></div><div class="line">        foreach (var t in types) &#123;</div><div class="line">            var methods = t.GetMethods(BindingFlags.Static | BindingFlags.Public);</div><div class="line">            </div><div class="line">            foreach (var m in methods) &#123;</div><div class="line">                var attr = m.GetCustomAttribute&lt;NodeAttribute&gt;();</div><div class="line"></div><div class="line">                if (attr != null) &#123;</div><div class="line">                    GenerateNode(t, m, attr);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　当然注意某些变量类型要转换为对应的形式，这个下文会详解原因。</p>
<h2 id="变量与黑板"><a href="#变量与黑板" class="headerlink" title="变量与黑板"></a>变量与黑板</h2><p>　　从上文代码看得出，由于通用性问题，变量的传递需要通过转换为<code>object</code>类型进行传递。而值类型涉及与object的互转时会出现<strong>装箱拆箱</strong>成本，导致GC Allow，这个是需要避免的。所以专门为一系列用到的值类型实现了对应的包装：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// Variable.cs</div><div class="line"></div><div class="line">public class Variables&lt;T&gt; &#123;</div><div class="line">    public T value;</div><div class="line"></div><div class="line">    public override string ToString() &#123;</div><div class="line">        return this.value.ToString();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[Serializable]</div><div class="line">public class Obj : Variables&lt;object&gt; &#123;&#125;</div><div class="line"></div><div class="line">[Serializable]</div><div class="line">public class Number : Variables&lt;float&gt; &#123;&#125;</div><div class="line"></div><div class="line">[Serializable]</div><div class="line">public class Bool : Variables&lt;bool&gt; &#123;&#125;</div><div class="line"></div><div class="line">[Serializable]</div><div class="line">public class Vec3 : Variables&lt;Vector3&gt; &#123;&#125;</div><div class="line"></div><div class="line">[Serializable]</div><div class="line">public class Col : Variables&lt;Color&gt; &#123;&#125;</div><div class="line"></div><div class="line">[Serializable]</div><div class="line">public class Quat : Variables&lt;Quaternion&gt; &#123;&#125;</div></pre></td></tr></table></figure>
<p>　　这也是上文提到节点代码生成时要进行类型转换的原因，如此基本避免了运行时会产生GC Allow，相关数据都聚集在蓝图资源上，没有即时创建的情况（哪怕返回值也是提前创建好了）。唯一需要注意的是在外界传变量的时候要使用包装类型：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">this.runtime.SetVariable(&quot;count&quot;, new Number() &#123;value = 3&#125;);</div></pre></td></tr></table></figure>
<p>　　说完变量部分再来聊聊<strong>黑板(Blackboard)</strong>，这个词源于FlowCanvas，意思是变量配置池：  </p>
<p><img src="https://musoucrow.github.io/images/blueprint/6.png" alt="6">  </p>
<p>　　这玩意的实现非常粗暴，把诸类型堆砌一块就完事了：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">// Blackboard.cs</div><div class="line">[Serializable]</div><div class="line">public class Blackboard &#123;</div><div class="line">    [Serializable]</div><div class="line">    public class Unit &#123;</div><div class="line">        public string type;</div><div class="line">        public string name;</div><div class="line">        public Number number;</div><div class="line">        public Bool boolean;</div><div class="line">        public string text;</div><div class="line">        public Vec3 vec3;</div><div class="line">        public Col col;</div><div class="line">        public Object obj;</div><div class="line"></div><div class="line">        public object GetValue() &#123;</div><div class="line">            if (this.type == typeof(Number).ToString()) &#123;</div><div class="line">                return this.number;</div><div class="line">            &#125;</div><div class="line">            else if (this.type == typeof(Bool).ToString()) &#123;</div><div class="line">                return this.boolean;</div><div class="line">            &#125;</div><div class="line">            else if (this.type == typeof(string).ToString()) &#123;</div><div class="line">                return this.text;</div><div class="line">            &#125;</div><div class="line">            else if (this.type == typeof(Col).ToString()) &#123;</div><div class="line">                return this.col;</div><div class="line">            &#125;</div><div class="line">            else if (this.type == typeof(Vec3).ToString()) &#123;</div><div class="line">                return this.vec3;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            return this.obj;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Unit[] values;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　黑板可在运行时创建时传参，这个在上文也有体现，在运行时将会把黑板的数据批量赋值为变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// Runtime.cs</div><div class="line"></div><div class="line">public void SetBlackboard(Blackboard blackboard) &#123;</div><div class="line">    if (blackboard == null || blackboard.values == null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    foreach (var unit in blackboard.values) &#123;</div><div class="line">        var value = unit.GetValue();</div><div class="line">        this.SetVariable(unit.name, value);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　变量的用途可谓相当广泛，除了在蓝图层面的获取/设置之外，还可以在函数登记时标记哪些参数会自动调用对应变量，减少连线的复杂度：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Node(&quot;移动-锁定转向&quot;, &quot;锁定移动时的方向切换&quot;, true, &quot;body&quot;)]</div><div class="line">public static void LockTurn(Body body, bool enable) &#123;</div><div class="line">    body.lockTurn = enable;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如上代码的<code>body</code>参数便会自动获取名为body的变量，无需填写：  </p>
<p><img src="https://musoucrow.github.io/images/blueprint/7.png" alt="7">  </p>
<p>　　除此之外还可以在函数直接与变量交互，实现通过变量名达到索引的效果，减少连接复杂度：  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[Node(&quot;工具-创建定时器&quot;, &quot;创建定时器，使用名称登记，可选择填写时间结束后的功能名&quot;, true, &quot;rt&quot;)]</div><div class="line">public static void NewTimer(Runtime rt, string val, string func) &#123;</div><div class="line">    var timer = new Timer();</div><div class="line">    rt.variable[val] = timer;</div><div class="line"></div><div class="line">    if (func != &quot;&quot;) &#123;</div><div class="line">        timer.Func = () =&gt; &#123;</div><div class="line">            rt.RunFunc(func);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[Node(&quot;工具-启动定时器&quot;, &quot;启动定时器，填写时间与是否循环&quot;, true, &quot;rt&quot;)]</div><div class="line">public static void EnterTimer(Runtime rt, string val, float time, bool isLoop) &#123;</div><div class="line">    var timer = rt.variable[val] as Timer;</div><div class="line">    timer.Enter(time, null, isLoop);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　目前这套方案对于子蓝图（有明确的输入输出）的支持还不算完善，只支持正常的跨蓝图函数调用，但对于现状而言也算够用了。这就是造非普世的轮子的局限性，只满足自我的需求便足矣。故而这份实现仅供参考，不推荐直接使用（除非你的需求也完美贴合）。另外也感谢秃头鼓励师、烟雨迷离半世殇提供的相关参考与支持。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　经历两月的上海疫情风波，过完了一个毫无实
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Tools" scheme="https://musoucrow.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>2021年度总结</title>
    <link href="https://musoucrow.github.io/2021/12/31/summary_2021/"/>
    <id>https://musoucrow.github.io/2021/12/31/summary_2021/</id>
    <published>2021-12-31T12:39:33.000Z</published>
    <updated>2021-12-31T14:44:40.513Z</updated>
    
    <content type="html"><![CDATA[<p>　　2021年终于也领来了终结，又到了写年度总结的时候了。今年在文章产出这块挺拉的，也就写了<strong>3篇</strong>，其中一篇还是<a href="https://zhuanlan.zhihu.com/p/365472093" target="_blank" rel="external">游戏发布</a>。回首下来颇为汗颜——<strong>没想到这么少</strong>。<br>　　但实际上也有心态与见识的转变，随着工作的深入，我愈发觉得很多方案是需要时间的沉淀的——在开发当初可能觉得没问题的设计，随着后续落地迭代可能会完全变了样。这块在Gameplay会更明显：<strong>没有一定程度的业务去喂，很多方案只能说是做了而已</strong>。事实上哪怕目前文章写的东西也会因为后续情况而有所更改。所以哪怕今年整了不少活，也不太好意思写了。当然文章贵精不在多，本质便是为了分享。将东西沉淀一下后再发出，也是对质量的负责。<br>　　除此之外今年最大的收货便是《拉维瓦纳》第一版Demo的<a href="https://www.bilibili.com/video/BV1864y1S7TG" target="_blank" rel="external">发布</a>，该项目可以说是我进军3D游戏开发的钥匙，也是最大的文章素材（笑）。与美术朋友一同将3D游戏相关的点滴一步一步走了过来，也在年底迎来了新的伙伴。如今也开启了下一版Demo的计划，它将包含了该游戏想要表达的<strong>完整核心玩法与相关功能</strong>。希望明年能够如期完成吧。<br>　　同时也因为这个Demo，以及对接下来游戏行业的趋势判断，让我选择逃离了<a href="https://zhuanlan.zhihu.com/p/26947266" target="_blank" rel="external">科韵路</a>。在经过了一番面试酣战，迎来了职业发展的十字路口：<strong>Gameplay or Graphics</strong>。在综合各项情况考虑之后，选择了Graphics，选择了TA的道路。核心原因在于：个人的职业发展方向还是更偏全面，致力于<strong>能够独立做出游戏</strong>来。所以以补全自身的短板为佳。毕竟Gameplay对我而言开发游戏还算够用，并且通过项目可以持续实践精进。<br>　　实际做了TA之后，我便不再对图程与TA的区别有所疑惑了：<strong>两者的本质差别不在于具体做的事情，而是担当的职责</strong>。TA的职责在于作为技术与美术的桥梁、为美术提供技术支持、甚至是作为一名会技术的美术。图程的核心职责还是在于引擎与渲染管线的开发与维护及其相关工具链，<strong>两者在做的事情上可能会相同，但其出发点是不一样的</strong>。也因为做了TA后，让我彻底明白不会选择往图程的方向了。TA较之Gameplay，会有一种与项目隔层纱的感觉，而图程更是在此之外：有种不像是在做游戏，而是做引擎/管线了。说实话我并不太喜欢这种感觉，目前已是能接受的极限了。<br>　　来到漕河泾之后见识到了不少新的事物，能很明显感受到原神造成的影响，手游进入了军备竞赛的阶段。大家都需要赶紧跟上，做一些从未做过的事。无论是技术还是美术都有了新的要求，要说压力是肯定有的，虽然不是加班的压力（笑）。但与此同时也迎来了充分的进步，只能说好好迎接这个时代，做个弄潮儿吧。<br>　　这次说的较之前些年有些多了，确实是有不少感触。以上便是本人的2021年度总结了，且待明年的Blog吧。<br>　　无双草泥马<br>　　2021.12.31</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　2021年终于也领来了终结，又到了写年度总结的时候了。今年在文章产出这块挺拉的，也就写了&lt;strong&gt;3篇&lt;/strong&gt;，其中一篇还是&lt;a href=&quot;https://zhuanlan.zhihu.com/p/365472093&quot; target=&quot;_blank&quot; 
    
    </summary>
    
      <category term="Talk" scheme="https://musoucrow.github.io/categories/Talk/"/>
    
    
      <category term="Talk" scheme="https://musoucrow.github.io/tags/Talk/"/>
    
  </entry>
  
  <entry>
    <title>基于模型索引图生成植被与渲染的方案</title>
    <link href="https://musoucrow.github.io/2021/08/29/lbbn_grass/"/>
    <id>https://musoucrow.github.io/2021/08/29/lbbn_grass/</id>
    <published>2021-08-29T13:01:33.000Z</published>
    <updated>2021-08-29T18:16:38.250Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="https://musoucrow.github.io/images/lbbn_grass/0.png" alt="0"><br>　　看着这光秃秃草地，这不整点草上去像样么？之前采用的放置若干草堆装饰物点缀，效果实在捉急。于是这波决定采取GPU Instance在草地上都填满草，这可以说是PS4时代下半场以来的标配了：<br><img src="https://musoucrow.github.io/images/lbbn_grass/1.jpeg" alt="1"><br>　　若是按照传统工作流，也许就是什么刷草编辑器走起了。可惜我们并没有这个人力去做这种事情，且对于草的放置需求也很明确：<strong>在草地及其周边铺满，并加上一定的疏密变化即可</strong>。恰好我们的地形渲染也是<a href="https://zhuanlan.zhihu.com/p/336701783" target="_blank" rel="external">自制</a>的，对于草地的所在实际上是有索引贴图控制的：<br><img src="https://musoucrow.github.io/images/lbbn_grass/2.png" alt="2"><br>　　如上图所示，红色的部分即是草地，那么事情就变得明了了：只要能<strong>获取到贴图红色部分的坐标等信息</strong>，转换一番不就能给GPU Instance使用了？事不宜迟，这就开干！</p>
<h3 id="索引图转换"><a href="#索引图转换" class="headerlink" title="索引图转换"></a>索引图转换</h3><p>　　在正式开动之前还需要注意一个问题：不是给草地硬生生的填满了草就完事的，需要具有一定的疏密变化，且草地与其他地块之间的过渡处也要多少有点草，不然搞得跟防火带似得。由此可见，直接使用地形的索引贴图并非是个好的选择。于是我选择开发了转换工具：<br><img src="https://musoucrow.github.io/images/lbbn_grass/3.png" alt="3"><br>　　最后导出为黑白图：<br><img src="https://musoucrow.github.io/images/lbbn_grass/4.png" alt="4"><br>　　其功能大致为：  </p>
<ul>
<li>指定转换通道(<code>Channel</code>)</li>
<li>通道外扩（<code>Expand</code>）</li>
<li>通道值随机（<code>Opacity Rate</code>）</li>
<li>随机选择位置展开挖孔（<code>Dissipate</code>）</li>
</ul>
<p>　　如此较之地形索引图，便有了更多的变化了。</p>
<h3 id="三角面填充"><a href="#三角面填充" class="headerlink" title="三角面填充"></a>三角面填充</h3><p>　　有了转换后的索引图，接下来便是生成了。根据uv采样贴图，得到模型对应的位置在Shader里倒是相当简单。可在CPU端进行则需多费一番功夫了：我们知道模型是由多个三角面组成，每个三角面对应三个顶点，每个顶点有着自己的坐标、法线、UV等信息。但问题在于<strong>我们无法直接获得三角面内部的这些信息</strong>，而这在Shader里是经过光栅化后所以才能取得的。换言之，我们需要自己整个<strong>软光栅</strong>。<br>　　这软光栅听着玄乎，实际上在这里只是<strong>用一个单位值，在三角形内部步进，得到一系列的点</strong>罢了，详细算法可以参考市面上的<a href="https://blog.csdn.net/kakaxi2222/article/details/98853394" target="_blank" rel="external">三角形填充算法</a>，其原理并非本文内容，不作复述。<br>　　在获得了三角面内部的一个个点后，我们还需要得到它们的坐标、法线、UV等信息。这需要获取<strong>该点相对于三角面的三个顶点的距离权重</strong>，将相关信息插值得出。如何取得这个距离权重，这便又引申出另一个算法：<a href="https://blog.csdn.net/tkokof1/article/details/89367595" target="_blank" rel="external">三角形线性插值</a>。这其实便是实现软渲染的必备一环，这俩算法组合拳便能得出这个经典的RGB插值三角形了：<br><img src="https://musoucrow.github.io/images/lbbn_grass/5.png" alt="5">  </p>
<h3 id="多线程生成"><a href="#多线程生成" class="headerlink" title="多线程生成"></a>多线程生成</h3><p>　　有了三角面填充坐标点后，便可考虑生成的事了，首先要明确生成的策略：</p>
<ul>
<li>根据<code>填充单位值</code>对模型的三角面生成若干点，每个点都会记录相应信息（坐标、法线、UV、通道值），通道值根据UV采样贴图而得</li>
<li>另外会根据点的法线值检查所在角度是否合法（不希望墙壁之类的地方也生成），对于角度不合法的点会作废处理</li>
<li>根据合法点的通道值累加，除以一个<code>可配置的系数</code>，决定该模型能填充的草数量（草数量 = 总通道值 / 系数）</li>
<li>在总数量的前提下，随机挑选合法点种草，最后将草数据导出即可</li>
</ul>
<p>　　按照这套逻辑直接开干自然是没毛病，但性能这块实在捉急（模型的三角面太多、三角形填充以及贴图采样都耗时），然而这其实是个很适合并行化的作业（以三角面为单位），以及最后的草随机生成。那么便可引入<a href="https://docs.unity3d.com/Packages/com.unity.jobs@0.8/manual/index.html" target="_blank" rel="external">JobSystem</a>搞事了，整个工作流将会变成：</p>
<ul>
<li>配置模型及其转换后的索引贴图，配置相关生成参数（填充单位值、系数等）</li>
<li>收集点信息：创建<code>CollectJob</code>，将相关数据传入（三角面、顶点、UV集合等），以模型三角面数为作业量，对每个三角面填充点，筛选掉不合法的点，导出到统一容器中</li>
<li>遍历容器成员，将每个作业的成果导入到外部容器中</li>
<li>生成草信息：创建<code>GenerateJob</code>，将相关数据传入（点集合、模型矩阵、随机算子等），以草生成数为作业量，随机选择点进行草数据的生成</li>
<li>将草信息容器转换为数组导出</li>
</ul>
<p>　　需要注意的是，JobSystem只支持<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/builtin-types/unmanaged-types" target="_blank" rel="external">非托管类型</a>资源。也就是说我们不能直接将诸如<code>Mesh</code>、<code>Texture2D</code>之类的资源直接传入使用，得做点转换工作：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> job = <span class="keyword">new</span> CollectJob();</div><div class="line"></div><div class="line">job.vertices = <span class="keyword">new</span> NativeArray&lt;Vector3&gt;(mesh.vertices, allocator);</div><div class="line">job.uvs = <span class="keyword">new</span> NativeArray&lt;Vector2&gt;(mesh.uv, allocator);</div><div class="line">job.normals = <span class="keyword">new</span> NativeArray&lt;Vector3&gt;(mesh.normals, allocator);</div><div class="line">job.triangles = <span class="keyword">new</span> NativeArray&lt;<span class="keyword">int</span>&gt;(mesh.triangles, allocator);</div><div class="line">job.maps = <span class="keyword">new</span> NativeArray&lt;Color&gt;(texture.GetPixels(), allocator);</div><div class="line">job.texelSize = <span class="keyword">new</span> Vector2Int(texture.width, texture.height);</div></pre></td></tr></table></figure>
<p>　　是的，就连容器都得使用Unity专门开发的<a href="https://docs.unity3d.com/Packages/com.unity.collections@1.0/manual/index.html" target="_blank" rel="external">Native Container</a>，不可以用诸如数组、<code>List</code>之流。<br>　　另外对于CollectJob的点数据导出，经过我的一番实践，想要在<strong>多个作业同时导出到同一个容器，并且没有冲突</strong>的话，最佳方式是创建一个<code>NativeArray</code>对象，<strong>为每个作业开辟一定的空间，保证每个作业之间的写入区域是相互独立</strong>的：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> job = <span class="keyword">new</span> CollectJob();</div><div class="line"></div><div class="line"><span class="comment">// length代表作业数，TRIANGLE_MAX表示每个三角形的最大可填充数量</span></div><div class="line">job.points = <span class="keyword">new</span> NativeArray&lt;Point&gt;(length * TRIANGLE_MAX, allocator, NativeArrayOptions.UninitializedMemory);</div><div class="line">job.counts = <span class="keyword">new</span> NativeArray&lt;<span class="keyword">int</span>&gt;(length, allocator); <span class="comment">// counts记录每个作业的填充数</span></div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// i, j, k表示三角面对应的三个顶点索引</span></div><div class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Vector2(<span class="keyword">this</span>.vertices[i].x, <span class="keyword">this</span>.vertices[i].z);</div><div class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Vector2(<span class="keyword">this</span>.vertices[j].x, <span class="keyword">this</span>.vertices[j].z);</div><div class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> Vector2(<span class="keyword">this</span>.vertices[k].x, <span class="keyword">this</span>.vertices[k].z);</div><div class="line"></div><div class="line"><span class="comment">// 填充三角面</span></div><div class="line">NativeList&lt;Vector2&gt; vertices = Triangles.FillTriangle(p1, p2, p3, <span class="keyword">this</span>.precision);</div><div class="line"><span class="keyword">this</span>.counts[index] = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 遍历顶点，构建点数据</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; vertices.Length; n++) &#123;</div><div class="line">    <span class="comment">// 超出上限则取消</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.counts[index] &gt; TRIANGLE_MAX) &#123;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 获取相对三个顶点的距离权重</span></div><div class="line">    Vector3 rates = Triangles.GetTriangleRates(vertices[n], p1, p2, p3);</div><div class="line">    </div><div class="line">    <span class="comment">// 根据距离权重，获取点各项数据</span></div><div class="line">    Vector3 position = <span class="keyword">this</span>.vertices[i] * rates[<span class="number">0</span>] + <span class="keyword">this</span>.vertices[j] * rates[<span class="number">1</span>] + <span class="keyword">this</span>.vertices[k] * rates[<span class="number">2</span>];</div><div class="line">    Vector2 uv = <span class="keyword">this</span>.uvs[i] * rates.x + <span class="keyword">this</span>.uvs[j] * rates.y + <span class="keyword">this</span>.uvs[k] * rates.z;</div><div class="line">    Vector3 normal = <span class="keyword">this</span>.normals[i] * rates.x + <span class="keyword">this</span>.normals[j] * rates.y + <span class="keyword">this</span>.normals[k] * rates.z;</div><div class="line">    <span class="keyword">float</span> weight = <span class="keyword">this</span>.SampleTexture(uv);</div><div class="line">    <span class="keyword">float</span> angle = Vector3.Angle(Vector3.up, normal);</div><div class="line"></div><div class="line">    <span class="comment">// 拥有通道值且角度合法的点方可加入</span></div><div class="line">    <span class="keyword">if</span> (weight &gt; <span class="number">0</span> &amp;&amp; math.abs(angle) &lt; <span class="keyword">this</span>.angleMax) &#123;</div><div class="line">        <span class="comment">// 保证各作业的写入位置是独立的</span></div><div class="line">        <span class="keyword">var</span> point = <span class="keyword">new</span> Point() &#123;position = position, uv = uv, normal = normal, weight = weight + weight * weight&#125;;</div><div class="line">        <span class="keyword">this</span>.points[index * TRIANGLE_MAX + <span class="keyword">this</span>.counts[index]] = point;</div><div class="line">        <span class="keyword">this</span>.counts[index]++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如此最后便可将容器内的数据导出到外部容器了：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> List&lt;Point&gt; <span class="title">PackPoints</span>(<span class="params"><span class="keyword">in</span> NativeArray&lt;Point&gt; points, <span class="keyword">in</span> NativeArray&lt;<span class="keyword">int</span>&gt; counts</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> List&lt;Point&gt;();</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; counts.Length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; counts[i]; j++) &#123;</div><div class="line">            <span class="keyword">var</span> point = points[i * TRIANGLE_MAX + j];</div><div class="line">            list.Add(point);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　生成草数据部分的GenerateJob则更为简单，由于它的生成数量是一开始便定好的，所以构造作业量长度的容器即可：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> weight = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 取得总通道值</span></div><div class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> point <span class="keyword">in</span> points) &#123;</div><div class="line">    weight += point.weight;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 获取生成数量</span></div><div class="line"><span class="keyword">int</span> count = (<span class="keyword">int</span>)(weight / <span class="keyword">group</span>.opacity);</div><div class="line">count = count &gt; points.Count ? points.Count : count;</div><div class="line"></div><div class="line"><span class="keyword">var</span> job = <span class="keyword">new</span> GenerateJob();</div><div class="line">job.units = <span class="keyword">new</span> NativeArray&lt;Unit&gt;(count, allocator);</div><div class="line">job.points = points.ToNativeArray(allocator);</div><div class="line"></div><div class="line"><span class="comment">// 草坐标与模型矩阵有关</span></div><div class="line">job.matrix = <span class="keyword">group</span>.gameObject.transform.localToWorldMatrix;</div><div class="line"></div><div class="line"><span class="comment">// Job内使用的随机数需要来自Unity.Mathematics</span></div><div class="line">job.random = <span class="keyword">new</span> Random();</div><div class="line">job.random.InitState();</div><div class="line"></div><div class="line"><span class="keyword">var</span> handle = job.Schedule(count, <span class="number">1</span>);</div><div class="line">handle.Complete();</div></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="keyword">int</span> index</span>) </span>&#123;</div><div class="line">    <span class="comment">// 从points随机选择生成unit</span></div><div class="line">    <span class="keyword">int</span> idx = <span class="keyword">this</span>.random.NextInt(<span class="keyword">this</span>.points.Length);</div><div class="line">    Point point = <span class="keyword">this</span>.points[idx];</div><div class="line">    <span class="keyword">this</span>.units[index] = <span class="keyword">this</span>.NewUnit(point);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Unit <span class="title">NewUnit</span>(<span class="params"><span class="keyword">in</span> Point point</span>) </span>&#123;</div><div class="line">    <span class="comment">// 构建矩阵，与模型矩阵结合，获得正确的坐标点</span></div><div class="line">    <span class="keyword">var</span> matrix = <span class="keyword">new</span> Matrix4x4();</div><div class="line">    matrix.SetTRS(point.position, Quaternion.identity, Vector3.one);</div><div class="line">    matrix = <span class="keyword">this</span>.matrix * matrix;</div><div class="line"></div><div class="line">    <span class="comment">// 为了节省内存，草的数据实际上只有坐标，其余部分在Shader随机生成</span></div><div class="line">    <span class="keyword">var</span> unit = <span class="keyword">new</span> Unit() &#123;</div><div class="line">        position = <span class="keyword">new</span> Vector3(matrix.m03, matrix.m13, matrix.m23)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> unit;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="渲染支持"><a href="#渲染支持" class="headerlink" title="渲染支持"></a>渲染支持</h3><p>　　有了数据之后，接下来便是将它们渲染出来了：我们会使用一个<code>MonoBehavior</code>，在<code>LateUpdate</code>时调用<a href="https://docs.unity3d.com/cn/current/ScriptReference/Graphics.DrawMeshInstancedIndirect.html" target="_blank" rel="external">Graphics.DrawMeshInstancedIndirect</a>进行草的批量绘制。为此需要两个关键的<a href="https://docs.unity3d.com/cn/current/ScriptReference/ComputeBuffer.html" target="_blank" rel="external">Compute Buffer</a>：<code>argsBuffer</code>与<code>unitBuffer</code>，一者作为绘制API的参数，提供绘制模型的相关信息以及数量。另者即是草的数据集封装，传入材质属性供Shader使用：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">[ExecuteAlways]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GrassSolution</span> : <span class="title">MonoBehaviour</span> &#123;</div><div class="line">    [Serializable]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">struct</span> Unit &#123;</div><div class="line">        <span class="keyword">public</span> Vector3 position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Mesh mesh;</div><div class="line">    <span class="keyword">public</span> Material material;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ComputeBuffer argsBuffer;</div><div class="line">    <span class="keyword">private</span> ComputeBuffer unitBuffer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitUnits</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// ComputeBuffer的核心数据属于非托管资源，需要手动释放</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.unitBuffer != <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.unitBuffer.Release();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 将草数据集传入</span></div><div class="line">        <span class="keyword">this</span>.unitBuffer = <span class="keyword">new</span> ComputeBuffer(<span class="keyword">this</span>.units.Length, <span class="keyword">sizeof</span>(Unit));</div><div class="line">        <span class="keyword">this</span>.unitBuffer.SetData(<span class="keyword">this</span>.units);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitArgs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 构建所需参数</span></div><div class="line">        <span class="keyword">var</span> args = <span class="keyword">new</span> <span class="keyword">uint</span>[] &#123;</div><div class="line">            <span class="keyword">this</span>.mesh.GetIndexCount(<span class="number">0</span>),</div><div class="line">            (<span class="keyword">uint</span>)<span class="keyword">this</span>.units.Length,</div><div class="line">            <span class="keyword">this</span>.mesh.GetIndexStart(<span class="number">0</span>),</div><div class="line">            <span class="keyword">this</span>.mesh.GetBaseVertex(<span class="number">0</span>),</div><div class="line">            <span class="number">0</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.argsBuffer != <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.argsBuffer.Release();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 传入参数信息</span></div><div class="line">        <span class="keyword">this</span>.argsBuffer = <span class="keyword">new</span> ComputeBuffer(<span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="keyword">uint</span>) * <span class="number">5</span>, ComputeBufferType.IndirectArguments);</div><div class="line">        <span class="keyword">this</span>.argsBuffer.SetData(args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 初始化ComputeBuffer</span></div><div class="line">        <span class="keyword">this</span>.InitUnits();</div><div class="line">        <span class="keyword">this</span>.InitArgs();</div><div class="line"></div><div class="line">        <span class="comment">// 将unitBuffer数据传入Shader</span></div><div class="line">        <span class="keyword">this</span>.material.SetBuffer(<span class="string">"_Units"</span>, <span class="keyword">this</span>.unitBuffer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">LateUpdate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 指定模型与材质，每帧绘制</span></div><div class="line">        Graphics.DrawMeshInstancedIndirect(<span class="keyword">this</span>.mesh, <span class="number">0</span>, <span class="keyword">this</span>.material, <span class="keyword">this</span>.bounds, <span class="keyword">this</span>.argsBuffer);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　到了Shader层面，还需要对接草的坐标信息，才能渲染到正确的位置：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定义草的数据结构</span></div><div class="line"><span class="keyword">struct</span> Unit</div><div class="line">&#123;</div><div class="line">    float3 position;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// ComputeBuffer容器，对应this.unitBuffer</span></div><div class="line">StructuredBuffer&lt;Unit&gt; _Units;</div><div class="line"></div><div class="line"><span class="function">Varyings <span class="title">Vert</span><span class="params">(Attributes input, uint instanceID : SV_InstanceID)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 根据instanceID获取对应的草数据</span></div><div class="line">    Unit unit = _Units[instanceID];</div><div class="line">    <span class="comment">// 赋予坐标</span></div><div class="line">    input.positionOS.xyz += unit.position;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="视矩剔除"><a href="#视矩剔除" class="headerlink" title="视矩剔除"></a>视矩剔除</h3><p>　　如此一来草的渲染自然不是问题了：<br><img src="https://musoucrow.github.io/images/lbbn_grass/6.png" alt="6"><br>　　但可以看到，整个场景一眼望去，草的数量还是不少的。并且在视野内能看到的充其量就一个地块而已，为了保证性能，还需要引入视矩剔除。<br>　　本方案采取的视矩剔除方案相当简单：在空间中根据<strong>草所在之处划分出一个个格子，每个格子记录所包含草的索引集以及格子的中心坐标</strong>，就像这样：<br><img src="https://musoucrow.github.io/images/lbbn_grass/7.png" alt="7"><br>　　格子的生成可在先前的草数据生成后再追加一步：遍历草坐标，将其划分到对应的格子对象中，将格子数据也一并导出即可。但仅此而已还不够完美：这样需要让格子对象存储所辖草的索引集，数据量较大。所以我们可以先将草数据分类到不同的格子容器中，最后将格子容器的草数据一一重写回草的容器中，以此确保<strong>每个格子所辖的草索引是连续的</strong>，如此只需要为每个格子记录<strong>索引起始值以及数量</strong>即可：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> List&lt;Cell&gt; <span class="title">GenerateCells</span>(<span class="params">List&lt;Unit&gt; units</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> unitsMap = <span class="keyword">new</span> Dictionary&lt;Vector3Int, List&lt;Unit&gt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">// 将每根草划分到对应的格子容器中</span></div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> unit <span class="keyword">in</span> units) &#123;</div><div class="line">        <span class="keyword">var</span> pos = unit.position;</div><div class="line">        <span class="keyword">var</span> cellPos = ToCellPos(pos);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!unitsMap.ContainsKey(cellPos)) &#123;</div><div class="line">            unitsMap.Add(cellPos, <span class="keyword">new</span> List&lt;Unit&gt;());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        unitsMap[cellPos].Add(unit);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 清空草容器</span></div><div class="line">    units.Clear();</div><div class="line"></div><div class="line">    <span class="comment">// 根据格子容器将草重新写回草容器中</span></div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> unitsMap) &#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> unit <span class="keyword">in</span> iter.Value) &#123;</div><div class="line">            units.Add(unit);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 构建格子数据集</span></div><div class="line">    <span class="keyword">var</span> cells = <span class="keyword">new</span> List&lt;Cell&gt;();</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 构建格子数据，记录格子的草索引起始、数量、格子中心坐标</span></div><div class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> iter <span class="keyword">in</span> unitsMap) &#123;</div><div class="line">        <span class="keyword">var</span> cell = <span class="keyword">new</span> Cell() &#123;</div><div class="line">            center = ToCellCenter(iter.Key),</div><div class="line">            begin = count,</div><div class="line">            count = iter.Value.Count</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        cells.Add(cell);</div><div class="line">        count += iter.Value.Count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cells;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　有了数据之后，接下来便是剔除了：  </p>
<ul>
<li>构建格子的ComputeBuffer（<code>cellBuffer</code>），以及构建一个存储草的可视索引集ComputeBuffer(<code>visibleIdBuffer</code>)</li>
<li>编写ComputeShader，以格子数量为作业量，判断每个格子是否在摄像机视矩体内，若存在则将格子所辖的草索引传入visibleIdBuffer中</li>
<li>Compute Shader运行完毕后，将visibleIdBuffer的成员数通过<a href="https://docs.unity3d.com/cn/current/ScriptReference/ComputeBuffer.CopyCount.html" target="_blank" rel="external">ComputeBuffer.CopyCount</a>传入argsBuffer的第二项（用于控制渲染数量）</li>
<li>最后在Shader通过<code>visibleIdBuffer[instanceID]</code>获取草的索引值，由此间接取得草的数据</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">[Serializable]</div><div class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Cell &#123;</div><div class="line">    <span class="keyword">public</span> Vector3 center;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> begin;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 构建cellBuffer</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitCells</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cellBuffer != <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.cellBuffer.Release();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.cellBuffer = <span class="keyword">new</span> ComputeBuffer(<span class="keyword">this</span>.cells.Length, <span class="keyword">sizeof</span>(Cell));</div><div class="line">    <span class="keyword">this</span>.cellBuffer.SetData(<span class="keyword">this</span>.cells);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 构建visibleIdBuffer</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitVisbleId</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.visibleIdBuffer != <span class="literal">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.visibleIdBuffer.Release();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 它的最大长度为草数据的长度，ComputeBufferType.Append表明它是个可填充容器</span></div><div class="line">    <span class="keyword">this</span>.visibleIdBuffer = <span class="keyword">new</span> ComputeBuffer(<span class="keyword">this</span>.units.Length, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), ComputeBufferType.Append);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Cull</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Compute Shader一次并行32组</span></div><div class="line">    <span class="keyword">int</span> patch = Mathf.CeilToInt(<span class="keyword">this</span>.cells.Length / <span class="number">32.0</span>f);</div><div class="line"></div><div class="line">    <span class="comment">// 获得当前视图下的投影矩阵</span></div><div class="line">    <span class="keyword">var</span> camera = Camera.main;</div><div class="line">    <span class="keyword">var</span> vp = camera.projectionMatrix * camera.worldToCameraMatrix;</div><div class="line"></div><div class="line">    <span class="comment">// 清空容器</span></div><div class="line">    <span class="keyword">this</span>.visibleIdBuffer.SetCounterValue(<span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 传递所需数据，开始作业</span></div><div class="line">    <span class="keyword">this</span>.shader.SetBuffer(id, <span class="string">"_VisibleIds"</span>, <span class="keyword">this</span>.visibleIdBuffer);</div><div class="line">    <span class="keyword">this</span>.shader.SetBuffer(id, <span class="string">"_Cells"</span>, <span class="keyword">this</span>.cellBuffer);</div><div class="line">    <span class="keyword">this</span>.shader.SetInt(<span class="string">"_Count"</span>, <span class="keyword">this</span>.cells.Length);</div><div class="line">    <span class="keyword">this</span>.shader.SetMatrix(<span class="string">"_VPMatrix"</span>, vp);</div><div class="line">    <span class="keyword">this</span>.shader.Dispatch(id, patch, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 将visibleIdBuffer的数量传递给argsBuffer，决定渲染数量</span></div><div class="line">    ComputeBuffer.CopyCount(<span class="keyword">this</span>.visibleIdBuffer, <span class="keyword">this</span>.argsBuffer, <span class="keyword">sizeof</span>(<span class="keyword">uint</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Compute Shader</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> kernel CSMain</span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> Cell</div><div class="line">&#123;</div><div class="line">    float3 center;</div><div class="line">    <span class="keyword">int</span> begin;</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">StructuredBuffer&lt;Cell&gt; _Cells;</div><div class="line">AppendStructuredBuffer&lt;<span class="keyword">int</span>&gt; _VisibleIds;</div><div class="line">float4x4 _VPMatrix;</div><div class="line"><span class="keyword">int</span> _Count;</div><div class="line"></div><div class="line">[numthreads(<span class="number">32</span>, <span class="number">1</span>, <span class="number">1</span>)]</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CSMain</span> <span class="params">(uint3 groupID : SV_GroupID, <span class="keyword">int</span> index : SV_GroupIndex)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取当前作业对应的格子id</span></div><div class="line">    <span class="keyword">int</span> n = groupID.x * <span class="number">32</span> + index;</div><div class="line"></div><div class="line">    <span class="comment">// 确保处理的格子是在范围内的</span></div><div class="line">    <span class="keyword">if</span> (n &lt; _Count)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 获取格子中心坐标</span></div><div class="line">        float3 posWS = _Cells[n].center;</div><div class="line"></div><div class="line">        <span class="comment">// 将格子坐标转换到裁剪空间</span></div><div class="line">        float4 absPosCS = <span class="built_in">abs</span>(mul(_VPMatrix, float4(posWS, <span class="number">1.0</span>)));</div><div class="line">        </div><div class="line">        <span class="keyword">float</span> range = absPosCS.w;</div><div class="line">        </div><div class="line">        <span class="comment">// 判断格子坐标是否在视矩体内</span></div><div class="line">        <span class="comment">// 由于格子比较大，肯定会有一部分元素在视矩体之外，所以要扩大点范围</span></div><div class="line">        <span class="keyword">if</span> (absPosCS.x &lt;= range * <span class="number">1.5</span> &amp;&amp; absPosCS.y &lt;= range * <span class="number">1.6</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="comment">// 将格子所辖的草索引加入容器中</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _Cells[n].count; i++) &#123;</div><div class="line">                _VisibleIds.Append(_Cells[n].begin + i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Shader</span></div><div class="line">StructuredBuffer&lt;Unit&gt; _Units;</div><div class="line">StructuredBuffer&lt;<span class="keyword">int</span>&gt; _VisibleIds;</div><div class="line"></div><div class="line"><span class="function">Varyings <span class="title">Vert</span><span class="params">(Attributes input, uint instanceID : SV_InstanceID)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 间接获得草数据</span></div><div class="line">    <span class="keyword">int</span> idx = _VisibleIds[instanceID];</div><div class="line">    Unit unit = _Units[idx];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如此，将Cull函数放到适当的场合运行，草的剔除便算完成了：<br><img src="https://musoucrow.github.io/images/lbbn_grass/8.gif" alt="8">  </p>
<h3 id="渲染效果"><a href="#渲染效果" class="headerlink" title="渲染效果"></a>渲染效果</h3><p>　　终于可以聊点开心的东西了，毕竟渲染效果这种东西是最直观的了，直接上效果：<br><img src="https://musoucrow.github.io/images/lbbn_grass/9.png" alt="9"><br>　　本方案使用的草属于面片草，它通过一个面片模型，选择若干草的图片，使用AlphaClip剔除透明度进行渲染：<br><img src="https://musoucrow.github.io/images/lbbn_grass/10.png" alt="10"><br>　　之所以使用AlphaClip而非正统的2D半透明AlphaBlend，是因为在<strong>不写入深度的前提下，Instance渲染的次序需要自己把控</strong>。然而在使用了剔除之后还要兼顾排序属实有点麻烦，并且哪怕如此也无法达到像素级别的排序：<br><img src="https://musoucrow.github.io/images/lbbn_grass/11.png" alt="11"><br>　　那么只好AlphaClip顶硬上了，这样的缺点是边缘会出现狗牙，连MSAA都救不了：<br><img src="https://musoucrow.github.io/images/lbbn_grass/12.png" alt="12"><br>　　当然狗牙也就狗牙了，游戏视角下看起来凑合的话就还好，在不考虑太过风骚的操作下，可通过<strong>提升贴图精度以及提高渲染分辨率</strong>缓解，就这样吧。<br>　　渲染的本身部分首当其冲的便是<strong>随机的缩放与旋转，以及颜色</strong>了。为了节省内存，在CPU端提供的数据只有坐标，其余部分则在Shader内通过随机而成：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> _ColorMax; <span class="comment">// 颜色上限</span></div><div class="line">float2 _ScaleW; <span class="comment">// 缩放宽度的范围</span></div><div class="line">float2 _ScaleH; <span class="comment">// 缩放高度的范围</span></div><div class="line">float2 _AngleY; <span class="comment">// 旋转Y轴的范围</span></div><div class="line">float2 _AngleXZ; <span class="comment">// 旋转XZ轴的范围</span></div><div class="line"></div><div class="line">float4 _Colors[<span class="number">5</span>]; <span class="comment">// 颜色数组</span></div><div class="line"></div><div class="line"><span class="comment">// 构建矩阵</span></div><div class="line"><span class="function">float4x4 <span class="title">MakeMatrix</span><span class="params">(Unit unit, uint instanceID)</span> </span>&#123;</div><div class="line">    float3 pos = unit.position;</div><div class="line"></div><div class="line">    <span class="comment">// 随机取值</span></div><div class="line">    <span class="keyword">float</span> scaleW = lerp(_ScaleW.x, _ScaleW.y, Random(float2(pos.x, pos.y)));</div><div class="line">    <span class="keyword">float</span> scaleH = lerp(_ScaleH.x, _ScaleH.y, Random(float2(pos.y, pos.z)));</div><div class="line">    <span class="keyword">float</span> angleY = lerp(_AngleY.x, _AngleY.y, Random(float2(instanceID, pos.z)));</div><div class="line">    <span class="keyword">float</span> angleXZ = lerp(_AngleXZ.x, _AngleXZ.y, Random(float2(pos.x, instanceID)));</div><div class="line"></div><div class="line">    <span class="comment">// 确定缩放与旋转，生成矩阵</span></div><div class="line">    float3 scale = float3(scaleW, scaleH, scaleW);</div><div class="line">    float3 angle = float3(angleXZ, angleY, angleXZ);</div><div class="line">    float4x4 mat = SetTRS(pos, scale, radians(angle));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> mat;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 随机颜色</span></div><div class="line"><span class="function">float4 <span class="title">GetColor</span><span class="params">(Unit unit, uint instanceID)</span> </span>&#123;</div><div class="line">    float3 pos = unit.position;</div><div class="line">    <span class="keyword">float</span> rate = Random(float2(instanceID, pos.y));</div><div class="line">    <span class="keyword">int</span> index = lerp(<span class="number">0</span>, _ColorMax - <span class="number">1</span>, rate);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> _Colors[index];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">Varyings <span class="title">Vert</span><span class="params">(Attributes input, uint instanceID : SV_InstanceID)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> idx = _VisibleIds[instanceID];</div><div class="line">    Unit unit = _Units[idx];</div><div class="line"></div><div class="line">    float4x4 mat = MakeMatrix(unit, idx);</div><div class="line">    </div><div class="line">    <span class="comment">// 实装草的坐标、缩放、旋转、颜色</span></div><div class="line">    input.positionOS.xyz = mul(mat, input.positionOS).xyz;</div><div class="line">    output.color = GetColor(unit, idx);</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　贴图的随机化也是以此类推，贴图使用<a href="https://docs.unity3d.com/cn/current/Manual/class-Texture2DArray.html" target="_blank" rel="external">TextureArray</a>，随机取得一个贴图索引后采样相应贴图。对于随机的算法选择参考<a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@7.1/manual/Gradient-Noise-Node.html?q=Noise" target="_blank" rel="external">各类噪声算法</a>即可。<br>　　在做完以上工作后也只有初步的样子而已，仍需进一步加料：<br><img src="https://musoucrow.github.io/images/lbbn_grass/13.png" alt="13"><br>　　目前的效果还是太平了，我们给它来加个渐变：  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 赋予矩阵前的y坐标</span></div><div class="line"><span class="keyword">float</span> py = input.positionOS.y;</div><div class="line"></div><div class="line"><span class="keyword">float</span> gradient = lerp(_Gradient.x, _Gradient.y, py);</div><div class="line">output.color.rgb = output.color.rgb * gradient;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_grass/14.png" alt="14"><br>　　这样多少有点意思了，但颜色给人总体到处都是差不多的，缺乏总体变化感，也许在其他做法里会考虑加入一张全局的颜色贴图，但我们做了<a href="https://zhuanlan.zhihu.com/p/390648011" target="_blank" rel="external">全局光照</a>，不如……？  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> gradient = lerp(_Gradient.x, _Gradient.y, py);</div><div class="line"></div><div class="line"><span class="comment">// 采样GI底部颜色</span></div><div class="line">float3 gi = GIBottom(vertexInput.positionWS);</div><div class="line"></div><div class="line"><span class="comment">// 控制GI颜色比例</span></div><div class="line">output.color = float4(lerp(output.color.rgb, gi, <span class="number">0.25</span>) * gradient, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_grass/15.png" alt="15"><br>　　不错不错，而且出于草的位置关系以及性能考虑，我们只需要采样AmbientCube的底部方向的颜色即可。可谓一次有机的结合了。  </p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　本方案实际仍有不少细节，限于篇幅，只能写到这里了。这应是我有史以来写的最长的一篇文章了吧，但实在是不想拆成多篇来写了。本文限于篇幅，诸多细节未能列出，纯当外行看个热闹，内行看点门道吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://muso
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>基于IrradianceVolume魔改的全局光照方案</title>
    <link href="https://musoucrow.github.io/2021/07/17/irradiance_volume/"/>
    <id>https://musoucrow.github.io/2021/07/17/irradiance_volume/</id>
    <published>2021-07-17T10:54:25.000Z</published>
    <updated>2021-07-17T10:54:19.422Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　自<a href="https://www.bilibili.com/video/BV1864y1S7TG" target="_blank" rel="external">《拉维瓦纳》技术性Demo演示</a>公布后，得到不少反馈与总结。其中内部达成共识的一处便是目前的<strong>场景效果仍需提升</strong>，于是便围绕此展开了新的计划。其中明显的一点便是场景的<strong>着色表现太过平滑</strong>，近乎为Unlit。于是需要为此增添不少变化，其中一项措施便是<strong>全局光照</strong>。<br>　　而采用Unity自带的全局光照方案：<a href="https://docs.unity.cn/cn/2020.3/Manual/Lightmappers.html" target="_blank" rel="external">Lightmap</a>时则遇到不少问题与效果的不尽人意：</p>
<ul>
<li><a href="https://docs.unity.cn/cn/2020.3/Manual/ProgressiveLightmapper-UVOverlap.html" target="_blank" rel="external">UV overlap</a>问题</li>
<li><a href="https://docs.unity.cn/cn/2020.3/Manual/GPUProgressiveLightmapper.html" target="_blank" rel="external">GPU烘焙</a>时功能不齐全（如不支持TextureArray），而CPU烘焙则速度不佳</li>
<li>对于动态物体需使用<a href="https://docs.unity.cn/cn/2020.3/Manual/LightProbes.html" target="_blank" rel="external">Light Probes</a>方案，效果不够一体化</li>
<li>对于场景内会动、会破坏的部分的支持度不佳</li>
<li>烘焙器不开源，效果的可定制性不强</li>
</ul>
<p>　　基于以上原因，最终选择考虑其他的全局光照方案。以安柏霖的<a href="https://zhuanlan.zhihu.com/p/23410011" target="_blank" rel="external">游戏中的Irradiance Volume</a>为引，得出了一种<strong>自我魔改</strong>的全局光照方案，<strong>并不代表真正的Irradiance Volume方案</strong>，仅供参考，<a href="https://github.com/MusouCrow/IrradianceVolume" target="_blank" rel="external">附上工程链接</a>。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>　　根据安柏霖一文大致可以看出，Irradiance Volume是<em>一种将场景划分为多个区域，每个区域记录关键信息，最终应用于区域内的对象</em>的一种全局光照方案。这听起来很像Light Probes，只不过Light Probes是逐对象的（整个模型着色），而Irradiance Volume能做到逐顶点/片元。<br>　　经过一番研究，参考了<a href="https://www.semanticscholar.org/paper/The-Irradiance-Volume-Greger-Shirley/3ac84672d6b0cef2b765ff369da1147a9bd4d901?p2df" target="_blank" rel="external">论文</a>、<a href="https://www.valvesoftware.com/publications/2006/SIGGRAPH06_Course_ShadingInValvesSourceEngine.pdf" target="_blank" rel="external">半条命2</a>、<a href="http://developer.amd.com/wordpress/media/2012/10/Tatarchuk_Irradiance_Volumes.pdf" target="_blank" rel="external">AMD</a>、<a href="https://link.zhihu.com/?target=http%3A//advances.realtimerendering.com/s2016/Volumetric%2520Global%2520Illumination%2520at%2520Treyarch.pptx" target="_blank" rel="external">COD</a>等诸多资料后，得出一点：这Irradiance Volume如同ECS一般，<strong>只有大致的概念，并无标准的实现</strong>。网上亦无太多相关开源实现，那么只好按照自己的理解去发挥了。<br>　　其核心概念在上文也已说明，现落地为实际方案：</p>
<ul>
<li>按固定大小的格子划分场景</li>
<li>使用<a href="https://docs.unity.cn/2020.3/Documentation/ScriptReference/ReflectionProbe.RenderProbe.html" target="_blank" rel="external">ReflectionProbe</a>拍摄每个格子下的<a href="https://docs.unity.cn/2020.3/Documentation/Manual/class-Cubemap.html" target="_blank" rel="external">CubeMap</a>，提取6个面的代表色</li>
<li>将每个面的代表色按位置存储到<a href="https://docs.unity.cn/2020.3/Documentation/Manual/class-Texture3D.html" target="_blank" rel="external">3D纹理</a>，由于有6个面，所以需要6张</li>
<li>具体模型着色时，根据顶点坐标找到所属格子，根据法线方向采样对应面的颜色进行混合，最终着色</li>
</ul>
<h3 id="构建格子"><a href="#构建格子" class="headerlink" title="构建格子"></a>构建格子</h3><p>　　首先是按固定大小的格子划分场景，为完成这一点，我们构造一个专门的MonoBehavior <code>ProbeMgr</code>，并构造格子的专属数据结构 <code>ProbeData</code>：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[Serializable]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProbeData</span> &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> index; <span class="comment">// 格子在容器中的索引</span></div><div class="line">    <span class="keyword">public</span> Vector3Int position; <span class="comment">// 格子位置</span></div><div class="line">    <span class="keyword">public</span> Color[] colors; <span class="comment">// 格子内六个面的代表色</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　通过在ProbeMgr定义格子在场景的数量（XYZ）、格子的大小、设置存储格子的容器，最后加上预览：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">[ExecuteAlways]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProbeMgr</span> : <span class="title">MonoBehaviour</span> &#123;</div><div class="line">    <span class="comment">// 六个面的方向向量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Vector3[] Directions = <span class="keyword">new</span> Vector3[] &#123;</div><div class="line">        <span class="keyword">new</span> Vector3(<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>),</div><div class="line">        <span class="keyword">new</span> Vector3(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>),</div><div class="line">        <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>),</div><div class="line">        <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>),</div><div class="line">        <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>),</div><div class="line">        <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Vector3Int size; <span class="comment">// 格子在场景的数量</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> interval; <span class="comment">// 格子的大小</span></div><div class="line">    <span class="keyword">public</span> ProbeData[] datas; <span class="comment">// 存储格子的容器</span></div><div class="line"></div><div class="line">    <span class="comment">// 预览</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">OnDrawGizmosSelected</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Gizmos.color = Color.black;</div><div class="line">        <span class="keyword">var</span> size = <span class="keyword">new</span> Vector3(<span class="keyword">this</span>.interval, <span class="keyword">this</span>.interval, <span class="keyword">this</span>.interval);</div><div class="line">        <span class="keyword">var</span> position = <span class="keyword">this</span>.transform.position;</div><div class="line"></div><div class="line">        <span class="comment">// 显示格子</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = -<span class="keyword">this</span>.size.x; x &lt;= <span class="keyword">this</span>.size.x; x++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = -<span class="keyword">this</span>.size.y; y &lt;= <span class="keyword">this</span>.size.y; y++) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> z = -<span class="keyword">this</span>.size.z; z &lt;= <span class="keyword">this</span>.size.z; z++) &#123;</div><div class="line">                    <span class="keyword">var</span> pos = <span class="keyword">new</span> Vector3(x, y, z) * <span class="keyword">this</span>.interval;</div><div class="line">                    Gizmos.DrawWireCube(position + pos, size);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 显示六个面的代表色</span></div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> data <span class="keyword">in</span> <span class="keyword">this</span>.datas) &#123;</div><div class="line">            <span class="keyword">var</span> pos = <span class="keyword">this</span>.GetProbePosition(data);</div><div class="line">            </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.colors.Length; i++) &#123;</div><div class="line">                Gizmos.color = data.colors[i];</div><div class="line">                Gizmos.DrawSphere(pos + Directions[i] * <span class="keyword">this</span>.interval * <span class="number">0.3</span>f, <span class="keyword">this</span>.interval * <span class="number">0.1</span>f);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/irradiance_volume/0.png" alt="0"><br>　　上图已是烘焙好的结果，仅供参考，如此格子的构建便完成了。</p>
<h3 id="提取代表色"><a href="#提取代表色" class="headerlink" title="提取代表色"></a>提取代表色</h3><p>　　所谓提取格子六个面的代表色，这种做法其实有个专属名词：<a href="https://zhuanlan.zhihu.com/p/156739444" target="_blank" rel="external">Ambient Cube</a>。其核心思想就是<strong>简化某个区域内的光照信息</strong>，这很显然是非常物理不正确且粗暴的，但有道是图形学第一理论：<em>看起来对了，那就是对了</em>。类似替代方案还可以采用二阶球谐，两者在效果上较为接近，这并非本文重点，不再展开。<br>　　在上文也提到对此的具体方案：使用ReflectionProbe拍摄每个格子下的CubeMap，最后采样Cubemap的每个面的颜色求平均值即可。看起来这是个可并行化的任务：<strong>为每个格子都创建ReflectionProbe对象进行拍摄，然后使用Compute Shader对Cubemap进行采样提取颜色</strong>。可惜事与愿违，在Unity内部实现中，ReflectionProbe的拍摄同一时刻只有一个，而类似的Camera拍摄Cubemap更是非异步的，可见拍摄这一块想达到真正的并行化是做不到了。所幸Compute Shader那一块还行，也懒得改成非并行写法了（万一有天支持了），附上相关代码：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">[ExecuteAlways]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProbeMgr</span> : <span class="title">MonoBehaviour</span> &#123;</div><div class="line">    <span class="comment">// Cubemap大小</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">128</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ComputeShader shader; <span class="comment">// 提取代表色的Compute Shader</span></div><div class="line">    <span class="keyword">public</span> Texture3D[] textures; <span class="comment">// 六个面对应的3D纹理</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> progress; <span class="comment">// 拍摄进度</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> IsBaking &#123;</div><div class="line">        <span class="keyword">get</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">set</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// 编辑器模式下专属，拍摄时需时刻保持刷新</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> UNITY_EDITOR</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.IsBaking) &#123;</div><div class="line">            EditorUtility.SetDirty(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="comment">// 拍摄总函数入口，注意它是协程形式的</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Bake</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 部署拍摄，让相关Shader切换为拍摄模式</span></div><div class="line">        <span class="keyword">this</span>.IsBaking = <span class="literal">true</span>;</div><div class="line">        Shader.EnableKeyword(<span class="string">"_BAKING"</span>);</div><div class="line">        <span class="keyword">this</span>.progress = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.FlushProbe(); <span class="comment">// 构建格子</span></div><div class="line"></div><div class="line">        <span class="comment">// 构建贴图资源</span></div><div class="line">        <span class="keyword">this</span>.textures = <span class="keyword">new</span> Texture3D[<span class="number">6</span>];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.textures.Length; i++) &#123;</div><div class="line">            <span class="keyword">var</span> texture = <span class="keyword">new</span> Texture3D(<span class="keyword">this</span>.size.x * <span class="number">2</span> + <span class="number">1</span>, <span class="keyword">this</span>.size.y * <span class="number">2</span> + <span class="number">1</span>, <span class="keyword">this</span>.size.z * <span class="number">2</span> + <span class="number">1</span>, DefaultFormat.HDR, <span class="number">0</span>);</div><div class="line">            texture.wrapMode = TextureWrapMode.Clamp;</div><div class="line">            <span class="keyword">this</span>.textures[i] = texture;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 全格子发起拍摄</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.datas.Length; i++) &#123;</div><div class="line">            <span class="keyword">this</span>.CaptureProbe(<span class="keyword">this</span>.datas[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// progress代表拍摄进度，在未全部拍摄完成前进行刷新并等待</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.progress &lt; <span class="keyword">this</span>.datas.Length) &#123;</div><div class="line">            EditorUtility.SetDirty(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">await</span> Task.Yield();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 拍摄完毕了，贴图应用</span></div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> texture <span class="keyword">in</span> <span class="keyword">this</span>.textures) &#123;</div><div class="line">            texture.Apply();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 设置相关数据到Shader，关闭拍摄模式</span></div><div class="line">        <span class="keyword">this</span>.SetValue();</div><div class="line">        Shader.DisableKeyword(<span class="string">"_BAKING"</span>);</div><div class="line">        <span class="keyword">this</span>.IsBaking = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 格子拍摄，注意它是协程形式的</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">CaptureProbe</span>(<span class="params">ProbeData data</span>) </span>&#123;</div><div class="line">        <span class="comment">// 为格子构建专属ReflectionProbe对象</span></div><div class="line">        <span class="keyword">var</span> go = <span class="keyword">new</span> GameObject(<span class="string">"Reflect"</span>);</div><div class="line">        <span class="keyword">var</span> reflect = go.AddComponent&lt;ReflectionProbe&gt;();</div><div class="line">        reflect.nearClipPlane = <span class="number">0.001</span>f;</div><div class="line">        reflect.farClipPlane = <span class="number">100</span>;</div><div class="line">        reflect.hdr = <span class="literal">true</span>;</div><div class="line">        reflect.backgroundColor = Color.white;</div><div class="line">        reflect.clearFlags = ReflectionProbeClearFlags.SolidColor;</div><div class="line">        reflect.resolution = <span class="number">128</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 设置ReflectionProbe的位置到格子中心</span></div><div class="line">        <span class="keyword">var</span> position = <span class="keyword">this</span>.GetProbePosition(data);</div><div class="line">        go.transform.SetParent(<span class="keyword">this</span>.transform);</div><div class="line">        go.transform.position = position;</div><div class="line">        </div><div class="line">        <span class="comment">// 构建Cubemap贴图</span></div><div class="line">        <span class="keyword">var</span> rt = RenderTexture.GetTemporary(SIZE, SIZE, <span class="number">32</span>, RenderTextureFormat.ARGBFloat);</div><div class="line">        rt.dimension = TextureDimension.Cube;</div><div class="line"></div><div class="line">        <span class="comment">// 进行拍摄</span></div><div class="line">        <span class="keyword">var</span> id = reflect.RenderProbe(rt);</div><div class="line"></div><div class="line">        <span class="comment">// 等待拍摄完成，在此期间保持刷新</span></div><div class="line">        <span class="keyword">while</span> (!reflect.IsFinishedRendering(id)) &#123;</div><div class="line">            EditorUtility.SetDirty(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">await</span> Task.Yield();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 构建颜色数据，它对应着colors[6]</span></div><div class="line">        <span class="keyword">var</span> colorBuffer = <span class="keyword">new</span> ComputeBuffer(<span class="number">6</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>) * <span class="number">4</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 设置相关属性到Compute Shader并启动</span></div><div class="line">        <span class="keyword">int</span> kernel = <span class="keyword">this</span>.shader.FindKernel(<span class="string">"CSMain"</span>);</div><div class="line">        <span class="keyword">this</span>.shader.SetTexture(kernel, <span class="string">"_CubeMap"</span>, rt);</div><div class="line">        <span class="keyword">this</span>.shader.SetBuffer(kernel, <span class="string">"_Colors"</span>, colorBuffer);</div><div class="line">        <span class="keyword">this</span>.shader.SetFloat(<span class="string">"_Size"</span>, SIZE);</div><div class="line">        <span class="keyword">this</span>.shader.Dispatch(kernel, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 执行完毕，将提取后的代表色存放到格子数据中</span></div><div class="line">        colorBuffer.GetData(data.colors);</div><div class="line"></div><div class="line">        <span class="comment">// 设置代表色到对应位置的3D纹理中</span></div><div class="line">        <span class="keyword">var</span> pos = data.position;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.colors.Length; i++) &#123;</div><div class="line">            <span class="keyword">var</span> color = data.colors[i];</div><div class="line">            <span class="keyword">this</span>.textures[i].SetPixel(pos.x, pos.y, pos.z, color);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 清理资源，进度+1</span></div><div class="line">        colorBuffer.Release();</div><div class="line">        RenderTexture.ReleaseTemporary(rt);</div><div class="line">        DestroyImmediate(go);</div><div class="line">        <span class="keyword">this</span>.progress++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> kernel CSMain</span></div><div class="line"></div><div class="line">TextureCube&lt;float4&gt; _CubeMap;</div><div class="line">SamplerState _LinearClamp;</div><div class="line"></div><div class="line">RWStructuredBuffer&lt;float4&gt; _Colors;</div><div class="line"><span class="keyword">float</span> _Size; <span class="comment">// CubeMap贴图大小</span></div><div class="line"></div><div class="line"><span class="comment">// 只开了6条线程，实现每个面取色的并行化</span></div><div class="line">[numthreads(<span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>)]</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">CSMain</span> <span class="params">(uint3 id : SV_GroupID)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">float</span> rate = <span class="number">1.0</span> / _Size;</div><div class="line">    float3 color = float3(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _Size; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; _Size; j++) &#123;</div><div class="line">            <span class="comment">// 通过位置获取对应uv</span></div><div class="line">            float2 uv = float2(j, i) * rate;</div><div class="line">            uv = <span class="number">2.0</span> * uv - <span class="number">1.0</span>; <span class="comment">// 0~1 -&gt; -1~1</span></div><div class="line"></div><div class="line">            float3 coord = float3(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</div><div class="line"></div><div class="line">            <span class="comment">// 获取每个面对应的Cubemap纹理坐标</span></div><div class="line">            <span class="keyword">if</span> (id.x == <span class="number">0</span>) &#123; <span class="comment">// +X</span></div><div class="line">                coord = float3(<span class="number">1.0</span>, uv);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (id.x == <span class="number">1</span>) &#123; <span class="comment">// -X</span></div><div class="line">                coord = float3(<span class="number">-1.0</span>, uv);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (id.x == <span class="number">2</span>) &#123; <span class="comment">// +Y</span></div><div class="line">                coord = float3(uv.x, <span class="number">1.0</span>, uv.y);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (id.x == <span class="number">3</span>) &#123; <span class="comment">// -Y</span></div><div class="line">                coord = float3(uv.x, <span class="number">-1.0</span>, uv.y);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (id.x == <span class="number">4</span>) &#123; <span class="comment">// +Z</span></div><div class="line">                coord = float3(uv, <span class="number">1.0</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (id.x == <span class="number">5</span>) &#123; <span class="comment">// -Z</span></div><div class="line">                coord = float3(uv, <span class="number">-1.0</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 将每个点的颜色采样加起来</span></div><div class="line">            color += _CubeMap.SampleLevel(_LinearClamp, coord, <span class="number">0</span>).rgb;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 求颜色平均值，得到代表色</span></div><div class="line">    <span class="keyword">float</span> maxn = _Size * _Size;</div><div class="line">    _Colors[id.x] = float4(color / maxn, <span class="number">1.0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/irradiance_volume/1.gif" alt="1"><br>　　上图是拍摄现场，可惜拍摄这块无法达成并行化，显得有点捞，只能将就了。</p>
<h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><p>　　我们所需的数据都已构建完成，接下来便是着色了。首先需要将相关数据传到Shader，作为全局变量使用：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[ExecuteAlways]</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProbeMgr</span> : <span class="title">MonoBehaviour</span> &#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetValue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.datas == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 将六个面的3D纹理传递到Shader</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.textures.Length; i++) &#123;</div><div class="line">            Shader.SetGlobalTexture(<span class="string">"_VolumeTex"</span> + i, <span class="keyword">this</span>.textures[i]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        Shader.SetGlobalVector(<span class="string">"_VolumeSize"</span>, (Vector3)<span class="keyword">this</span>.size); <span class="comment">// 格子数量（XYZ）</span></div><div class="line">        Shader.SetGlobalVector(<span class="string">"_VolumePosition"</span>, <span class="keyword">this</span>.position); <span class="comment">// 格子矩阵的原点坐标（基于transform.position减去宽高而来）</span></div><div class="line">        Shader.SetGlobalFloat(<span class="string">"_VolumeInterval"</span>, <span class="keyword">this</span>.interval); <span class="comment">// 格子大小</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　然后便是核心Shader代码：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">sampler3D _VolumeTex0;</div><div class="line">sampler3D _VolumeTex1;</div><div class="line">sampler3D _VolumeTex2;</div><div class="line">sampler3D _VolumeTex3;</div><div class="line">sampler3D _VolumeTex4;</div><div class="line">sampler3D _VolumeTex5;</div><div class="line"></div><div class="line">CBUFFER_START(IrradianceVolume)</div><div class="line">float3 _VolumeSize;</div><div class="line">float3 _VolumePosition;</div><div class="line"><span class="keyword">float</span> _VolumeInterval;</div><div class="line">CBUFFER_END</div><div class="line"></div><div class="line"><span class="comment">// position: 顶点世界坐标</span></div><div class="line"><span class="comment">// normal: 顶点世界法线</span></div><div class="line"><span class="comment">// 获取该顶点下对应的颜色</span></div><div class="line"><span class="function">float3 <span class="title">GetIrradiance</span><span class="params">(float3 position, float3 normal)</span> </span>&#123;</div><div class="line">    float3 pos = position - _VolumePosition; <span class="comment">// 获取顶点坐标在格子矩阵下的相对位置</span></div><div class="line">    float3 size = (_VolumeSize * <span class="number">2</span> + <span class="number">1</span>) * _VolumeInterval; <span class="comment">// 获取格子矩阵的总大小</span></div><div class="line">    float4 coord = float4(pos / size, <span class="number">0</span>); <span class="comment">// 获取顶点坐标在格子矩阵下的uv</span></div><div class="line">    float3 direction = reflect(-_MainLightPosition.xyz, normal); <span class="comment">// 这里是个魔改措施，为了让颜色的反映更加风骚</span></div><div class="line">    float3 color = GetAmbientColor(direction, coord); <span class="comment">// 获取AmbientCube下的颜色</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// normal: 顶点世界法线</span></div><div class="line"><span class="comment">// coord: 3d纹理uv</span></div><div class="line"><span class="comment">// 根据法线，获取AmbientCube下的颜色</span></div><div class="line"><span class="function">float3 <span class="title">GetAmbientColor</span><span class="params">(float3 normal, float4 coord)</span> </span>&#123;</div><div class="line">    <span class="comment">// 无负数的权重值</span></div><div class="line">    float3 nSquared = normal * normal;</div><div class="line"></div><div class="line">    <span class="comment">// 根据法线方向判断对应的三个面的纹理进行采样</span></div><div class="line">    <span class="comment">// 实测这里的三目运算符并不会产生分支</span></div><div class="line">    float3 colorX = normal.x &gt;= <span class="number">0.0</span> ? tex3Dlod(_VolumeTex0, coord).rgb : tex3Dlod(_VolumeTex1, coord).rgb;</div><div class="line">    float3 colorY = normal.y &gt;= <span class="number">0.0</span> ? tex3Dlod(_VolumeTex2, coord).rgb : tex3Dlod(_VolumeTex3, coord).rgb;</div><div class="line">    float3 colorZ = normal.z &gt;= <span class="number">0.0</span> ? tex3Dlod(_VolumeTex4, coord).rgb : tex3Dlod(_VolumeTex5, coord).rgb;</div><div class="line"></div><div class="line">    <span class="comment">// 将三个方向对应的颜色乘以权重值，得出最终色</span></div><div class="line">    float3 color = nSquared.x * colorX + nSquared.y * colorY + nSquared.z * colorZ;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如此，通过调用<code>GetIrradiance</code>函数，传入顶点世界坐标与法线便可获取相关颜色，然后根据个人喜好进行着色即可：  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// URP SimpleLitForwardPass.hlsl</span></div><div class="line"></div><div class="line">half4 color = UniversalFragmentBlinnPhong(inputData, diffuse, specular, smoothness, emission, alpha);</div><div class="line"></div><div class="line"><span class="comment">// 处于拍摄模式下将屏蔽这段代码</span></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _BAKING</span></div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> _VOLUME_GI_ON</span></div><div class="line">        half3 ambientColor = GetIrradiance(inputData.positionWS, inputData.normalWS);</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        half3 ambientColor = <span class="number">1.0</span>;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    </div><div class="line">    color.rgb *= ambientColor;</div><div class="line">    color.rgb = MixFog(color.rgb, inputData.fogCoord);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">color.a = OutputAlpha(color.a, _Surface);</div></pre></td></tr></table></figure>
<h3 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h3><p>　　以下是成果展示：<br><img src="https://musoucrow.github.io/images/irradiance_volume/2.png" alt="2"><br><img src="https://musoucrow.github.io/images/irradiance_volume/3.png" alt="3"><br><img src="https://musoucrow.github.io/images/irradiance_volume/4.png" alt="4">  </p>
<p>　　相较于传统GI方案来说，这样的效果未免过于浓郁了，这是我故意加了魔改代码后的结果：<strong>要的就是这种效果</strong>。毕竟GI对于我的目的而言<strong>并非为了什么物理正确</strong>，只是想让场景增添更多的<strong>颜色变化</strong>而已罢了。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　这套GI方案的好处便是可控性强，有着做出更具风味效果的可能性。当然就性能消耗而言实际上是较传统Lightmap要高的（采样三张图），一般项目估计也用不上，仅供一乐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　自&lt;a href=&quot;https://ww
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>2020年度总结</title>
    <link href="https://musoucrow.github.io/2020/12/31/summary_2020/"/>
    <id>https://musoucrow.github.io/2020/12/31/summary_2020/</id>
    <published>2020-12-31T14:24:46.000Z</published>
    <updated>2021-07-17T12:41:21.493Z</updated>
    
    <content type="html"><![CDATA[<p>　　又到了写年度总结的日子了，蓦然回首，发现这已经是写Blog的<strong>第四年</strong>了。较之去年，今年可谓相当高产了：<strong>12个月里产出11篇</strong>，四舍五入就是月刊了（笑。可见今年相当充实，每个月都整了新活。工作方面也已过一年，特作总结，以为归纳。<br>　　今年内容输出上最大的变化就是吹响了<strong>进军3D</strong>的号角，以完成一款<strong>俯视角3D ARPG</strong> Demo为目标，对各项技术专题展开了研究。特别在图形效果方面，由于现实的需要，已经到了不得不掌握的时候。结果没想到学习起来相当顺利，以前一直觊觎而不得的知识在现实需求的推进下顺利掌握，果然还是得<strong>知行合一</strong>呀。<br>　　当然能够如此顺利，个人想来也与前些年对这块一直觊觎的成果吧。毕竟概念的东西还是翻来覆去看过不少，只欠一次实践的机会罢了。现在想来也是颇为后悔，若是当年抽出点时间写写渲染器啥的那就更好了。不过也只是想想而已，没有明确的需求与觉悟下，只凭<strong>一时兴起</strong>是难以坚持下去的，只能把目光放在未来了。<br>　　接触这块对我来说算是进入一个新的领域，也因此有幸结识了不少朋友。通过相互交流学到了不少，增长颇多见闻。也因此让我正视以<strong>技术美术</strong>作为职业的可能性，目前按个人标准看来还是不行的：效果实践的广度仍是不足，对于DCC软件的掌握、美术工作的流程与体验还不够深刻，对渲染管线、图形原理的认识与实践也不够。总体而言感觉只是初中级水平，还有很长的路要走。<br>　　世人常言TA分程序向与美术向，尽管我并不是很认可：我认为懂美术的TA才是真的TA，而所谓程序向TA只是<strong>人才不足的权宜之计</strong>，或者是<strong>图形程序</strong>的过渡罢了。而我确实没有动力与天分去成为美术，可见若是要继续往这条路走下去的话，就得靠拢图形程序了吧。当然从现状而论，作为<strong>Gameplay程序兼职TA与策划</strong>也许是个不错的组合拳，这也算是独立制作出身的优势了吧（笑<br>　　照目前来看的话，下一年Demo的重心将会<strong>回归Gameplay</strong>，文章产出应该会少很多吧（Gameplay的东西没有经过时间的验证就没有说服力）。当然TA这块也会继续走下去，还是挺有意思的，希望能有更多结合实际的机会吧。<br>　　至于工作相关的内容限于篇幅与细节便在此略过不谈，以上便是本人的2020年度总结了，且待明年的Blog吧。<br>　　无双草泥马<br>　　2020.12.31</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　又到了写年度总结的日子了，蓦然回首，发现这已经是写Blog的&lt;strong&gt;第四年&lt;/strong&gt;了。较之去年，今年可谓相当高产了：&lt;strong&gt;12个月里产出11篇&lt;/strong&gt;，四舍五入就是月刊了（笑。可见今年相当充实，每个月都整了新活。工作方面也已过一年，
    
    </summary>
    
      <category term="Talk" scheme="https://musoucrow.github.io/categories/Talk/"/>
    
    
      <category term="Talk" scheme="https://musoucrow.github.io/tags/Talk/"/>
    
  </entry>
  
  <entry>
    <title>地形系统挣扎录——从Blender到Unity</title>
    <link href="https://musoucrow.github.io/2020/12/14/llbn_terrain/"/>
    <id>https://musoucrow.github.io/2020/12/14/llbn_terrain/</id>
    <published>2020-12-13T18:38:44.000Z</published>
    <updated>2021-07-17T12:41:21.493Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　之前由<a href="https://musoucrow.github.io/2020/06/07/lbbn_tile/">前篇</a>决定场景的制作模式为Tile流，这种面片堆砌的流派对于方方正正的场景（如室内）很有效。但是对于如山地草原一般的场景就很难受了：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/0.png" alt="0"><br>　　可能粗看下去感觉还行，实际上是不禁细看的，地形是在方方正正的基础上揉捏而成，可以在斜边处可以到明显的采样变形，且草地边缘的石边是手动暴力贴上去的，制作起来非常的耗时且嗨奴。经此一役后美术决定引入业界更通用的场景制作方案——Terrain流：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/1.jpeg" alt="1"><br>　　如上图所示，所谓Terrain流就是非常常见的那种在场景编辑器对模型<strong>揉揉捏捏塑形，涂涂抹抹上色</strong>的制作流派。对于制作<strong>地形复杂、贴图混杂</strong>的场景可谓相当受用。那么按理来说直接使用现有的地形编辑工具不就好了？——若是那么简单便没有本篇喽。<br>　　首先经过一番实验后发现，由于美术风格、建模习惯等因素，决定采用传统建模方式，而非这些场景编辑器惯用的揉捏平面生成高度图。如此一来这些场景编辑器便都Pass，将目光放到了传统建模软件·Blender上……于是便有了本文的副标题：<strong>从Blender到Unity</strong>。Unity版本为2019.4（URP），Blender版本为2.9。  </p>
<h3 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h3><p>　　由于这波算是造轮子了，没得现有的套件可蹭，所以还是先整点最基本的实现吧。在抛开建模那块，Terrain流的贴图着色说白了就是由<strong>1张索引贴图+若干张地形贴图</strong>组成，通过工具绘制索引贴图，最终<strong>根据索引采样对应的地形贴图</strong>，实现贴图混杂的显示效果：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/2.png" alt="2"><br><img src="https://musoucrow.github.io/images/lbbn_terrain/3.png" alt="3"><br>　　大致Shader实现如下：  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">half4 Frag(Varyings input) : SV_Target</div><div class="line">&#123;</div><div class="line">    half4 mask = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, input.uv);</div><div class="line">    half4 color1 = SAMPLE_TEXTURE2D(_TerrainMap1, sampler_MaskMap, input.uv) * mask.r;</div><div class="line">    half4 color2 = SAMPLE_TEXTURE2D(_TerrainMap2, sampler_MaskMap, input.uv) * mask.g;</div><div class="line">    half4 color = color1 + color2;</div><div class="line"></div><div class="line">    return color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　可见实现原理并不算复杂，将贴图的每个通道（RGBA）作为贴图的透明度值显示即可，但一切才刚刚开始……</p>
<h3 id="图集-OR-纹理数组"><a href="#图集-OR-纹理数组" class="headerlink" title="图集 OR 纹理数组"></a>图集 OR 纹理数组</h3><p>　　首先第一个问题便是贴图的管理方式：根据上文代码可以看出，目前的地形贴图是一张张独立的存在。那么就会变成<strong>有多少张地形纹理就要开多少个口</strong>了，不利于环保且哈批。业界相关流行的解决方法有<strong>图集（Atlas）</strong>与<strong>纹理数组（TextureArray）</strong>两种。<br>　　所谓图集便是将各种贴图整合进一张大图里，按偏移采样，是很常见的做法：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/4.png" alt="4"><br>　　相关的采样方法可以参考冯乐乐的<a href="https://zhuanlan.zhihu.com/p/34397097" target="_blank" rel="external">地形纹理合并</a>，大致如此：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">half4 <span class="title">SampleIndex</span><span class="params">(<span class="keyword">int</span> index, half2 pos)</span> </span>&#123;</div><div class="line">    half2 uv = frac(pos) * <span class="number">0.484375</span> + <span class="number">0.0078125</span>;</div><div class="line">    <span class="keyword">int</span> lines = <span class="built_in">floor</span>(index / <span class="number">2</span>);</div><div class="line">    half2 uv2 = half2(index - lines * <span class="number">2</span>, lines);</div><div class="line">    uv2.y = <span class="number">1</span> - uv2.y;</div><div class="line">    </div><div class="line">    uv += uv2 / <span class="number">2.0</span>;</div><div class="line"></div><div class="line">    half4 color = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　大致思路为根据要采样的贴图索引（index），结合世界坐标的小数点(pos)，得到对应的uv坐标。其中这里的<code>0.484375</code>、<code>0.0078125</code>为采样收缩的魔法数字（0.0078125=1/128，128位图集的宽高，0.484375=0.5-0.0078125），这么做的理由与<a href="https://musoucrow.github.io/2020/06/07/lbbn_tile/">瓦片地图</a>一致：<strong>由于贴图的密集性，线性采样两者的贴图边缘会产生混色现象</strong>，注意红色框选的部分：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/5.png" alt="5"><br>　　为了解决这个问题，于是选择人工收缩了采样范围。但相对而言，在镜头放大后还是能看得出贴图之间并非是严丝合缝的，毕竟采样已经不连续了，算是一个不大不小的缺陷吧。<br>　　而纹理数组则是个PS4时代以来的新玩意，在Unity<a href="https://docs.unity.cn/cn/2019.4/Manual/class-Texture2DArray.html" target="_blank" rel="external">官方文档</a>中明确了支持的平台，可见一般手机设备对此不见得能够支持。但我们做的是PC端便无所谓了，用起来用起来！<br>　　纹理数组的原理很简单：一次性把多张贴图打包成新的数据，与一般贴图用法无异，只是采样的API有所不同，需要指定index。这么一来可就我可就不困了呀，拿先前的Shader改造下对比：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">half4 Frag(Varyings input) : SV_Target</div><div class="line">&#123;</div><div class="line">    half4 mask = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, input.uv);</div><div class="line">    half4 color1 = SAMPLE_TEXTURE2D_ARRAY(_BaseMap, sampler_BaseMap, input.uv, 0) * mask.r;</div><div class="line">    half4 color2 = SAMPLE_TEXTURE2D_ARRAY(_BaseMap, sampler_BaseMap, input.uv, 1) * mask.g;</div><div class="line">    half4 color = color1 + color2;</div><div class="line"></div><div class="line">    return color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　较之图集那花里胡哨的采样方式真是爽快多了，而且还没有合缝问题。美中不足在于Unity并<strong>没有提供直接的创建纹理数组的方法</strong>，需要自己撸一个，限于篇幅便不再列出，给个<a href="http://dracoooo.com/2019/08/28/知识漏洞/Texture2DArray的细节与坑/" target="_blank" rel="external">参考</a>便可。</p>
<h3 id="传统UV-OR-世界坐标"><a href="#传统UV-OR-世界坐标" class="headerlink" title="传统UV OR 世界坐标"></a>传统UV OR 世界坐标</h3><p>　　从图集的采样算法可以看出是不便使用模型本身的uv的，而是要用世界坐标作为驱动代替。但现在决定使用纹理数组，那么这便成了个问题。使用传统UV采样在多数情况下并没有什么问题，但是在这种情况下便暴露了：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/6.png" alt="6"><br>　　如图所示，山峰出现了很夸张的拉伸现象，这是UV划分精度不足导致的（整个山峰的面采样了一张贴图），对此可以通过划分UV解决，但规模一旦上去后，这会给美术带来不小的负担。那么来对比下世界坐标的情况：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/7.png" alt="7"><br>　　虽然在采样上有点小瑕疵，但的确是好多了。由于<strong>世界坐标是三维的，而纹理采样是二维的</strong>。若是只按某两个维度进行采样，在某些面必然会发生问题：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/8.png" alt="8"><br>　　于是我们可以根据法线判定面的朝向以决定使用世界坐标的哪两个轴，但在某些斜面下实际上需要用到两个平面维度的结果混合。于是干脆一步到底，<strong>根据法线三个轴的值决定三个平面维度（zy、xz、xy）的混合度</strong>，是为<strong>三向贴图（Tri-planar Mapping）</strong>：  </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">half4 Frag(Varyings input) : SV_Target</div><div class="line">&#123;</div><div class="line">    half3 weight = pow(abs(input.normal), _BlendSharpness); // _BlendSharpness可增大混合效果</div><div class="line">    weight = weight / (weight.x + weight.y + weight.z); // 质量守恒</div><div class="line">    </div><div class="line">    half4 color = 0;</div><div class="line">    color += SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.position.zy) * weight.x;</div><div class="line">    color += SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.position.xz) * weight.y;</div><div class="line">    color += SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.position.xy) * weight.z;</div><div class="line"></div><div class="line">    return color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　但由上图也看得出来，在某些情况下它并非是完美的（或者没必要）。且性能消耗大，采样次数翻了三倍。由此可见两者皆有其使用场合，故决定通过分支开关控制两者的切换。当然最理想的情况自然是让美术好好分UV（  </p>
<h3 id="界限突破"><a href="#界限突破" class="headerlink" title="界限突破"></a>界限突破</h3><p>　　讨论了以上两个问题后，还有一个很明显的问题：若是使用RGBA四个通道代表四种地形贴图的透明度，那么首先可使用的地形贴图数量就太少了，并且需要同时对这四张贴图进行采样，若是加上三向贴图更是达到了恐怖的<strong>12次采样</strong>！这绝对是不可接受的，仔细想来，实际上多数情况只会有两种贴图混合，加上Demo的像素风格更是不会发生太多的混合现象。那么便可以改成<strong>同一像素最多采样两种地形贴图</strong>的方案了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">half4 Frag(Varyings input) : SV_Target</div><div class="line">&#123;</div><div class="line">    half4 mask = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, input.uv);</div><div class="line">    half4 color1 = SAMPLE_TEXTURE2D_ARRAY(_BaseMap, sampler_BaseMap, input.uv, mask.r);</div><div class="line">    half4 color2 = SAMPLE_TEXTURE2D_ARRAY(_BaseMap, sampler_BaseMap, input.uv, mask.g);</div><div class="line">    half4 color = lerp(color1, color2, mask.b);</div><div class="line"></div><div class="line">    return color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　如上所示，新方案下<strong>RG通道代表地形贴图的索引值，B通道作为两者颜色的混合度</strong>（255则完全显示color1，反之亦然），如此便可只用到三个通道的前提下支持多种地形贴图，同时只采样2次，哪怕加上三向贴图也算在可以接受的程度了。  </p>
<h3 id="在Blender的战斗"><a href="#在Blender的战斗" class="headerlink" title="在Blender的战斗"></a>在Blender的战斗</h3><p>　　以上Shader看着简单，到了Blender这边的Shader开发那麻烦可大了。由于可视化的因素，我们需要用特定颜色代表对应的索引值，且要选择<strong>通道明确</strong>的颜色，也就是：<em>黑（RGB）、红（R）、绿（G）、蓝（B）、黄（RG）、紫（RB）、青（GB）</em>。鉴于黑色的特性，将之作为地形的默认底色。其余颜色根据深浅与黑色进行混合。其中的关键便是<strong>如何识别单/双通道颜色</strong>的有效性，对此我选择<strong>双通道颜色值必须相差小于10才有效，反之则是值大的通道有效</strong>。<br>　　这看着也不算很复杂，可恶的是Blender的新版渲染引擎<code>Cycles</code>并不支持代码形式的Shader（OGL），只支持连连看。而老板渲染引擎<code>Eevee</code>只支持在渲染模式下看到结果，这样便达不到实时修改预览的效果了。于是乎化身为毛线团战士：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/9.png" alt="9"><br><img src="https://musoucrow.github.io/images/lbbn_terrain/10.png" alt="10"><br><img src="https://musoucrow.github.io/images/lbbn_terrain/11.png" alt="11"><br>　　主要Blender内置的节点并不支持分支判断，于是只能老老实实把每种颜色的处理都弄上去加一块，使用比较节点取得0值来屏蔽不该显示的部分。除此之外便是贴图资源不能作为参数值存在，只能老老实实创建贴图节点在外头进行填写，可由于三向贴图的加入，每种贴图还得手动填三次，算上总和一共是21种了……<br><img src="https://musoucrow.github.io/images/lbbn_terrain/12.png" alt="12"><br>　　不过所幸效果还是不错的，以后再有这样也许可以考虑看看源码了……<br><img src="https://musoucrow.github.io/images/lbbn_terrain/13.png" alt="13">  </p>
<h3 id="脚本转换"><a href="#脚本转换" class="headerlink" title="脚本转换"></a>脚本转换</h3><p>　　在Blender绘制的贴图还无法直接用于游戏，毕竟游戏可顶不住这样的Shader写法。于是便需要一Python脚本将之转换为游戏Shader可直接食用的贴图。实现大致思路与Blender Shader无差，只是在CPU端便可暴力条件判断了，爽歪歪：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_index</span><span class="params">(color)</span>:</span></div><div class="line">    a = get_max_channel(color)</div><div class="line">    b = get_mid_channel(color)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> INDEX_MAP[<span class="string">'black'</span>], <span class="number">0</span>, <span class="keyword">None</span>, <span class="keyword">None</span> <span class="comment"># Black</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> a - b &lt; <span class="number">10</span>:</div><div class="line">        v = a + b</div><div class="line">        alpha = (a + b) // <span class="number">2</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> v == color[<span class="number">0</span>] + color[<span class="number">1</span>]:</div><div class="line">            <span class="keyword">return</span> INDEX_MAP[<span class="string">'yellow'</span>], alpha, <span class="number">0</span>, <span class="number">1</span> <span class="comment"># Yellow</span></div><div class="line">        <span class="keyword">elif</span> v == color[<span class="number">0</span>] + color[<span class="number">2</span>]:</div><div class="line">            <span class="keyword">return</span> INDEX_MAP[<span class="string">'purple'</span>], alpha, <span class="number">0</span>, <span class="number">2</span> <span class="comment"># Purple</span></div><div class="line">        <span class="keyword">elif</span> v == color[<span class="number">1</span>] + color[<span class="number">2</span>]:</div><div class="line">            <span class="keyword">return</span> INDEX_MAP[<span class="string">'azure'</span>], alpha, <span class="number">1</span>, <span class="number">2</span> <span class="comment"># Azure</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> a == color[<span class="number">0</span>]:</div><div class="line">            <span class="keyword">return</span> INDEX_MAP[<span class="string">'red'</span>], a, <span class="number">0</span>, <span class="keyword">None</span> <span class="comment"># Red</span></div><div class="line">        <span class="keyword">elif</span> a == color[<span class="number">1</span>]:</div><div class="line">            <span class="keyword">return</span> INDEX_MAP[<span class="string">'green'</span>], a, <span class="number">1</span>, <span class="keyword">None</span> <span class="comment"># Green</span></div><div class="line">        <span class="keyword">elif</span> a == color[<span class="number">2</span>]:</div><div class="line">            <span class="keyword">return</span> INDEX_MAP[<span class="string">'blue'</span>], a, <span class="number">2</span>, <span class="keyword">None</span> <span class="comment"># Blue</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> INDEX_MAP[<span class="string">'black'</span>], <span class="number">0</span>, <span class="keyword">None</span>, <span class="keyword">None</span> <span class="comment"># Black</span></div></pre></td></tr></table></figure>
<p>　　当然为了图片的可视化，索引不会按照原值输出，而是<code>return math.floor(index * 255 / 6)</code>，自然游戏Shader那边也要做相应解码处理。<br>　　除此之外，由于索引贴图的设计因素无法达到传统素材做法的线性采样效果，只能如二图那般马赛克：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/14.png" alt="14"><br><img src="https://musoucrow.github.io/images/lbbn_terrain/15.png" alt="15"><br>　　为了减少这种马赛克的感觉，便使用脚本<strong>判断像素周边有多少不相同索引的像素</strong>，以此按比例减少透明度：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/16.png" alt="16"><br>　　另外诸如<strong>设置图片输出宽高，指定颜色对应的索引值</strong>等功能限于篇幅在此便不展开了。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>　　本篇的内容有点超乎我想象，也到了收获的时候了，最后来看看成果吧：<br><img src="https://musoucrow.github.io/images/lbbn_terrain/17.png" alt="17"><br>　　在本次地形系统的调研中断断续续挣扎了一个半月，可谓把各种坑都踩了一遍。属实离谱，当然也与最近项目较忙有关。目前看来效果与先前并无太大差距，主要在创作模式多了新的道路，相关美术效果仍会持续优化，期待由此开端最终会演进到怎样的程度呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　之前由&lt;a href=&quot;https://
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
      <category term="Blender" scheme="https://musoucrow.github.io/tags/Blender/"/>
    
  </entry>
  
  <entry>
    <title>Visual Effect Graph魔改录</title>
    <link href="https://musoucrow.github.io/2020/10/08/veg/"/>
    <id>https://musoucrow.github.io/2020/10/08/veg/</id>
    <published>2020-10-08T11:32:33.000Z</published>
    <updated>2021-07-17T12:41:21.494Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>     </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　<a href="https://musoucrow.github.io/2020/09/06/lbbn_water/">前文</a>提到关于粒子想实现一些东西，本篇便来还愿了。Demo使用的粒子系统并非传统的<a href="https://docs.unity.cn/cn/2019.4/Manual/Built-inParticleSystem.html" target="_blank" rel="external">Particle System</a>，而是基于GPU的<a href="https://docs.unity.cn/Packages/com.unity.visualeffectgraph@8.2/manual/index.html" target="_blank" rel="external">Visual Effect Graph</a>，下文简称VEG。<br>　　VEG的问题与近年来Unity新出的模块一样：有些功能就做了个壳没下文了，我需要的光照探针功能便是如此。尽管VEG在编辑器做了支持，但实际上功能是没实现的：<br><img src="https://musoucrow.github.io/images/veg/0.png" alt="0"><br>　　所幸Unity近年来的模块有个好处：<strong>开源</strong>，通过Package Manager下载的模块其本身已经是开源可修改的，若是对其进行一番研究搞不好就能自己实现想要的功能，不必再苦等官方？答案是没错的，我如愿以偿为VEG增加了三个功能，并将之<a href="https://github.com/MusouCrow/MyVFX" target="_blank" rel="external">开源</a>了。</p>
<h2 id="研究"><a href="#研究" class="headerlink" title="研究"></a>研究</h2><p><img src="https://musoucrow.github.io/images/veg/1.png" alt="1"><br>　　根据上图可以发现，VEG特效的构成实际上就是Compute Shader + 一般Shader，它们是由VEG编辑器生成的，双击可查看生成后的代码。由此可见，VEG实际上与<a href="https://docs.unity3d.com/Packages/com.unity.shadergraph@7.1/manual/index.html" target="_blank" rel="external">Shader Graph</a>差不多，都是<strong>通过编辑器进行创作，最后生成相应的代码</strong>。<br>　　由于<a href="https://musoucrow.github.io/2020/03/08/shader_graph/">先前的经验</a>，这类源码的入手点自然是找到编辑器定义属性的地方。比如设置Shader效果的Output部分，顺藤摸瓜便很快找到了：<br><img src="https://musoucrow.github.io/images/veg/2.png" alt="2"><br><img src="https://musoucrow.github.io/images/veg/3.png" alt="3"><br>　　以此类推，便找到了生成Shader的相关处：<br><img src="https://musoucrow.github.io/images/veg/4.png" alt="4"><br><img src="https://musoucrow.github.io/images/veg/5.png" alt="5"><br><img src="https://musoucrow.github.io/images/veg/6.png" alt="6"><br>　　如此路线便打通了，以上得到了两个重要的信息：每个不同的Output类型（Quad、Cube、Mesh……）都会有对应的Shader模板，表示我们加料时也要考虑到多种类型的情况。其次是区分了<code>Legacy</code>与<code>Universal</code>两个文件夹，可见分别对应Built-in与URP管线，毕竟他们使用的Shader库并不相同。如此VEG能在老管线使用，并且在HDRP有新功能就能理解了。  </p>
<h2 id="接受阴影"><a href="#接受阴影" class="headerlink" title="接受阴影"></a>接受阴影</h2><p>　　目前对于VEG最迫切需要的功能便是接受阴影了，无论实时阴影还是光照探针，VEG目前都是没有的。好在按照上文的路线通读一番后，发现追加接受阴影还是蛮容易的。<br>　　顺着上文继续走下去，看到了主Pass下有个名为<code>VFXApplyColor</code>的插入片段在各类型的主Pass都有用到，可见是通用的着色过程。那么在这里加入阴影着色正好：<br><img src="https://musoucrow.github.io/images/veg/7.png" alt="7"><br><img src="https://musoucrow.github.io/images/veg/8.png" alt="8"><br><img src="https://musoucrow.github.io/images/veg/9.png" alt="9"><br>　　通过搜索其他函数的出处找到了<code>Shaders/RenderPipeline/Universal/VFXCommon.hlsl</code>，到了这里便是熟悉的Shader编写环境了，Include的文件都是URP那套，写就完事了：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function">float4 <span class="title">VFXApplyShadow</span>(<span class="params">float4 color, float3 posWS</span>) </span>&#123;</div><div class="line">    float4 shadowCoord = TransformWorldToShadowCoord(posWS);</div><div class="line">    Light mainLight = GetMainLight(shadowCoord);</div><div class="line"></div><div class="line">    color.rgb *= mainLight.color * mainLight.distanceAttenuation * mainLight.shadowAttenuation;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　当然这函数还不能直接用，根据观察其他函数还会在<code>Shaders/VFXCommonOutput.hlsl</code>针对VEG的环境做一层封装然后写到<code>VFXApplyColor</code>里即可：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">float4 <span class="title">VFXApplyShadow</span>(<span class="params">float4 color,VFX_VARYING_PS_INPUTS i</span>)</span></div><div class="line">&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">if</span> USE_RECEIVE_SHADOWS</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">if</span> defined(VFX_VARYING_POSWS)</span></div><div class="line">            <span class="keyword">return</span> VFXApplyShadow(color, i.VFX_VARYING_POSWS);</div><div class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">            <span class="keyword">return</span> VFXApplyShadow(color, (float3)<span class="number">0</span>); <span class="comment">//Some pipeline (LWRP) doesn't require WorldPos</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">        <span class="keyword">return</span> color;</div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/veg/10.png" alt="10"><br>　　当然还要提供阴影相关的<code>multi_compile</code>，搜索代码得知加在<code>VFXPassForwardAdditionalPragma</code>片段，然后就可以看效果啦：<br><img src="https://musoucrow.github.io/images/veg/11.png" alt="11"><br><img src="https://musoucrow.github.io/images/veg/12.gif" alt="12"></p>
<h2 id="光照探针"><a href="#光照探针" class="headerlink" title="光照探针"></a>光照探针</h2><p>　　接受实时阴影算是完成了，但还要考虑到烘焙阴影的情况，于是对于光照探针的支持也要考虑到。VEG关于光照探针的外围支持已经完备（根据光照设置、探针设置开启相关KEYWORD），欠缺的只是Shader相关的部分。<br>　　在不考虑GI，按照我在模型渲染<a href="https://musoucrow.github.io/2020/08/02/lbbn_baked/">一样的做法</a>的前提下，只需要在<code>VFXApplyShadow</code>加点料即可：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">float4 <span class="title">VFXApplyShadow</span>(<span class="params">float4 color, float3 posWS</span>) </span>&#123;</div><div class="line">    float4 shadowCoord = TransformWorldToShadowCoord(posWS);</div><div class="line">    Light mainLight = GetMainLight(shadowCoord);</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_MIXED_LIGHTING_SUBTRACTIVE)</span></div><div class="line">    mainLight.distanceAttenuation = lerp(GetMainLightShadowStrength(), <span class="number">1</span>, saturate(mainLight.distanceAttenuation));</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    color.rgb *= mainLight.color * mainLight.distanceAttenuation * mainLight.shadowAttenuation;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　与之前的做法一样，<code>distanceAttenuation</code>在光照探针下会变成光照计算的着色值，将之锁定在<em>阴影强度-1</em>之间即可。然后烘焙阴影，设置特效组件开启光照探针即可看到效果了：<br><img src="https://musoucrow.github.io/images/veg/13.gif" alt="13"><br>　　比较遗憾的是，光照探针的计算是以GameObject为准的，而非以每个粒子为准，这也是没办法的事，只能尽量避免露馅了。<br>　　关于阴影还剩最后一个点没有做：在编辑器的开关设置，这个模仿其他属性添加变量，并在<code>VFXParticleOutput.cs</code>的<code>additionalDefines</code>变量里添加相关KEYWORD，最后在Shader里做判定即可：<br><img src="https://musoucrow.github.io/images/veg/14.png" alt="14"><br><img src="https://musoucrow.github.io/images/veg/15.png" alt="15">  </p>
<h2 id="水面问题"><a href="#水面问题" class="headerlink" title="水面问题"></a>水面问题</h2><p>　　目前粒子特效在水面上显示会出现很明显的层次错误：<br><img src="https://musoucrow.github.io/images/veg/16.png" alt="16"><br>　　火焰实际上并没有进入水里，但是看着却变蓝了。这是因为<strong>水面的渲染时机在所有对象之后</strong>，并使用<code>CameraColorTexture</code>进行显示。而此时火焰已在Texture里了，于是与水重叠的部分便被水渲染处理了。<br>　　基于这个问题可以很迅速的想到解法：利用RenderFeature的RenderObjects可以新建渲染批次，并将粒子主Pass的<code>LightMode</code>改为新的批次即可：<br><img src="https://musoucrow.github.io/images/veg/17.png" alt="17"><br><img src="https://musoucrow.github.io/images/veg/18.png" alt="18"><br>　　试了下效果，问题的确解决了，但是……<br><img src="https://musoucrow.github.io/images/veg/19.png" alt="19"><br>　　但是水里的火焰消失了，这也是当然的，毕竟在水面渲染之前，火焰还没渲染呢。进一步思考后想到了个绝妙的方案：为粒子新增一个与主Pass一模一样的Pass，也就是目前的ParticlePost，保留原本的主Pass，将LightMode还原。当然只是如此的话会出现一个粒子渲染两次重叠起来的情况，而我们可以让ParticlePost只在与水面重叠时显示，这样便可解决重叠问题了。<br>　　为此我们要用上模板测试，让水面写入特定的模板值，然后在ParticlePost做判定（假设水面写入值为2）：<br><img src="https://musoucrow.github.io/images/veg/20.png" alt="20"><br>　　限于篇幅，关于添加Pass的做法还请自行查阅源码。看看效果吧：<br><img src="https://musoucrow.github.io/images/veg/21.png" alt="21"><br>　　很棒很棒，这下算是解决粒子与水面的问题了。尽管在水面时事实上是有重叠的，看着效果还行就凑合吧。由此延伸可以说是半透明对象与水面的一种解决方案了。<br>　　最后是编辑器相关，只能写死数值显然是不好的，这里我使用了VEG提供的定义代码段功能，在<code>VFXParticleOutput.cs</code>的<code>additionalReplacements</code>变量添加，并在模板里调用即可：<br><img src="https://musoucrow.github.io/images/veg/22.png" alt="22"><br><img src="https://musoucrow.github.io/images/veg/23.png" alt="23">  </p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　VEG较之传统粒子最大的优势便是运算放在GPU以及开放源码可供修改了吧，可惜必须在支持Compute Shader的设备上才能运作。这一点注定它在手游里很难用得上了，只能期待老手机早日淘汰了……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;     &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　&lt;a href=&quot;https://muso
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>在URP实现水面效果</title>
    <link href="https://musoucrow.github.io/2020/09/06/lbbn_water/"/>
    <id>https://musoucrow.github.io/2020/09/06/lbbn_water/</id>
    <published>2020-09-06T12:21:34.000Z</published>
    <updated>2021-07-17T12:41:21.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>     </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　Demo的场景也到了做水面的时候了，在涉及技术之前首先要确定的是<strong>美术表达</strong>：当然大体上也就是<em>卡通水与写实水</em>的抉择，最终决定是做出《伊苏：起源》<br>那样的写实水（注重扭曲、透视、无形变），并在此之上现代化。<br><img src="https://musoucrow.github.io/images/lbbn_water/0.png" alt="0"></p>
<h2 id="上色"><a href="#上色" class="headerlink" title="上色"></a>上色</h2><p>　　首先我们先找个小池子作为试验场地——这样利于观测，那么很显然密室场景的熔岩就可以暂退了：<br><img src="https://musoucrow.github.io/images/lbbn_water/1.png" alt="1"><br>　　水面的本质很简单，它就是个面片而已（不论海浪）。最直接的第一步自然是上色：<br><img src="https://musoucrow.github.io/images/lbbn_water/2.png" alt="2"><br>　　上色之后自然是透视，把材质设置为<code>Transparent</code>，调整下透明度：<br><img src="https://musoucrow.github.io/images/lbbn_water/3.png" alt="3"><br>　　很好，其实对于一些游戏的低画质，这个水面已经是成品了。当然这也太捞了，继续演进——</p>
<h2 id="扭曲的准备"><a href="#扭曲的准备" class="headerlink" title="扭曲的准备"></a>扭曲的准备</h2><p>　　对于水面效果的重点自然是<strong>扭曲</strong>了，处于水中的部分都会因为光的折射而变化。当然我们实际做起来并不会遵照这些大道理，看着是那么回事就得了（图形学第一定律）。最简单的做法自然是把<strong>对象渲染完毕后的画面</strong>截获，水面材质再选取<strong>合适的画面部分</strong>显示，并基于此加入扭曲——<br>　　对于Built-In管线而言，想做到这点使用<code>GrabPass</code>即可，这方面的实现在《Unity Shader入门精要》已有详细做法。可是由于其设计不符合SRP的哲学，在URP已经被毙了，于是我们只能另寻他法了。<br>　　当然实际上也没那么麻烦，思想已经有了，找到对应的实现方法即可：对象渲染完毕后的画面生成在URP可以通过管线设置文件勾选<code>Opaque Texture</code>实现，然后便可在Shader声明<code>_CameraColorTexture</code>调用。<br><img src="https://musoucrow.github.io/images/lbbn_water/4.png" alt="4"><br>　　当然仅仅如此会有个问题：此图的生成时机是渲染所有<strong>非透明（Opaque）对象</strong>后，对于具有透明度的对象（Transparent）的渲染时机是在此之后的，这样水面里将会看不到Transparent对象了。对于此有两个解决方案：</p>
<ul>
<li>修改源码，将生成时机调到Transparent渲染之后。</li>
<li>利用<code>RenderFeature</code>自行在合适的时机生成画面Texture。</li>
</ul>
<p>　　经过项目实际情况的考虑，我选择修改源码（具体修改在<a href="https://github.com/MusouCrow/MyURP" target="_blank" rel="external">MyURP</a>）。在<code>Frame Debugger</code>可以看到渲染时机已经变为Transparent之后了：<br><img src="https://musoucrow.github.io/images/lbbn_water/5.png" alt="5"><br>　　做到这步只能算是准备好了子弹，接下来还要制造枪械：由于自带的Shader Pass的渲染时机并不在生成<code>_CameraColorTexture</code>之后，所以我们需要利用<code>RenderFeature</code>构建个渲染时机生成之后的环节。这里直接使用URP自带的<code>Render Objects</code>即可满足：<br><img src="https://musoucrow.github.io/images/lbbn_water/6.png" alt="6"><br>　　如此只要Shader里Tag名为<code>Grab</code>的Pass，都将会在此<code>RenderFeature</code>进行渲染。接下来便是完成Shader：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">SubShader</div><div class="line">&#123;</div><div class="line">    Pass</div><div class="line">    &#123;</div><div class="line">        Tags &#123; <span class="string">"LightMode"</span> = <span class="string">"Grab"</span> &#125;</div><div class="line"></div><div class="line">        Blend [_SrcBlend][_DstBlend]</div><div class="line">        ZWrite[_ZWrite]</div><div class="line">        Cull [_Cull]</div><div class="line"></div><div class="line">        HLSLPROGRAM</div><div class="line"></div><div class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> prefer_hlslcc gles</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> exclude_renderers d3d11_9x</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> target 2.0</span></div><div class="line"></div><div class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> vertex Vert</span></div><div class="line">        <span class="meta">#<span class="meta-keyword">pragma</span> fragment Frag</span></div><div class="line"></div><div class="line">        <span class="meta">#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"</span></div><div class="line"></div><div class="line">        CBUFFER_START(UnityPerMaterial)</div><div class="line">        half4 _Color;</div><div class="line">        <span class="function">CBUFFER_END</span></div><div class="line"></div><div class="line">        <span class="title">TEXTURE2D</span>(<span class="params">_CameraColorTexture</span>); SAMPLER(sampler_CameraColorTexture);</div><div class="line"></div><div class="line">        <span class="keyword">struct</span> Attributes</div><div class="line">        &#123;</div><div class="line">            half4 positionOS : POSITION;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">struct</span> Varyings</div><div class="line">        &#123;</div><div class="line">            half4 positionCS : SV_POSITION;</div><div class="line">            half4 screenPos : TEXCOORD0;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="function">Varyings <span class="title">Vert</span>(<span class="params">Attributes input</span>)</span></div><div class="line">        &#123;</div><div class="line">            Varyings output;</div><div class="line">            VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);</div><div class="line"></div><div class="line">            output.positionCS = vertexInput.positionCS;</div><div class="line">            output.screenPos = ComputeScreenPos(output.positionCS);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> output;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function">half4 <span class="title">Frag</span>(<span class="params">Varyings input</span>) : SV_Target</span></div><div class="line">        &#123;</div><div class="line">            half3 color = SAMPLE_TEXTURE2D(_CameraColorTexture, sampler_CameraColorTexture, input.screenPos.xy / input.screenPos.w);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> half4(_Color.rgb * color, _Color.a);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ENDHLSL</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　Shader实现与一般形式十分相似，主要在于用上了<code>_CameraColorTexture</code>以及<code>ComputeScreenPos</code>函数，看看效果先：<br><img src="https://musoucrow.github.io/images/lbbn_water/7.png" alt="7"><br>　　看得出效果还是有所不同的，毕竟现在水面显示的不再是一层半透明蓝色了，而是原有画面的基础上调色。现在万事俱备，只欠东风了——</p>
<h2 id="扭曲的实现"><a href="#扭曲的实现" class="headerlink" title="扭曲的实现"></a>扭曲的实现</h2><p>　　实现扭曲我们需要一张表达水面的法线贴图，或者噪声贴图也行。本质上是偏移UV，以产生扭曲的结果。我选择使用法线贴图，因为后续也有用到。<br>　　水面法线贴图的生产我并不了解，目前是随便找张不规则图形的基础上使用Unity自带的<code>Create from Grayscale</code>生成的，效果居然还不错：<br><img src="https://musoucrow.github.io/images/lbbn_water/8.png" alt="8"><br>　　应用起来也很简单，获取法线贴图的xy数据加到<code>screenPos.xy</code>即可。当然仅此而已的话水面是不会动的，所以我们还可以加个与时间挂钩的偏移值，以推动法线贴图的uv，便可产生动起来的效果：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">half4 <span class="title">Frag</span>(<span class="params">Varyings input</span>) : SV_Target</span></div><div class="line">&#123;</div><div class="line">    half2 speed = _Speed * _Time.y * <span class="number">0.01</span>;</div><div class="line">    half3 bump = UnpackNormal(SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, input.uv.zw + speed)).rgb;</div><div class="line">    half2 offset = bump.xy;</div><div class="line">    input.screenPos.xy += offset * input.screenPos.z;</div><div class="line"></div><div class="line">    half3 color = SAMPLE_TEXTURE2D(_CameraColorTexture, sampler_CameraColorTexture, input.screenPos.xy / input.screenPos.w);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> half4(_Color.rgb * color, _Color.a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_water/9.gif" alt="9">  </p>
<p>　　不错不错，对于某些游戏而言，到了这步也算完成了。但还不够——</p>
<h2 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h2><p>　　目前有一个很明显的不足：虽然有了扭曲，但水面还是平平的一片蓝色，显然是缺乏明暗的体现。此时先前的法线贴图便可再次派上用场了：结合法线来做漫反射（Diffuse）效果。当然我们还不能直接使用取得的法线，还得将其转换至世界空间才行。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function">Varyings <span class="title">Vert</span>(<span class="params">Attributes input</span>)</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line">    VertexNormalInputs normalInput = GetVertexNormalInputs(input.normalOS, input.tangentOS);</div><div class="line">    half3 viewDirWS = GetCameraPositionWS() - vertexInput.positionWS;</div><div class="line">    </div><div class="line">    output.TtoW0 = half4(normalInput.tangentWS.x, normalInput.bitangentWS.x, normalInput.normalWS.x, viewDirWS.x);  </div><div class="line">    output.TtoW1 = half4(normalInput.tangentWS.y, normalInput.bitangentWS.y, normalInput.normalWS.y, viewDirWS.y);  </div><div class="line">    output.TtoW2 = half4(normalInput.tangentWS.z, normalInput.bitangentWS.z, normalInput.normalWS.z, viewDirWS.z);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">half4 <span class="title">Frag</span>(<span class="params">Varyings input</span>) : SV_Target</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 书接上文的bump</span></div><div class="line">    bump = normalize(half3(dot(input.TtoW0.xyz, bump), dot(input.TtoW1.xyz, bump), dot(input.TtoW2.xyz, bump)));</div><div class="line">    Light light = GetMainLight();</div><div class="line">    ...</div><div class="line"></div><div class="line">    color = Diffuse(color, light.direction, bump);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">half3 <span class="title">Diffuse</span>(<span class="params">half3 color, half3 lightDir, half3 normal</span>)</span></div><div class="line">&#123;</div><div class="line">    half NDotL = dot(normal, lightDir) + <span class="number">0.5</span> * <span class="number">0.5</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> color * NDotL;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这里漫反射用的是半兰伯特（Half-Lambert），这是为了保证水面的亮度足够，看看效果：<br><img src="https://musoucrow.github.io/images/lbbn_water/10.gif" alt="10"><br>　　嗯，有点味道了。再加个高光看看吧：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function">half3 <span class="title">Specular</span>(<span class="params">half3 color, half3 lightDir, half3 viewDir, half3 normal</span>)</span></div><div class="line">&#123;</div><div class="line">    half3 halfVec = normalize(lightDir + viewDir);</div><div class="line">    half NdotH = dot(normal, halfVec);</div><div class="line">    NdotH = saturate(NdotH);</div><div class="line"></div><div class="line">    half v = pow(NdotH, _Smoothness);</div><div class="line">    v *= _SpecularStrength;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> color + color * v;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_water/11.gif" alt="11"><br>　　越来越有味了，不过感觉这种高光不够突出光点，加个Step试试：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">half v = pow(NdotH, _Smoothness);</div><div class="line">v = step(_SpecularRamp, v);</div><div class="line">v *= _SpecularStrength;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_water/12.gif" alt="12"><br>　　不错不错，就这样吧，到实际场合看看。</p>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p><img src="https://musoucrow.github.io/images/lbbn_water/13.gif" alt="13"><br>　　目前的效果如上，总的来说算是OK了，但感觉还是差了点什么……没错，就是<strong>反射</strong>。起初我很自然而然的脑补认为要让周边的岩石草木投射在水面，为此我尝试了各种方案（反射探针、反射摄像机、平面反射……）都不满意，最终发现这纯属脑补了。实际由于视角原因是达不到那样的效果的，能够反射的内容基本会与折射重叠。醒悟之后发现最合适的反射内容只有纵身跳入的人物以及天空罢了：前者的出现场合太少了，对于后者与其用各种反射手段，还不如直接<strong>弄张天空贴图</strong>完事。  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">half4 <span class="title">Frag</span>(<span class="params">Varyings input</span>) : SV_Target</span></div><div class="line">&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    half3 texColor = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv.xy + speed);</div><div class="line">    half3 color = lerp(<span class="number">1</span>, texColor, _Fresnel);</div><div class="line">    color = Diffuse(color, light.direction, bump);</div><div class="line">    color *= SAMPLE_TEXTURE2D(_CameraColorTexture, sampler_CameraColorTexture, input.screenPos.xy / input.screenPos.w);</div><div class="line">    color = Specular(color, light.direction, viewDir, bump);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> half4(_Color.rgb * color, _Color.a);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　弄了张天空贴图，结合扭曲所用的偏移值进行uv移动，使用<code>_Fresnel</code>控制反射与折射的比例。注意这里的<code>_Fresnel</code>仅仅是个0-1的参数，并非是真正的菲涅耳系数（由于视角关系根本用不到）。来对比下吧：<br><img src="https://musoucrow.github.io/images/lbbn_water/14.png" alt="14"><br><img src="https://musoucrow.github.io/images/lbbn_water/15.png" alt="15"><br>　　这样的假反射在美术上的意义主要是能让水的颜色没那么单调，并且由于贴图是移动的，也带来了更多的动感。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　最后加上点互动特效，有那么点意思了：<br><img src="https://musoucrow.github.io/images/lbbn_water/16.gif" alt="16"><br>　　在加这波粒子特效时也遇到了不少问题，也多了一些想要实现的东西。限于篇幅只能留待日后了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;     &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　Demo的场景也到了做水面的时候了，在涉及
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>在Demo实装光照烘焙与探针</title>
    <link href="https://musoucrow.github.io/2020/08/02/lbbn_baked/"/>
    <id>https://musoucrow.github.io/2020/08/02/lbbn_baked/</id>
    <published>2020-08-02T13:04:33.000Z</published>
    <updated>2021-07-17T12:41:21.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>     </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　Demo目前的实时光影虽已完成，但考虑到不同的配置设备，还是得做出不同档次的光影方案。那么烘焙光照（<a href="https://docs.unity3d.com/Manual/Lightmappers.html" target="_blank" rel="external">Lightmapping</a>）与光照探针（<a href="https://docs.unity3d.com/Manual/LightProbes.html" target="_blank" rel="external">Light Probes</a>）就免不了了。本文将结合项目实际需求，讲述遇到的问题及解决方案。项目引擎版本为2019.4，渲染管线为URP。</p>
<h2 id="初步的烘焙"><a href="#初步的烘焙" class="headerlink" title="初步的烘焙"></a>初步的烘焙</h2><p>　　首先要做的自然是对Shader增加光照烘焙与探针的支持，照抄URP的SimpleLit Shader即可。大致要点如下：</p>
<ul>
<li>Shader添加multi_compile：<code>LIGHTMAP_ON</code>与<code>_MIXED_LIGHTING_SUBTRACTIVE</code>，这表示Shader会参与光照贴图与混合光照</li>
<li>顶点着色器参数添加<code>half2 lightmapUV : TEXCOORD1;</code>，这是光照贴图的UV</li>
<li>片元着色器参数添加<code>DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 1);</code>，这是URP自带的宏，根据LIGHTMAP_ON决定配置光照烘焙或探针的参数（lightmapUV or vertexSH），最后的参数<code>1</code>决定是第几个TEXCOORD</li>
<li>在顶点着色器调用<code>OUTPUT_LIGHTMAP_UV(lightmapUV, lightmapScaleOffset, OUT)</code>与<code>OUTPUT_SH(normalWS, OUT)</code>宏，它们将根据情况配置lightmapUV与vertexSH</li>
<li>在片元着色器对光照贴图或探针进行取色（<code>SAMPLE_GI(lmName, shName, normalWSName)</code>），最后将之加入到着色环节即可</li>
<li>若是想要烘焙模式下也能接受实时阴影，记得调用<code>MixRealtimeAndBakedGI</code>函数</li>
</ul>
<p>　　总的来说都封装好了，照着拼凑而已。那么事不宜迟，直接按照默认的烘焙配置整个看看，记得要将GameObject的Static里的<code>Contribute GI</code>勾选方可参与烘焙：<br><img src="https://musoucrow.github.io/images/lbbn_baked/0.png" alt="0"><br>　　看着似乎还不错，那么对比下实时看看吧：<br><img src="https://musoucrow.github.io/images/lbbn_baked/1.png" alt="1"><br>　　这么一看还是有不少差距的，必须要让烘焙与实时的效果高度接近才行呐——</p>
<h2 id="ShadowMask"><a href="#ShadowMask" class="headerlink" title="ShadowMask"></a>ShadowMask</h2><p>　　经过与烘焙设置一番斗智斗勇后，我发现我要的仅仅是让<strong>阴影烘焙</strong>，以节省阴影的运算罢了。什么全局光照、烘焙自带的着色等等都是不需要的。为此我尝试过不少骚操作：生成光照贴图后进行二值化处理、直接在Shader对烘焙色进行处理等……可惜这些方案都只是治标不治本，要么在流程上繁琐，要么性能不佳，要么无法应对所有情况。最终我把目光放在了烘焙三模式之一的<strong>ShadowMask</strong>，它将单独生成阴影贴图，那么若是我只用它，抛弃光照贴图，便可达到目的了。<br>　　不幸的是，URP并没有支持ShadowMask，官网显示仍处于In research状态。幸好网上有其他人做了<a href="https://catlikecoding.com/unity/tutorials/custom-srp/shadow-masks/" target="_blank" rel="external">实现ShadowMask的教程</a>，顺便也学习了一波可编程渲染管线（SRP）的基础知识。经过研究发现，ShadowMask的添加并不复杂，甚至可以说是URP主动将之关闭了（<em>严重怀疑是故意拖到后面做，显得有活干</em>）。当然这么干了之后就表示需要维护自己的URP版本了，顺便将之<a href="https://github.com/MusouCrow/MyURP" target="_blank" rel="external">开源</a>了。<br>　　SRP本质上是开放了一个可供用户定制的表层，多数核心功能还是封装好的。ShadowMask也不例外，其生成附属于烘焙模块。我们要做的只是添加一些设置，以及相应的Shader支持罢了：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 添加Shadowmask字段以让界面开启选项</span></div><div class="line">mixedLightingModes = SupportedRenderingFeatures.LightmapMixedBakeModes.Subtractive | SupportedRenderingFeatures.LightmapMixedBakeModes.IndirectOnly | SupportedRenderingFeatures.LightmapMixedBakeModes.Shadowmask</div><div class="line"></div><div class="line"><span class="comment">// 添加Shader关键字，以决定是否启用功能</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span> MixedLightingShadowmask = <span class="string">"SHADOWS_SHADOWMASK"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 根据条件设置相应的Shader关键字</span></div><div class="line">CoreUtils.SetKeyword(cmd, ShaderKeywordStrings.MixedLightingShadowmask, renderingData.lightData.supportsMixedLighting &amp;&amp;m_MixedLightingSetup == MixedLightingSetup.ShadowMask);</div></pre></td></tr></table></figure>
<p>　　Shader方面要做的调整也不多，URP本身自带ShadowMask的贴图变量<code>TEXTURE2D(unity_ShadowMask);</code>，其UV与光照贴图一致，复用即可。记得在Shader添加multi_compile <code>SHADOWS_SHADOWMASK</code>以判别是否处于ShadowMask模式下。  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(SHADOWS_SHADOWMASK) &amp;&amp; defined(LIGHTMAP_ON)</span></div><div class="line">    <span class="comment">// ShadowMask贴图只有R通道</span></div><div class="line">    half shadowMask = SAMPLE_TEXTURE2D(unity_ShadowMask, samplerunity_ShadowMask, lightmapUV).r;</div><div class="line"></div><div class="line">    <span class="comment">// 不超过光照Strength值</span></div><div class="line">    shadowMask = LerpWhiteTo(shadowMask, GetMainLightShadowStrength());</div><div class="line"></div><div class="line">    <span class="comment">// 加入到阴影着色中</span></div><div class="line">    light.shadowAttenuation = min(light.shadowAttenuation, shadowMask);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>　　大致要做的事情就这么多，烘焙设置除阴影方面外，能怎么快就怎么设置（反正也用不上光照贴图了），一般来说需要注意的有<code>Bounces</code>要设为1，不然阴影会不完整。<code>Flitering</code>将对阴影贴图做边缘柔和处理，<code>Lightmap Resolution</code>与<code>Lightmap Size</code>决定阴影质量，参考如下：<br><img src="https://musoucrow.github.io/images/lbbn_baked/2.png" alt="2"><br>　　另外需要注意的是，阴影精度很大程度上取决于模型的大小，因为<strong>一个模型只能有一张光照/阴影贴图</strong>，在贴图大小定死上限的前提下，模型越大贴图的解析度自然越低。那么来看看效果吧，<strong>图一为实时，图二为烘焙</strong>：<br><img src="https://musoucrow.github.io/images/lbbn_baked/3.jpg" alt="3"><br><img src="https://musoucrow.github.io/images/lbbn_baked/4.jpg" alt="4"><br>　　效果可以说是高度接近了，干掉了光照贴图后着色变得完全一致，阴影贴图在合理的设置下也达到了高度接近实时的效果。坡肥！</p>
<h2 id="光照探针"><a href="#光照探针" class="headerlink" title="光照探针"></a>光照探针</h2><p>　　现在虽然实现了高度接近实时的阴影烘焙，但显而易见，当人物走向阴影处便会是这样的结果：<br><img src="https://musoucrow.github.io/images/lbbn_baked/5.png" alt="5"><br>　　在某些游戏也许不太理会这种现象，但这也太捞了，光照探针便是为了解决这个问题而生的。通过在场景布置探针，将会根据动态对象附近的探针取色决定明暗度：<br><img src="https://musoucrow.github.io/images/lbbn_baked/6.gif" alt="6"><br>　　光照探针如果要手动布置那实在是太麻烦了，于是我使用了这个<a href="https://github.com/laurenth-personal/LightingTools.LightProbesVolumes" target="_blank" rel="external">插件</a>，通过简单的设置暴力的去平铺一波：<br><img src="https://musoucrow.github.io/images/lbbn_baked/12.png" alt="12"><br>　　根据官方文档说法，探针数量与性能成反比（但越多越精确）。但此插件平铺并不会把探针置于模型内部，以及对比了下《使命召唤手游》的光照探针，感觉还行：<br><img src="https://musoucrow.github.io/images/lbbn_baked/13.jpg" alt="13"><br>　　Shader方面没什么要改的，在URP获取光照函数<code>GetMainLight()</code>本身自带了对光照探针的着色处理（附加在<code>light.distanceAttenuation</code>中），由于不需要用到全局光照，之前的<code>OUTPUT_SH</code>之类的都可以删了。当然有个现象需要注意下：<br><img src="https://musoucrow.github.io/images/lbbn_baked/7.gif" alt="7"><br>　　可以看到在暗处时实在是太黑了（也许是放弃了全局光照导致），于是我们加个约束，将暗值约束在光照Strength到1：  </p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(LIGHTMAP_ON) &amp;&amp; defined(_MIXED_LIGHTING_SUBTRACTIVE)</span></div><div class="line">    mainLight.distanceAttenuation = lerp(GetMainLightShadowStrength(), <span class="number">1</span>, saturate(mainLight.distanceAttenuation));</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_baked/8.gif" alt="8"><br>　　很好，这下可以说是大功告成了！</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　最后演示下不同光影品质下的差别吧，分别为低、中、高：<br><img src="https://musoucrow.github.io/images/lbbn_baked/9.gif" alt="9"><br><img src="https://musoucrow.github.io/images/lbbn_baked/10.gif" alt="10"><br><img src="https://musoucrow.github.io/images/lbbn_baked/11.gif" alt="11"><br>　　话虽如此，可我发现目前直接把高品质光影扔到iPhone8下居然稳定59帧，太强了……<br><img src="https://musoucrow.github.io/images/lbbn_baked/14.png" alt="14"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;     &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　Demo目前的实时光影虽已完成，但考虑到不
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>在URP实现局部后处理描边</title>
    <link href="https://musoucrow.github.io/2020/07/05/urp_outline/"/>
    <id>https://musoucrow.github.io/2020/07/05/urp_outline/</id>
    <published>2020-07-05T13:23:45.000Z</published>
    <updated>2021-07-17T12:41:21.494Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>     </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　最近在Demo开发的过程中，遇到了一个细节问题，场景模型之间的边界感很弱：<br><img src="https://musoucrow.github.io/images/urp_outline/0.png" alt="0"><br>　　这样就会导致玩家难以分辨接下来面对的究竟是可以跳下去的台阶，亦或是要跳过去的台阶了。我们想到的解决方法便是给场景模型加个外描边，以此区分：<br><img src="https://musoucrow.github.io/images/urp_outline/1.png" alt="1"><br>　　整挺好，于是本文就来介绍一下实现思路。首先按照惯性我们直接采用了与人物相同的<a href="http://musoucrow.github.io/2020/05/10/lbbn_shading/">法线外扩描边</a>，但是效果却不尽人意：<br><img src="https://musoucrow.github.io/images/urp_outline/2.png" alt="2"><br>　　这完全就牛头不对马嘴，既然老办法不好使那就看看后处理描边吧。不过由于Demo使用的渲染管线是<a href="https://unity.com/srp/universal-render-pipeline#universal-render-pipeline-vs-built-rendering" target="_blank" rel="external">URP</a>，在后处理这块与原生完全不同。于是乎再一次踏上了踩坑之旅……<br>另附源码地址：<a href="https://github.com/MusouCrow/TypeOutline" target="_blank" rel="external">https://github.com/MusouCrow/TypeOutline</a></p>
<h2 id="RenderFeature"><a href="#RenderFeature" class="headerlink" title="RenderFeature"></a>RenderFeature</h2><p>　　经过调查发现，URP除了<a href="https://docs.unity3d.com/Manual/PostProcessingOverview.html" target="_blank" rel="external">Post-processing</a>之外，并没有<strong>直接提供</strong>屏幕后处理的方案。而URP的Post-processing尚不稳定（与原生产生了版本分裂），所以还是去寻找更稳妥的方式。根据<a href="https://github.com/Unity-Technologies/UniversalRenderingExamples" target="_blank" rel="external">官方例程</a>找到了实现屏幕后处理描边的方式，当然它们的描边实现方式很搓，并不适合我们项目。于是取其精华去其糟粕，发现了其实现后处理的关键：RenderFeature。<br><img src="https://musoucrow.github.io/images/urp_outline/3.png" alt="3"><br>　　RenderFeature系属于URP的配置三件套之一的Forward Renderer，你可以在该配置文件里添加想要的RenderFeature，可以将它看做是一种自定义的渲染行为，通过<a href="https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.html" target="_blank" rel="external">CommandBuffer</a>提交自己的渲染命令到任一渲染时点（如渲染不透明物体后、进行后处理之前）。URP默认只提供了RenderObjects这一RenderFeature，作用是<em>使用特定的材质，在某个渲染时机，对某些Layer的对象</em>进行一遍渲染。这显然不是我们所需要的，所幸官方例程里提供了我们想要的RenderFeature——<a href="https://github.com/MusouCrow/TypeOutline/blob/master/Assets/Source/RenderPasses/Blit.cs" target="_blank" rel="external">Blit</a>，它提供了<em>根据材质、且材质可获取屏幕贴图，并渲染到屏幕上</em>的功能：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">Shader <span class="string">"Custom/Test"</span></div><div class="line">&#123;</div><div class="line">    Properties</div><div class="line">    &#123;</div><div class="line">        [HideInInspector]_MainTex(<span class="string">"Base (RGB)"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> &#123;&#125;</div><div class="line">    &#125;</div><div class="line">    SubShader</div><div class="line">    &#123;</div><div class="line">        Pass</div><div class="line">        &#123;</div><div class="line">            HLSLPROGRAM</div><div class="line"></div><div class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> vertex vert</span></div><div class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> fragment frag</span></div><div class="line"></div><div class="line">            <span class="meta">#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"</span></div><div class="line"></div><div class="line">            TEXTURE2D(_MainTex);</div><div class="line">            SAMPLER(sampler_MainTex);</div><div class="line"></div><div class="line">            <span class="keyword">struct</span> Attributes</div><div class="line">            &#123;</div><div class="line">                float4 positionOS : POSITION;</div><div class="line">                float2 uv : TEXCOORD0;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">struct</span> Varyings</div><div class="line">            &#123;</div><div class="line">                float4 vertex : SV_POSITION;</div><div class="line">                float2 uv : TEXCOORD0;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="function">Varyings <span class="title">vert</span>(<span class="params">Attributes input</span>)</span></div><div class="line">            &#123;</div><div class="line">                Varyings output;</div><div class="line"></div><div class="line">                VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);</div><div class="line">                output.vertex = vertexInput.positionCS;</div><div class="line">                output.uv = input.uv;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> output;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function">float4 <span class="title">frag</span>(<span class="params">Varyings input</span>) : SV_Target</span></div><div class="line">            &#123;</div><div class="line">                float4 color = <span class="number">1</span> - SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv);</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> color;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ENDHLSL</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    FallBack <span class="string">"Diffuse"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/urp_outline/4.png" alt="4"><br>　　如此这般便实现了经典的反色效果，只要引入Blit的相关代码，然后在Forward Renderer文件进行RenderFeature的相关配置，并实现Shader与材质，即可生效。较之原生在MonoBehaviour做这种事，URP的设计明显更为合理。</p>
<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><p>　　后处理部署完毕，接下来便是描边的实现了。按照正统的屏幕后处理做法，应该是基于一些屏幕贴图（深度、法线、颜色等），使用Sobel算子之类做边缘检测。然而也有一些杂技做法，如官方例程以及<a href="https://alexanderameye.github.io/outlineshader" target="_blank" rel="external">此篇</a>。当然相同的是，它们都需要使用屏幕贴图作为依据来进行处理，不同的屏幕贴图会导致不一样的效果，如上文那篇就使用<strong>深度与法线结合</strong>的贴图，产生了内描边的效果。然而我们只需要外描边而已，所以使用深度贴图即可。<br>　　深度贴图在URP的获取相当简单，只需要在RenderPipelineAsset文件将<code>Depth Texture</code>勾选，然后便可在后处理Shader通过<code>_CameraDepthTexture</code>变量获取：<br><img src="https://musoucrow.github.io/images/urp_outline/5.png" alt="5"><br>　　有了深度贴图，那么接下来逮着别人的Shader抄就完事了——然而那些杂技做法的效果通通不行：官方的更适合美式风格，上文那篇的做法在某些场合会产生奇怪的斑点。于是只好按照《UnityShader入门精要》的写法来了：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">Shader <span class="string">"Custom/Outline"</span></div><div class="line">&#123;</div><div class="line">    Properties</div><div class="line">    &#123;</div><div class="line">        [HideInInspector]_MainTex(<span class="string">"Base (RGB)"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> &#123;&#125;</div><div class="line">        _Rate(<span class="string">"Rate"</span>, Float) = <span class="number">0.5</span></div><div class="line">        _Strength(<span class="string">"Strength"</span>, Float) = <span class="number">0.7</span></div><div class="line">    &#125;</div><div class="line">    SubShader</div><div class="line">    &#123;</div><div class="line">        Pass</div><div class="line">        &#123;</div><div class="line">            HLSLPROGRAM</div><div class="line"></div><div class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> vertex vert</span></div><div class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> fragment frag</span></div><div class="line"></div><div class="line">            <span class="meta">#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"</span></div><div class="line"></div><div class="line">            TEXTURE2D(_MainTex);</div><div class="line">            SAMPLER(sampler_MainTex);</div><div class="line"></div><div class="line">            TEXTURE2D(_CameraDepthTexture);</div><div class="line">            SAMPLER(sampler_CameraDepthTexture);</div><div class="line">            float4 _CameraDepthTexture_TexelSize;</div><div class="line"></div><div class="line">            <span class="keyword">float</span> _Rate;</div><div class="line">            <span class="keyword">float</span> _Strength;</div><div class="line"></div><div class="line">            <span class="keyword">struct</span> Attributes</div><div class="line">            &#123;</div><div class="line">                float4 positionOS : POSITION;</div><div class="line">                float2 uv : TEXCOORD0;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">struct</span> Varyings</div><div class="line">            &#123;</div><div class="line">                float4 vertex : SV_POSITION;</div><div class="line">                float2 uv[<span class="number">9</span>] : TEXCOORD0;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="function">Varyings <span class="title">vert</span>(<span class="params">Attributes input</span>)</span></div><div class="line">            &#123;</div><div class="line">                Varyings output;</div><div class="line"></div><div class="line">                VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);</div><div class="line">                output.vertex = vertexInput.positionCS;</div><div class="line"></div><div class="line">                output.uv[<span class="number">0</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">-1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">1</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">0</span>, <span class="number">-1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">2</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">1</span>, <span class="number">-1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">3</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">0</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">4</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">0</span>, <span class="number">0</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">5</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">1</span>, <span class="number">0</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">6</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">7</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">0</span>, <span class="number">1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">8</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">1</span>, <span class="number">1</span>) * _Rate;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> output;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function">float4 <span class="title">frag</span>(<span class="params">Varyings input</span>) : SV_Target</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">const</span> half Gx[<span class="number">9</span>] = &#123;</div><div class="line">                    <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span>,</div><div class="line">                    <span class="number">-2</span>,  <span class="number">0</span>,  <span class="number">2</span>,</div><div class="line">                    <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span></div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">const</span> half Gy[<span class="number">9</span>] = &#123;</div><div class="line">                    <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>,</div><div class="line">                    <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,</div><div class="line">                    <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">1</span></div><div class="line">                &#125;;</div><div class="line">                </div><div class="line">                <span class="keyword">float</span> edgeY = <span class="number">0</span>;</div><div class="line">                <span class="keyword">float</span> edgeX = <span class="number">0</span>;    </div><div class="line">                <span class="keyword">float</span> luminance = <span class="number">0</span>;</div><div class="line"></div><div class="line">                float4 color = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv[<span class="number">4</span>]);</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">                    <span class="keyword">float</span> depth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, sampler_CameraDepthTexture, input.uv[i]);</div><div class="line">                    luminance = LinearEyeDepth(depth, _ZBufferParams) * <span class="number">0.1</span>;</div><div class="line">                    edgeX += luminance * Gx[i];</div><div class="line">                    edgeY += luminance * Gy[i];</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">float</span> edge = (<span class="number">1</span> - abs(edgeX) - abs(edgeY));</div><div class="line">                edge = saturate(edge);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> lerp(color * _Strength, color, edge);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ENDHLSL</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    FallBack <span class="string">"Diffuse"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/urp_outline/6.png" alt="6"><br>　　很棒，但是可以看到，身为一般物件的方砖也被描边了，可我们想要的只是场景描边而已——于是进入了最后的难题：对<strong>特定对象</strong>的后处理。</p>
<h2 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h2><p>　　首先我们参考<a href="https://indienova.com/indie-game-development/stencil-buffer-4/" target="_blank" rel="external">原生下的做法</a>，利用模板测试的特性，对特定对象的Shader写入模板值，然后在后处理时根据模板值做判断是否处理，确实是个绝妙的做法——很可惜，在URP下我找不到能够生效的做法。根据上文那篇需要渲染出深度法线结合的屏幕贴图的需要，作者实现了一个新的RenderFeature：根据渲染对象们的某个Pass，渲染成一张新的屏幕贴图（可选择使用特定的材质，若不使用则是Pass的结果）。并可作为全局变量供后续的后处理Shader使用。我将之命名为<a href="https://github.com/MusouCrow/TypeOutline/blob/master/Assets/Source/RenderPasses/RenderToTexture.cs" target="_blank" rel="external">RenderToTexture</a>，这也是后处理常用的一种技术。<br>　　有了这个便有了新的想法：为所有渲染对象的Shader添加新的Pass（名为Mask），该Pass根据参数配置决定渲染成怎样的颜色（需要描边为白色，不需要为黑色）。如此渲染成屏幕贴图后便可作为描边Shader的参考（下称Mask贴图），决定是否需要描边：<br><img src="https://musoucrow.github.io/images/urp_outline/7.png" alt="7"><br>　　注意要为Mask贴图的底色设置为非黑色，否则与底色接壤的物件会描边失败。那么见证成果吧：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">Shader <span class="string">"Custom/Outline"</span></div><div class="line">&#123;</div><div class="line">    Properties</div><div class="line">    &#123;</div><div class="line">        [HideInInspector]_MainTex(<span class="string">"Base (RGB)"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> &#123;&#125;</div><div class="line">        _Rate(<span class="string">"Rate"</span>, Float) = <span class="number">0.5</span></div><div class="line">        _Strength(<span class="string">"Strength"</span>, Float) = <span class="number">0.7</span></div><div class="line">    &#125;</div><div class="line">    SubShader</div><div class="line">    &#123;</div><div class="line">        Pass</div><div class="line">        &#123;</div><div class="line">            HLSLPROGRAM</div><div class="line"></div><div class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> vertex vert</span></div><div class="line">			<span class="meta">#<span class="meta-keyword">pragma</span> fragment frag</span></div><div class="line"></div><div class="line">            <span class="meta">#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"</span></div><div class="line"></div><div class="line">            TEXTURE2D(_MainTex);</div><div class="line">            SAMPLER(sampler_MainTex);</div><div class="line"></div><div class="line">            TEXTURE2D(_CameraDepthTexture);</div><div class="line">            SAMPLER(sampler_CameraDepthTexture);</div><div class="line">            float4 _CameraDepthTexture_TexelSize;</div><div class="line"></div><div class="line">            TEXTURE2D(_MaskTexture);</div><div class="line">            SAMPLER(sampler_MaskTexture);</div><div class="line"></div><div class="line">            <span class="keyword">float</span> _Rate;</div><div class="line">            <span class="keyword">float</span> _Strength;</div><div class="line"></div><div class="line">            <span class="keyword">struct</span> Attributes</div><div class="line">            &#123;</div><div class="line">                float4 positionOS : POSITION;</div><div class="line">                float2 uv : TEXCOORD0;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">struct</span> Varyings</div><div class="line">            &#123;</div><div class="line">                float4 vertex : SV_POSITION;</div><div class="line">                float2 uv[<span class="number">9</span>] : TEXCOORD0;</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="function">Varyings <span class="title">vert</span>(<span class="params">Attributes input</span>)</span></div><div class="line">            &#123;</div><div class="line">                Varyings output;</div><div class="line"></div><div class="line">                VertexPositionInputs vertexInput = GetVertexPositionInputs(input.positionOS.xyz);</div><div class="line">                output.vertex = vertexInput.positionCS;</div><div class="line"></div><div class="line">                output.uv[<span class="number">0</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">-1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">1</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">0</span>, <span class="number">-1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">2</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">1</span>, <span class="number">-1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">3</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">0</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">4</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">0</span>, <span class="number">0</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">5</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">1</span>, <span class="number">0</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">6</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">-1</span>, <span class="number">1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">7</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">0</span>, <span class="number">1</span>) * _Rate;</div><div class="line">                output.uv[<span class="number">8</span>] = input.uv + _CameraDepthTexture_TexelSize.xy * half2(<span class="number">1</span>, <span class="number">1</span>) * _Rate;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> output;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="function">float4 <span class="title">frag</span>(<span class="params">Varyings input</span>) : SV_Target</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">const</span> half Gx[<span class="number">9</span>] = &#123;</div><div class="line">                    <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span>,</div><div class="line">                    <span class="number">-2</span>,  <span class="number">0</span>,  <span class="number">2</span>,</div><div class="line">                    <span class="number">-1</span>,  <span class="number">0</span>,  <span class="number">1</span></div><div class="line">                &#125;;</div><div class="line"></div><div class="line">                <span class="keyword">const</span> half Gy[<span class="number">9</span>] = &#123;</div><div class="line">                    <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>,</div><div class="line">                    <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,</div><div class="line">                    <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">1</span></div><div class="line">                &#125;;</div><div class="line">                </div><div class="line">                <span class="keyword">float</span> edgeY = <span class="number">0</span>;</div><div class="line">                <span class="keyword">float</span> edgeX = <span class="number">0</span>;    </div><div class="line">                <span class="keyword">float</span> luminance = <span class="number">0</span>;</div><div class="line"></div><div class="line">                float4 color = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, input.uv[<span class="number">4</span>]);</div><div class="line">                <span class="keyword">float</span> mask = <span class="number">1</span>;</div><div class="line">                </div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">                    mask *= SAMPLE_DEPTH_TEXTURE(_MaskTexture, sampler_MaskTexture, input.uv[i]);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (mask == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> color;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">                    <span class="keyword">float</span> depth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, sampler_CameraDepthTexture, input.uv[i]);</div><div class="line">                    luminance = LinearEyeDepth(depth, _ZBufferParams) * <span class="number">0.1</span>;</div><div class="line">                    edgeX += luminance * Gx[i];</div><div class="line">                    edgeY += luminance * Gy[i];</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">float</span> edge = (<span class="number">1</span> - abs(edgeX) - abs(edgeY));</div><div class="line">                edge = saturate(edge);</div><div class="line"></div><div class="line">                <span class="keyword">return</span> lerp(color * _Strength, color, edge);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ENDHLSL</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    FallBack <span class="string">"Diffuse"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/urp_outline/8.png" alt="8"><br>　　很棒，这下一般物件不会被描边了，局部后处理描边完成！当然随后遇到一个新的问题：<br><img src="https://musoucrow.github.io/images/urp_outline/9.png" alt="9"><br>　　这是因为透明（Transparent）模式下的对象按照通用做法是不会写入深度信息的（为了透明时能看到模型内部），然而我们描边需要的正是深度信息，由于树叶没有写入深度信息，所以在描边时当它不存在了，于是产生了这样的结果。解决方法也好办，在透明模式也写入深度信息（ZWrite）即可，毕竟我们的透明模型不需要看到内部，一举两得。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　其实期间还产生了投机心理，想着把角色自带的描边给废了，统一后处理，岂不美哉？很可惜搞出来的效果始终是不满意，法线外扩 is Good，没办法喽——<br>　　顺带一提，对于后处理的贴图创建记得将<code>msaaSamples</code>属性设为1，否则就会进行抗锯齿处理，那可真的炸裂……</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;     &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　最近在Demo开发的过程中，遇到了一个细节
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
      <category term="Post-process" scheme="https://musoucrow.github.io/tags/Post-process/"/>
    
  </entry>
  
  <entry>
    <title>3D瓦片地图采坑录</title>
    <link href="https://musoucrow.github.io/2020/06/07/lbbn_tile/"/>
    <id>https://musoucrow.github.io/2020/06/07/lbbn_tile/</id>
    <published>2020-06-07T13:26:33.000Z</published>
    <updated>2021-07-17T12:41:21.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>     </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　由于Demo的场景风格主打像素风格（这里的像素风格指具备一定精度的风格，而非时下流行的马赛克），故决定使用瓦片(Tile)地图来实现。也就是这种东西：<br><img src="https://musoucrow.github.io/images/lbbn_tile/0.jpeg" alt="0"><br>　　游戏地图将由一个个规范化的单位图片拼接而成，是为<strong>瓦片</strong>。在早期的像素风格游戏可谓相当流行，因其构造成本低（无论从技术上还是美术上），而却能灵活拼接出各种各样的地图。于是我们也打算如此，但是在3D游戏下搞瓦片地图确是罕见得很。于是便开始了采坑之旅，遂成本文。</p>
<h2 id="Sprytile"><a href="#Sprytile" class="headerlink" title="Sprytile"></a>Sprytile</h2><p>　　首先我们想到了在3D游戏下最接近瓦片地图思想的方案：<a href="https://docs.unity3d.com/Manual/CreatingEnvironments.html" target="_blank" rel="external">Terrain</a>，一般3D大地图都用类似方案：对一张平面地图进行各种揉捏形成地形，并在此之上涂抹各种图素。但可惜对于瓦片地图而言未免杀鸡用牛刀了，且在各方面都不能做到最适化，遂不考虑。<br>　　其次便是Unity官方自带的<a href="https://docs.unity3d.com/Manual/class-Tilemap.html" target="_blank" rel="external">2D Tilemap Editor</a>，对瓦片方面的需求倒是满足了，可惜3D瓦片并不只是在一张平面上进行，而通过多张平面旋转组成场景未免勉强，遂放弃。<br>　　既然在Unity这边行不通，那么便考虑生产端的Blender有什么合适的插件了。果不其然找到了<a href="https://chemikhazi.itch.io/sprytile" target="_blank" rel="external">Sprytile</a>，一看就明白，就是它了：<br><img src="https://musoucrow.github.io/images/lbbn_tile/1.png" alt="1"><br>　　使用准备好的tile图集，划分格子，在Blender以格子为单位进行填涂，每个格子将会是一个面，支持XYZ三个平面进行，在填涂完成后可作为正常模型进行各种操作。一切看起来是那么的美好，然后一路到了游戏后……</p>
<h2 id="过滤之殇"><a href="#过滤之殇" class="headerlink" title="过滤之殇"></a>过滤之殇</h2><p>　　以<a href="http://musoucrow.github.io/2020/05/10/lbbn_shading/">前篇</a>的截图便可看出问题所在：<br><img src="https://musoucrow.github.io/images/lbbn_tile/2.png" alt="2"><br>　　可以看到地板之间存在奇怪的黑线：<br><img src="https://musoucrow.github.io/images/lbbn_tile/3.png" alt="3"><br>　　根据插件文档提供的<a href="https://docs.sprytile.xyz/unity-settings/" target="_blank" rel="external">Unity导出说明</a>来看，必须要将地图贴图的过滤模式设置为<code>Point</code>，即邻近过滤：<br><img src="https://musoucrow.github.io/images/lbbn_tile/4.png" alt="4"><br>　　嗯，黑线果然消失了。那么问题便出在图片的过滤模式了，回去复习了下<a href="https://learnopengl-cn.github.io/01%20Getting%20started/06%20Textures/#_3" target="_blank" rel="external">纹理过滤</a>，答案昭然若揭：<br><img src="https://musoucrow.github.io/images/lbbn_tile/5.png" alt="5"><br>　　由于瓦片地图的习惯会将相关图素集成一块，形成连续的图块：<br><img src="https://musoucrow.github.io/images/lbbn_tile/6.png" alt="6"><br>　　那么在线性过滤下，图块的边缘像素在采样的时候将会<strong>混进相邻图块的颜色</strong>，于是那些奇怪的黑线便是这么来的。<br>　　也许读者会认为：不用线性过滤不就得了，毕竟插件作者也是这么认为的。可惜我们做的风格并不适合用邻近过滤，那将显得与人物画风差异过大且马赛克：<br><img src="https://musoucrow.github.io/images/lbbn_tile/7.png" alt="7"><br>　　细心观察上图底部，这是开启抗锯齿（MSAA）导致的。查阅资料后发现这是MSAA的特点导致，如此哪怕我们想靠邻近过滤解决也是没门……当然也考虑过更换为其他抗锯齿的方式，但是效果都不甚喜人，于是开始寻觅解决之道。</p>
<h2 id="无奈的解法"><a href="#无奈的解法" class="headerlink" title="无奈的解法"></a>无奈的解法</h2><p>　　首先考虑对tile图片进行下手：既然边缘会采样到相邻图块的像素，那么将它们隔开不就得了，如此：<br><img src="https://musoucrow.github.io/images/lbbn_tile/8.png" alt="8"><br>　　当然这么做的话要让Sprytile有所支持才行，好在它是<a href="https://github.com/ChemiKhazi/Sprytile" target="_blank" rel="external">开源</a>的。Blender的插件改起来也还算容易，毕竟会在界面提示标识好功能函数名。结果还是翻车了：<br><img src="https://musoucrow.github.io/images/lbbn_tile/9.jpg" alt="9"><br>　　瓦片之间出现了奇怪的透明点，仔细一想便明白了：<strong>透明像素一样会被采样到</strong>，所以会影响到透明度。于是迅速想到下个方案：让每个图块外扩边缘1像素，这样边缘的采样只会<strong>采样到相同颜色</strong>的像素：<br><img src="https://musoucrow.github.io/images/lbbn_tile/10.png" alt="10"><br>　　很不错，黑线什么的都消失了，哪怕是开着MSAA。同时美术也在Blender琢磨出了一种方法：在不做任何处理的贴图的基础上，将瓦片地图模型的UV全部缩小一点（参考值：0.96），如此便不会直接采样到边缘像素，从而以牺牲了一点点边缘效果解决了问题。<br>　　两者的效果最终是差不多的，但都是不完美的，在编辑器里便一目了然：<br><img src="https://musoucrow.github.io/images/lbbn_tile/11.png" alt="11"><br>　　可以看得出，格子之间的边界可谓泾渭分明，这是因为每个格子都是独立的mesh，它们并不是作为一个整体去渲染，也就不存在视为一个整体去采样。也就无法达到真正意义上2D游戏里要达到的效果（格子之间彻底融为一体）。要这么做有两种方式：第一种是根据瓦片地图的填涂情况最终生成大贴图与新模型，但这种方式相当不优化，并且会急剧增大包体。其次是仿照以前的2D游戏做法：游戏本身使用邻近过滤渲染，最后将渲染成图进行拉伸放大（放大方式采用线性过滤），但这是牺牲画面分辨率带来的。<br>　　经过以上总结可以看出，基本不存在非常完美的解决方案，只能矮子里拔大个了：UV缩小的方案从工序上最为简单，且显示效果也能接受（没对比过原版基本看不出太多异样）。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　一开始我们觉得这种瓦片地图1个格子就占2个三角形，面数会不会太高了。结果在参考其他游戏的情况时发现《闪之轨迹3》的一组垃圾桶的面数……<br><img src="https://musoucrow.github.io/images/lbbn_tile/12.jpg" alt="12"><br>　　嗯，一组垃圾桶的面数都完爆我整个瓦片地图模型了，法老控牛逼！<br>　　顺带一提的是，刚才提到的格子边界问题在Unity官方的2D Tilemap Editor也是存在的，只能说是瓦片地图的局限性了，好在离得远也看不太出。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;     &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　由于Demo的场景风格主打像素风格（这里的
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
      <category term="Blender" scheme="https://musoucrow.github.io/tags/Blender/"/>
    
      <category term="Tile" scheme="https://musoucrow.github.io/tags/Tile/"/>
    
  </entry>
  
  <entry>
    <title>Demo的卡通渲染方案</title>
    <link href="https://musoucrow.github.io/2020/05/10/lbbn_shading/"/>
    <id>https://musoucrow.github.io/2020/05/10/lbbn_shading/</id>
    <published>2020-05-10T02:01:34.000Z</published>
    <updated>2021-07-17T12:41:21.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>     </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　本篇文章按理来说在三月便该发布了，因为插队原因延宕至今，不过好饭不怕晚，干就完了奥利给！阅读本文最好拥有一定的图形学知识，当然看个热闹也是好的。<br>　　游戏画面的风格是一开始便要定下的大事，这在古法2D主要通过素材本身及后期调色决定，没有太多文章可作。而在现代游戏（尤其是3D）则会通过Shader在原本的元素上进行加料，如通过<strong>基于物理的渲染（PBR）</strong>将模型凸显出金属、石头、布料等材质倾向。而在早期为了凸显3D模型的立体感，一般会采用经验总结出来的<strong>冯氏光照模型(Blinn-Phong)</strong>，这也是许多3D软件的默认方案，那将会让我们的模型长成这样：<br><img src="https://musoucrow.github.io/images/lbbn_shading/0.png" alt="0"><br>　　嗯，这有够雕塑风的，让我想起了当初名震一时的猴赛雷，有着异曲同工之妙：<br><img src="https://musoucrow.github.io/images/lbbn_shading/1.jpeg" alt="1"><br>　　由此可见，对于讲究卡通风格的游戏，这种通用的光照模型肯定得枪毙，于是本文才会诞生。对于这类<strong>非写实方向</strong>的渲染方案，业界称之为<em>NPR</em>。而往下细分则是日式卡通渲染，其中佼佼者当属《罪恶装备》系列，而《崩坏3rd》也是不少人在这方面的启蒙者。当然美术这一块没有绝对的风格一致，渲染也不例外，所以Demo里的卡通渲染方案乃是个人的方案，不代表业界的标准实现与效果。<br>　　Demo基于Unity2019.3开发，渲染管线为URP7.3.1，采用直接编写Shader的方式（HLSL），将一一介绍其中要点。本文所谓的卡通效果以<strong>日式2D赛璐璐风格</strong>为准，不论厚涂之类的风格。  </p>
<h2 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h2><p>　　首先我们先抛开一切：冯氏光照不好那咱们就是了。直接把贴图显示了，什么料都不要加。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据uv坐标获取对应贴图上的颜色</span></div><div class="line"></div><div class="line">half4 color = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv);</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/2.png" alt="2"><br>　　嗯，虽然很原始，但好歹没那股恶心感了，把投影也加上：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 根据渲染管线提供的shadowCoord获取光照信息，并计算出投影颜色</span></div><div class="line"></div><div class="line">Light mainLight = GetMainLight(shadowCoord);</div><div class="line">color *= mainLight.color * (mainLight.distanceAttenuation * mainLight.shadowAttenuation);</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/3.png" alt="3"><br>　　哎呀，有了投影瞬间立体起来了，开始有《塞尔达传说：风之杖》内味了：<br><img src="https://musoucrow.github.io/images/lbbn_shading/4.jpeg" alt="4"><br>　　要加投影记得添加Pass：ShadowCaster，并且获取光照信息也需要开启一定的宏，这些并非本文重点，详情请查阅URP的Shader实现。<br>　　但只是如此还不够：颜色太鲜艳了，看久了会累。那么有两种方案：调色与着色，调色则是进行总体的颜色调节，使之不要这么鲜艳，着色则是<strong>根据模型面对光的吸收度</strong>决定明暗。这里还是选择着色：它将会增强模型的立体感。<br>　　这里说的着色其实就是冯氏光照中的<strong>漫反射（Diffuse）</strong>：当光照射到非平面的物体上，将根据与光的夹角决定吸收度（越是与光垂直的面越亮）。而在3D模型中，每个模型面都会往上发射一条射线，也就事实上构成了一条垂直于平面向量，这在数学中称之为<strong>法线（Normal）</strong>。我们可以使用<strong>向量点积(Dot)</strong>获取法线与光照方向之间的夹角，以此决定模型面的光亮程度。<br><img src="https://musoucrow.github.io/images/lbbn_shading/5.png" alt="5">  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">half NDotL = dot(normal, lightDir); <span class="comment">// 计算法线与光照方向的夹角系数</span></div><div class="line">NDotL = saturate(NDotL); <span class="comment">// 保证系数在0-1</span></div><div class="line">color *= NDotL;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/6.png" alt="6"><br>　　啊这，这不是跟一开始差不多么？这是当然的，因为一开始便是冯氏光照的方案。其漫反射的思想其实并无问题，但原罪在于<strong>过渡太丰富了</strong>，每个模型面与光的夹角都不同，导致颜色都不同。整个模型看起来就过于立体，以至于产生了雕塑感。<br>　　而在日式2D卡通的世界里（尤其是赛璐璐），着色并不会有太详细的过渡，只是到了某个角度统一涂暗，反之为亮，最多在两者之间加点过渡而已。那么便基于此思想进行改造即可：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">half NDotL = dot(normal, lightDir); <span class="comment">// 计算法线与光照方向的夹角系数</span></div><div class="line"></div><div class="line"><span class="comment">// 根据_DiffuseRange约束系数，输出0-1的值</span></div><div class="line"><span class="comment">// 由于使用了smoothstep，在接近_DiffuseRange上下限时会做柔滑处理，使之产生过渡感</span></div><div class="line"><span class="comment">// _DiffuseRange的参考值为0.5, 0.7</span></div><div class="line">half v = smoothstep(_DiffuseRange[<span class="number">0</span>], _DiffuseRange[<span class="number">1</span>], NDotL);</div><div class="line"></div><div class="line"><span class="comment">// 根据根据v的值决定输出_LightRange范围内的值</span></div><div class="line"><span class="comment">// _LightRange的参考值为0.9, 1</span></div><div class="line">v = lerp(_LightRange[<span class="number">0</span>], _LightRange[<span class="number">1</span>], v);</div><div class="line"></div><div class="line">color *= v;</div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/7.png" alt="7"><br>　　还不错，这下便为模型划分了明暗，并在两者之间做了过渡，这种方式称之为<strong>二值化</strong>。着色并没有采用很明显的暗色，只是想凸显一点立体感，以及让画面更柔和，不那么刺眼罢了。当然目前可以说是非常不明显了，这是有原因的，且待后续调色。</p>
<h2 id="描边"><a href="#描边" class="headerlink" title="描边"></a>描边</h2><p>　　接下来需要补上日式2D卡通不可或缺的一部分：<strong>描边（Outline）</strong>，描边有助于划分物体，明确空间上的层次，并提供一定的风味。<br>　　关于描边的实现方式，业界主要有<strong>模型多画一遍并将边缘外扩</strong>以及<strong>屏幕后处理</strong>的方案。前者方案在日式游戏较为流行，优点在于实现简单，性能也还算过得去，缺点是必须开抗锯齿不然没眼看。后者实现方式多样，并且根据实现方式能达到不一样的效果（如一定程度的内描边），但有些更适合搭配<strong>延迟渲染（Deferred Rendering）</strong>，而这代表着对显卡带宽与光照方案有要求。<br>　　另外在显示方案上也有区别，有追求任何缩放下描边大小不变的，也有自然派的。有让描边纯色的，也有要让描边根据贴图颜色决定的。本人采用的是<em>模型外扩、自然缩放、根据贴图颜色决定</em>的描边方案。<br>　　多显示一遍模型在Unity增加一个Pass即可，并且开启正面剔除（只显示背面，不然会干扰到正常模型）。并且在顶点着色器对模型顶点进行外扩，外扩的方向由所在模型面的法线决定。而颜色方面则在片元着色器根据贴图颜色进行置暗显示即可：  </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 顶点着色器</span></div><div class="line"></div><div class="line">half4 viewPos = mul(UNITY_MATRIX_MV, input.positionOS); <span class="comment">// 将顶点从模型空间转为观察空间</span></div><div class="line">half3 normal = mul((float3x3)UNITY_MATRIX_IT_MV, input.normalOS); <span class="comment">// 同上，将法线转为观察空间</span></div><div class="line">viewPos += float4(normalize(normal), <span class="number">0</span>) * <span class="number">0.0075</span>; <span class="comment">// 顶点沿法线外扩</span></div><div class="line">output.positionCS = mul(UNITY_MATRIX_P, viewPos); <span class="comment">// 将顶点从观察空间转为裁剪空间</span></div><div class="line"></div><div class="line">output.uv = TRANSFORM_TEX(input.texcoord, _BaseMap); <span class="comment">// 提取uv</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> output;</div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 片源着色器</span></div><div class="line">color *= SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv); <span class="comment">// 提取贴图颜色</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> color * <span class="number">0.3</span>; <span class="comment">// 压暗</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/8.png" alt="8">  </p>
<p>　　果不其然，没有抗锯齿的话就很搓，跟早期的跑跑卡丁车似的。安排一波MSAA8x：<br><img src="https://musoucrow.github.io/images/lbbn_shading/9.png" alt="9"><br>　　哎，这就舒服多了，当然实际上由于小泥人的关系，4x和8x实际上看不出区别，而2x也算可以接受的效果，这么看来能耗也还好。当然关于描边实际上还有内描边这个大题，但小泥人不需要这么丰富的细节，这就很舒服。</p>
<h2 id="发光"><a href="#发光" class="headerlink" title="发光"></a>发光</h2><p>　　目前模型的显示还欠缺一些发光的元素，如一般头发和武器会有一些高光效果。这在冯氏光照称之为<strong>镜面光照（Specular）</strong>：本质上与漫反射一样，只是由视角方向与光照方向相加，并与法线做点积获得两者的夹角系数，如此便可实现根据摄像机与光照运动结合决定模型高光的位置。<br>　　当然仅此而已是不够的，显而易见仅此而已的话将会如漫反射一般范围很大，而高光实际上只需要一点即可。实际上会将之范围缩小：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">half3 halfVec = normalize(lightDir + viewDir); <span class="comment">// 将摄像头方向与光照方向相加</span></div><div class="line">half NdotH = dot(normal, halfVec); <span class="comment">// 与法线点积，获取夹角系数</span></div><div class="line">NdotH = saturate(NdotH); <span class="comment">// 保证在0-1</span></div><div class="line"></div><div class="line">half v = <span class="built_in">pow</span>(NdotH, _Smoothness); <span class="comment">// 缩小夹角系数的值，由于NdotH在0-1，所以pow后会变得更小，_Smoothness参考值为8-64</span></div><div class="line">color += color * v; <span class="comment">// 在原有颜色的基础上叠加</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/10.png" alt="10"><br>　　与之前一样，这样的高光过渡太强了，不够卡通，将之二值化：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">half v = <span class="built_in">pow</span>(NdotH, _Smoothness); <span class="comment">// 缩小夹角系数的值，由于NdotH在0-1，所以pow后会变得更小，_Smoothness参考值为8-64</span></div><div class="line">v = step(_SpecularRamp, v); <span class="comment">// 小于_SpecularRamp的值将为0，反之为1</span></div><div class="line">v = v * _SpecularStrength; <span class="comment">// 定义高光强度，参考值为0.2</span></div><div class="line"></div><div class="line">color += color * v; <span class="comment">// 在原有颜色的基础上叠加</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/11.png" alt="11"><br>　　这样的高光就更有手绘的感觉了，牛屎一块。但很显然对于头发而言光是一块牛屎高光是不够的，让美术自由的进行创作显然是更好的方案。于是引入了<strong>发光贴图（Emission）</strong>，其本身很简单：就是在最后把发光贴图的内容显示出来即可。而之所以要单独划分贴图而不是画死在原贴图，在于要自由的控制透明度甚至曝光，以及让发光参与单独的光照运算（与高光类似的方法，摄像机视角与光照方向相加后与法线点积）。<br><img src="https://musoucrow.github.io/images/lbbn_shading/12.png" alt="12">  </p>
<p>　　到了目前仍缺一个日式2D卡通的一个特性：<strong>边缘光（Rim）</strong>，一般为了表达物体处于光亮的环境下，属于光溢出的一种表达，有助于提升画面的层次感。实现原理也很简单：视角方向与法线点积，根据夹角系数取得当前视角下的模型边缘部分，为之加光即可。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">half VDotN = dot(viewDir, normal); <span class="comment">// 视角方向与法线点积，获取夹角系数</span></div><div class="line">VDotN = <span class="number">1</span> - saturate(VDotN); <span class="comment">// 取反，方便计算</span></div><div class="line"></div><div class="line">half v = smoothstep(_RimRange[<span class="number">0</span>], _RimRange[<span class="number">1</span>], VDotN); <span class="comment">// 与漫反射部分类似，做二值化，参考值为0.4-1</span></div><div class="line">v = step(<span class="number">0.5</span>, v); <span class="comment">// 小于0.5的部分都不要了</span></div><div class="line">v = v * _RimStrength; <span class="comment">// 设定边缘光强度，参考值为0.1</span></div><div class="line"></div><div class="line">color += color * v; <span class="comment">// 叠加</span></div></pre></td></tr></table></figure>
<p><img src="https://musoucrow.github.io/images/lbbn_shading/13.png" alt="13"><br>　　发光的构成大致如此，目前也许看起来不够明显，实是尚未调色所致，且看下文。</p>
<h2 id="调色"><a href="#调色" class="headerlink" title="调色"></a>调色</h2><p>　　先来看看目前的效果：<br><img src="https://musoucrow.github.io/images/lbbn_shading/14.png" alt="14"><br>　　首先是整体颜色风格不符合主题，这个场景属于有着岩浆的密室，应该符合昏暗以及灼热的色调，使用Split Toning进行调色：<br><img src="https://musoucrow.github.io/images/lbbn_shading/15.png" alt="15"><br>　　嗯，至少色调上像样了，但还是缺乏灼热的感觉，上Bloom看看：<br><img src="https://musoucrow.github.io/images/lbbn_shading/16.png" alt="16"><br>　　哎呀，看着只是稍微亮了点的样子，那是因为Bloom需要配合HDR使用，将颜色突破0-1的限制下进行运算，才能做到光溢出的效果：<br><img src="https://musoucrow.github.io/images/lbbn_shading/17.png" alt="17"><br>　　唔……这溢出的实在是有限，因为目前还处于Linear颜色空间，显示器对于颜色会进行处理，使得颜色之间的区间变小（明暗不明显），需要转成Gamma才能抵消之：<br><img src="https://musoucrow.github.io/images/lbbn_shading/18.png" alt="18"><br>　　成了，如此便得出了昏暗且灼热的场景风格，高对比度（亮者更亮、暗者更暗）的画面。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　这算是本人进入图形渲染的一个里程碑，感觉这的确是个美术活。技术不过是让你能进入赛道罢了，真正决定效果的还得看美术的理念。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;     &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　本篇文章按理来说在三月便该发布了，因为插队
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>移植贪吃蛇——从C#到C++</title>
    <link href="https://musoucrow.github.io/2020/04/07/snake_cpp/"/>
    <id>https://musoucrow.github.io/2020/04/07/snake_cpp/</id>
    <published>2020-04-07T07:30:33.000Z</published>
    <updated>2021-07-17T12:41:21.493Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　因为某些机缘巧合，引起了我对C++的重视。一时兴起，决定将两年前用Unity写的<a href="https://github.com/MusouCrow/Snake" target="_blank" rel="external">Snake</a>进行移植。经过两周的抽空，总算是<a href="https://github.com/MusouCrow/SnakeCPP" target="_blank" rel="external">完成</a>了。项目采用现代C++标准编写，采用<a href="https://cmake.org" target="_blank" rel="external">CMake</a>构建，图形库为<a href="http://www.libsdl.org" target="_blank" rel="external">SDL</a>。由于本次的重点不在于图形这块，所以没有使用原版的素材，采用矩形代替。<br>　　在工程实现上除了基本的业务外，还实现了C#的<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/event" target="_blank" rel="external">event</a>以及的Unity的GameObject与Component。<br>　　本文将从C#开发者的角度出发比较C++的不同点，最后总结其思想。由于本人在此之前<strong>从未有</strong>C++的工程经验，对于许多特性在此之前也是一知半解，对于一些事物的理解若有误还请指教。</p>
<h2 id="低成本封装"><a href="#低成本封装" class="headerlink" title="低成本封装"></a>低成本封装</h2><p>　　首先最引我瞩目的便是C++的参数传递，形如这般的函数：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; title, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</div></pre></td></tr></table></figure></p>
<p>　　由于C++的引用参数<code>string&amp;</code>性质，将值传入时不会发生拷贝，而是等于直接使用原变量。可以有效<strong>降低封装抽象的成本</strong>，加上<code>const</code>字段是为使得形如<code>&quot;123&quot;</code>这样的<strong>常量区对象</strong>也能传入。<br>　　当然这在C#也并不是没有，<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/ref" target="_blank" rel="external">ref</a>便是如此。但这在C#并不会下意识去用，毕竟在C++若是不用指针或引用作为参数的话可是会直接<strong>拷贝新对象</strong>的，而在C#直接使用也不会造成很大的负担（值类型直接拷贝，引用类型用指针）。<br>　　其次便是C++的内联函数了，作为函数宏的替代品之一。可以在编译时将函数展开为具体的内容，节省了一次函数调用的消耗。但内联函数需写在头文件中，若是关联项多，修改后便会增加编译时长。且展开量过大也会增大代码量，增加编译时长。但不失为一个降低封装成本的手段。</p>
<h2 id="明确的内存"><a href="#明确的内存" class="headerlink" title="明确的内存"></a>明确的内存</h2><p>　　其次与C#最大的不同便是对象的创建了，C++有着以下两种形式：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">A a = A();</div><div class="line">A* a = <span class="keyword">new</span> A();</div></pre></td></tr></table></figure></p>
<p>　　了解C++的自然晓得，前者在<strong>当前内存域下申请</strong>，后者<strong>在堆申请</strong>。而在C#则隐去了这个细节，而是设立固定的规则：</p>
<ul>
<li>引用对象使用指针，原则上在堆申请，若对象的生命周期存在于申请的函数里，则在栈申请——是为<strong>逃逸分析</strong>。</li>
<li>值对象在当前内存域下申请，且由于不是指针，变量传递会产生<strong>拷贝</strong>。除非使用ref、in、out等参数关键字。</li>
</ul>
<p>　　而C++的内存申请机制则带来了<strong>明确感</strong>，如在函数里申请生命周期只存在函数里的对象，需要明确的使用<code>A a = A();</code>方式。且在构建类的时候，对于那些不使用<code>A* a = new A();</code>创建方式的成员变量，其内存占用是<strong>明确的</strong>，在类对象申请内存的时候会一并申请，即这些成员变量在内存布局上可能是<strong>连续的</strong>。从这点来说可比C#要牛逼多了。</p>
<h2 id="相似的容器"><a href="#相似的容器" class="headerlink" title="相似的容器"></a>相似的容器</h2><p>　　在容器方面，C++与C#大体看起来是相似的，当然在API的爽度而言还是C#更胜一筹（C++17拉近了不少）。但实际上还是存在一些细节上的不同，就比如我们常用的Key-Value容器：C++的<a href="https://zh.cppreference.com/w/cpp/container/map" target="_blank" rel="external">std::map</a>与C#的<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.dictionary-2?view=netcore-3.1" target="_blank" rel="external">Dictionary</a>在实现乃至功能上就不一样。实际上std::map对应C#的应该是<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.sorteddictionary-2?view=netcore-3.1" target="_blank" rel="external">SortedDictionary</a>：它们都是基于红黑树实现，都是有序存储的表。而Dictionary则是基于哈希实现的，即我们俗称的哈希表，与之对应的是<a href="https://zh.cppreference.com/w/cpp/container/unordered_map" target="_blank" rel="external">std::unordered_map</a>。<br>　　通过命名能看出两种语言在这方面的倾向性：红黑树<strong>占用的内存更小</strong>，但查找和删除的时间复杂度都是<em>O(logn)</em>，而哈希查找和删除的时间复杂度都是<em>O(1)</em>。实际使用的时候感觉还是得权衡利弊，不能贪图方便就一直用一套。<a href="https://zh.cppreference.com/w/cpp/container/set" target="_blank" rel="external">std::set</a>与<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.hashset-1?view=netcore-3.1" target="_blank" rel="external">HashSet</a>这边也是类似的对应，以此类推。<br>　　在序列容器方面的对应倒是工整：<a href="https://zh.cppreference.com/w/cpp/container/vector" target="_blank" rel="external">std::vector</a>对应<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.list-1?view=netcore-3.1" target="_blank" rel="external">List</a>，都是不断扩容的数组容器。链表方面则是<a href="https://zh.cppreference.com/w/cpp/container/list" target="_blank" rel="external">std::list</a>对应<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.collections.generic.linkedlist-1?view=netcore-3.1" target="_blank" rel="external">LinkedList</a>。但<a href="https://zh.cppreference.com/w/cpp/container/array" target="_blank" rel="external">std::array</a>却无对应了，硬要说的话就是与C#的原生数组对应，毕竟这个容器出现的意义就是弥补与C语言兼容的原生数组。<br>　　顺带一提，在使用std::vector时由于会出现<strong>扩容复制</strong>的问题，需要考虑好成员对象的拷贝方案，乃至于内存泄漏的问题。</p>
<h2 id="智能的指针"><a href="#智能的指针" class="headerlink" title="智能的指针"></a>智能的指针</h2><p>　　内存管理是所有编程语言都无法绕开的点，绝大多数编程语言对于堆内存的管理都是采用垃圾回收的方式。而在C++的鸿蒙时代则与C语言一样，需要手动管理<strong>指向堆内存</strong>的指针。尽管也有<a href="https://zh.cppreference.com/w/cpp/memory/auto_ptr" target="_blank" rel="external">std::auto_ptr</a>这样的东西，但在功能上还不够全面。而手动管理内存将难以解决对象在多处被引用时将如何安全销毁的问题，为了实现这种机制也得做出不少妥协。<br>　　所幸随着时代的发展，现代C++迎来了<a href="https://docs.microsoft.com/zh-cn/cpp/cpp/smart-pointers-modern-cpp?view=vs-2019" target="_blank" rel="external">智能指针</a>，它基于引用计数的规则，将裸指针包装起来，当符合销毁条件后便可自动回收。智能指针有着几种具体的类实现，而其中最常用的是<a href="https://zh.cppreference.com/w/cpp/memory/shared_ptr" target="_blank" rel="external">std::share_ptr</a>，当它持有指针时将增加计数，反之同理将减少计数，最终归0销毁。但其较之垃圾回收有个致命的缺陷：<strong>相互引用</strong>时将一直保持计数，无法销毁。为此C++引入了<a href="https://zh.cppreference.com/w/cpp/memory/weak_ptr" target="_blank" rel="external">std::weak_ptr</a>：它不会增加计数，在计数归0时持有指针也随之销毁。如此对于相互引用的情况下，分清主次，合理分配share_ptr与weak_ptr即可解决无法销毁的问题。<br>　　智能指针在使用上总有一种外挂的感觉，需要成体系的去使用。不如内置的垃圾回收式语言来的方便，且写起来还是有一定的心智负担（相互引用），不过在性能而言较之垃圾回收更为优越（回收对象与时机都很明确，且是被动进行的）。</p>
<h2 id="模板与泛型"><a href="#模板与泛型" class="headerlink" title="模板与泛型"></a>模板与泛型</h2><p>　　C++的模板与C#的泛型表面上用起来很是相似，实则有所不同。以下对比两者的差异：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T, <span class="keyword">int</span> x&gt; <span class="comment">// C++支持模板参数，可填写整型或指针</span></div></pre></td></tr></table></figure></p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GenericList&lt;T&gt; <span class="keyword">where</span> T : Employee <span class="comment">// 使用System.Object不支持的方法时，需进行类型约束指定基类</span></div></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这么骚的操作见过么？</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> ... Args&gt;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Do</span><span class="params">(Args... args)</span> </span>&#123;</div><div class="line">    f(args ...);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>　　从实际使用体验与两者的命名可以看出，「模板」的本质是<strong>参数化代码生成</strong>，而「泛型」则是<strong>类型参数化</strong>。即泛型只是模板功能的一部分而已。模板能实现的其他功能，在C#则以其他方式代替了（如变长参数<a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/params" target="_blank" rel="external">params</a>）。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　从以上种种便能看出C++与C#在设计哲学上的不同，C#通过<strong>约束开发者行为</strong>从而达到<strong>更稳定健壮的结果</strong>，哪怕会失去一定的<strong>性能与灵活性</strong>，而C++则更依赖开发者<strong>自身的素质</strong>（如C++支持多重继承而C#仅仅支持单类+多接口继承）。<br>　　从个人的使用体验来看，现代C++并非不能作为业务开发语言。只是对开发者的素质要求较之一般语言更高，从招聘成本与项目稳定性而言是个问题。如此来看，除非有必要的性能敏感且需要一定封装的核心层（如游戏引擎），否则用C + 脚本语言或者C#/Java这类可上可下的语言是个更好的选择。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　因为某些机缘巧合，引起了我对C++的重视
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="C++" scheme="https://musoucrow.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Shader Graph踩坑实录</title>
    <link href="https://musoucrow.github.io/2020/03/08/shader_graph/"/>
    <id>https://musoucrow.github.io/2020/03/08/shader_graph/</id>
    <published>2020-03-08T09:41:18.000Z</published>
    <updated>2021-07-17T12:41:21.493Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　Demo也到了做渲染的时候了，经过一番鏖战后，算是大体完成了。但随着后续需求的到来，发现这套纯代码的Shader方案对于扩展、复用等方面有着诸多不便。于是便打起了<a href="https://unity.com/shader-graph" target="_blank" rel="external">Shader Graph</a>的主意……经过一番纠缠，于是有了本篇踩坑实录。另附<a href="https://github.com/MusouCrow/CustomShaderGraph" target="_blank" rel="external">源码地址</a>，但本篇并不会对其做讲解。基于Unity2020.1.0a20，渲染管线为URP7.18。</p>
<h2 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h2><p>　　首先要明确的是：Shader Graph不支持Builtin渲染管线，且尚未处于彻底成熟的阶段，哪怕是最新版本尚有不少缺陷。但瑕不掩瑜，且说其优劣：</p>
<ul>
<li>优点<ul>
<li>由于节点化与Sub Graph的存在，Shader的组装将变得相当容易，极大提升了模块化水平。</li>
<li>调整Property与Keyword变得相当方便，纯代码下将需要多些工序。</li>
<li>内置各种节点，降低了美术参与创作的门槛。</li>
<li>能够实时预览每个节点造成的变化预览，虽然对我而言没啥用。</li>
</ul>
</li>
<li>缺点<ul>
<li>编辑器尚不够稳定，经常会出现整个程序崩溃的情况。</li>
<li>生成的代码不够优化，比较暴力，存在各种分支判断、重复函数（也许最终会优化？）</li>
<li>由于Slot机制的原因，可能会出现很多运算集中在片元着色器中。</li>
<li>对于创建Pass并不友好，需要修改源码。</li>
</ul>
</li>
</ul>
<h2 id="来龙"><a href="#来龙" class="headerlink" title="来龙"></a>来龙</h2><p>　　其实一般的浅度Shader Graph使用者并不会如我这般踩这么多坑：直接使用内置的Graph模板进行创作即可。不幸的是，如前文所言：对于创建Pass并不友好，需要修改源码。于是便开始了踩坑之旅……<br>　　在默认情况下，Unity的Package将保存在工程的Library/PackageCache目录下，这样子是不能直接修改源码的（Library目录下的东西属于可再生物，随时会被覆盖），需将之搬迁至工程的Packages目录下。<br>　　对于考虑到日后Shader Graph的版本升级情况，所以尽可能的<strong>不要修改原工程的内容</strong>，而是尽量新建文件。但考虑到Shader Graph源码下存在不少inner元素，直接在外面写自己的内容也并非彻底可行。只能直接在Shader Graph包下进行添加文件的方式了，这也是要将之移至Packages目录的原因。<br>　　我要做的事情相当明确：<strong>新建一个自定义的Graph类型</strong>。在URP下已经自带Unlit与PBR两种类型了，于是本人便基于Unlit Graph并结合先前实现的Shader的特性进行新类型的创作。  </p>
<h2 id="去脉"><a href="#去脉" class="headerlink" title="去脉"></a>去脉</h2><p>　　我们能接触到Unlit Graph创建的起点便是Project区下右键菜单的<code>Create-&gt;Shader-&gt;Unlit Graph</code>了，直接在Shader Graph源码包下全局搜索<code>Create/Shader/Unlit Graph</code>即可找到：<br><img src="https://musoucrow.github.io/images/shader_graph/0.png" alt="0"><br>　　照葫芦画瓢在同目录下弄个新文件实现相同功能即可，这下我们便知道Unlit Graph的正主了：<code>UnlitMasterNode</code>。经过研究发现，它决定了在编辑器下Unlit Master Node的样式：<br><img src="https://musoucrow.github.io/images/shader_graph/1.png" alt="1"><br><img src="https://musoucrow.github.io/images/shader_graph/2.png" alt="2"><br>　　但这只是个壳子罢了，根据代码中的<code>IUnlitSubShader</code>为引，找到了其核心：<br><img src="https://musoucrow.github.io/images/shader_graph/3.png" alt="3"><br>　　这个<code>UniversalUnlitSubShader</code>的作用相当简单：根据编辑器的设置<strong>生成Shader代码</strong>。如上图便可看出定义Pass数据结构的行为，这也是诱使我来改源码的直接原因。在里面你将见到形如这般的代码：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> unlitMasterNode = masterNode <span class="keyword">as</span> UnlitMasterNode;</div><div class="line"><span class="keyword">var</span> subShader = <span class="keyword">new</span> ShaderGenerator();</div><div class="line"></div><div class="line">subShader.AddShaderChunk(<span class="string">"SubShader"</span>, <span class="literal">true</span>);</div><div class="line">subShader.AddShaderChunk(<span class="string">"&#123;"</span>, <span class="literal">true</span>);</div><div class="line">subShader.Indent();</div><div class="line">&#123;</div><div class="line">    <span class="keyword">var</span> surfaceTags = ShaderGenerator.BuildMaterialTags(unlitMasterNode.surfaceType);</div><div class="line">    <span class="keyword">var</span> tagsBuilder = <span class="keyword">new</span> ShaderStringBuilder(<span class="number">0</span>);</div><div class="line">    surfaceTags.GetTags(tagsBuilder, <span class="string">"UniversalPipeline"</span>);</div><div class="line">    subShader.AddShaderChunk(tagsBuilder.ToString());</div><div class="line">    </div><div class="line">    GenerateShaderPass(unlitMasterNode, m_UnlitPass, mode, subShader, sourceAssetDependencyPaths);</div><div class="line">    GenerateShaderPass(unlitMasterNode, m_ShadowCasterPass, mode, subShader, sourceAssetDependencyPaths);</div><div class="line">    GenerateShaderPass(unlitMasterNode, m_DepthOnlyPass, mode, subShader, sourceAssetDependencyPaths);   </div><div class="line">&#125;</div><div class="line">subShader.Deindent();</div><div class="line">subShader.AddShaderChunk(<span class="string">"&#125;"</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p>　　如此情况便变得相当清晰了，只要清楚<strong>你想生成怎样的</strong>Shader代码，在摸熟了生成代码的API，便可自由地进行创作了。通过右键节点可以随时查看生成的代码情况：<br><img src="https://musoucrow.github.io/images/shader_graph/4.png" alt="4">  </p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>　　也许看似还算简单，但其中坑点还是有不少的：  </p>
<ul>
<li>不要尝试采用继承的形式去新建新类型，其本身代码就没打算让你这么做，必然会碰壁，除非改源码（如此便违反原则了）</li>
<li>做出了修改后，要到对应的Graph文件进行Save操作触发检测。</li>
<li>也许是检测的原因，有时候HLSL代码做出了修改后不会被识别到，需要换下行。</li>
<li>Shader Graph生成的着色器参数有着自己的一套处理方式，务必参考自带的代码。</li>
<li>Unlit Graph的主Pass并没有LightMode，想做背面Pass的时候要注意下。</li>
<li>Unlit Graph将渲染模式、混合模式、剔除做成节点设置并不是一个好选择（无法让材质修改），推荐按照URP的方式做成材质属性。<img src="https://musoucrow.github.io/images/shader_graph/5.png" alt="5"></li>
<li>Shader Graph对于生成的Shader代码存在分支数限制，需要到<code>Preference-&gt;Shader Graph</code>进行修改上限。值得一提的是，全局Keyword与局部Keyword似乎是分别对待的。</li>
<li>Shader Graph并不存在完整的环境，它是无法识别到一些渲染管线里的函数的。所以在编写Custom Shader的时候需要加上<code>#if SHADERGRAPH_PREVIEW</code>分支判定以处理在编辑模式下的情况：</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">MainLight_float</span><span class="params">(float3 WorldPos, out float3 Direction, out float3 Color, out <span class="keyword">float</span> DistanceAtten, out <span class="keyword">float</span> ShadowAtten)</span></span></div><div class="line">&#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SHADERGRAPH_PREVIEW</span></div><div class="line">    Direction = float3(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0</span>);</div><div class="line">    Color = <span class="number">1</span>;</div><div class="line">    DistanceAtten = <span class="number">1</span>;</div><div class="line">    ShadowAtten = <span class="number">1</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> SHADOWS_SCREEN</span></div><div class="line">    float4 clipPos = TransformWorldToHClip(WorldPos);</div><div class="line">    float4 shadowCoord = ComputeScreenPos(clipPos);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    float4 shadowCoord = TransformWorldToShadowCoord(WorldPos);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    Light mainLight = GetMainLight(shadowCoord);</div><div class="line">    Direction = mainLight.direction;</div><div class="line">    Color = mainLight.color;</div><div class="line">    DistanceAtten = mainLight.distanceAttenuation;</div><div class="line">    ShadowAtten = mainLight.shadowAttenuation;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　现在感觉游戏开发的未来方向就是连连看了，从这点来说UE4的确算是时代前沿。在编辑器里加入逻辑控制元素，让更多人能加入创作，尽可能地解放生产力，的确是游戏开发所需要的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　Demo也到了做渲染的时候了，经过一番鏖
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>Unity骨骼动画的总结</title>
    <link href="https://musoucrow.github.io/2020/02/01/animation_guide/"/>
    <id>https://musoucrow.github.io/2020/02/01/animation_guide/</id>
    <published>2020-02-01T10:03:46.000Z</published>
    <updated>2021-07-17T12:41:21.490Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　恰逢假期，在家继续推进Demo，骨骼动画相关的调研算是告一段落了，遂以本文记录相关要点。<br>　　首先要明确一点，本文所说的骨骼动画皆是3D模型的骨骼动画，与2D精灵的骨骼动画无关，虽然原理大致相通。</p>
<h2 id="网格、骨骼、绑定"><a href="#网格、骨骼、绑定" class="headerlink" title="网格、骨骼、绑定"></a>网格、骨骼、绑定</h2><p>　　了解过3D相关知识的都知道，模型(Model)是由一个个三角形组成的，而这种三角形的学名则是网格(Mesh)。当然在DCC软件里为了方便创作，会用2个三角形组成四边形作为网格：<br><img src="https://musoucrow.github.io/images/animation_guide/0.png" alt="0"><br>　　然后便是骨骼(Skeleton)了，它是驱动模型运动的根本，如下图所示，这是一种彼此之间有父子关系连接在一起的长条状玩意：<br><img src="https://musoucrow.github.io/images/animation_guide/1.png" alt="1"><br>　　最后便是让模型跟着骨骼一起运动了，这个骨肉融合的过程称为<strong>绑定</strong>，具体要做的事便是将某节骨骼与相关的网格建立关系：<br><img src="https://musoucrow.github.io/images/animation_guide/2.png" alt="2"><br>　　如上图所示，模型上有着不同的颜色，这表示该节骨骼所影响到的网格权重值（蓝色为0，红色为1），所以绑定也俗称“刷权重”。权重值越高，该节骨骼对相应网格的影响便越大（存在多节骨骼对相同网格存在影响，此时便要通过权重值来决定优先级了）。<br>　　随着时代的发展，现代DCC软件基本配备自动刷权重的功能了。做好模型部件的划分（每个部件拥有独立的骨骼，通过各骨骼之间建立关系来联系模型），减少每个模型的权重复杂度，如此通过自动刷权重基本可以应对一般情况了。</p>
<h2 id="模型与动画"><a href="#模型与动画" class="headerlink" title="模型与动画"></a>模型与动画</h2><p>　　生成给Unity使用的模型与动画我选择FBX格式，毕竟这算是最流行的3D格式了。对于动画，我选择一个动画一个FBX文件的形式（业界也有全部做到一个文件里，在Unity内分割的行为），动画FBX文件里只有骨骼与动画信息，不含模型。<br>　　说到这里，便有一个绕不开的点：多个模型复用<strong>相同</strong>的动画，这里涉及到Unity里的两种骨骼动画模式：<strong>Generic与Humanoid</strong>。<br>　　Generic如其名般：一般的动画，在这种动画模式下实现复用的思想很朴素：只要模型的骨骼与动画的骨骼要素相同，那么复用便是水到渠成的事了。这也表示必须同类模型与动画的骨骼结构是<strong>一致</strong>的。这也表示难以使用外界的第三方资源，对于一些以拼凑、同人、大乱斗为特色的民间项目，或是想直接使用某游戏提取出来的动画，那便捉急了。<br>　　Humanoid则不然，这是一种专为人形设计的动画模式。如下图所示，它定义了人体通用的若干个关节点，将模型对应的骨骼填进去即可：<br><img src="https://docs.unity3d.com/uploads/Main/classAvatar-Inspector.png" alt="avatar"><br>　　事实上Humanoid便是做了一层中间层转换，让各自的人形模型的骨骼信息统一抽象为上图这套体系，并且还做了关节运动幅度的可控，如此便可实现复用了。且Unity实现了自动识别填充，使用起来还算方便。<br>　　但事实上我<strong>放弃</strong>了这种做法，选择了Generic模式。原因如下：</p>
<ul>
<li>Humanoid模式为了兼容不同体型下的情况，禁用了具有缩放行为的骨骼动画。</li>
<li>Humanoid模式只是为人形考虑，但实际上需要动画复用不只是人形。</li>
<li>由于Demo模型选用的是小泥人，并没多少合适的第三方动画选择（已尝试过）。</li>
<li>哪怕是人形，事实上也会有一些Humanoid无法顾及到的部件（如头发）。</li>
<li>既然不用第三方动画，那么骨骼结构的稳定性自然有保证。</li>
</ul>
<p>　　以上原因不是说用Humanoid模式就完全无法解决，But simple is good，Generic就完事了。</p>
<h2 id="Animator-切换、分层、混合树"><a href="#Animator-切换、分层、混合树" class="headerlink" title="Animator: 切换、分层、混合树"></a>Animator: 切换、分层、混合树</h2><p>　　时值2020年，<a href="https://docs.unity3d.com/Manual/class-Animator.html" target="_blank" rel="external">Animator</a>自然是动画组件的不二之选了。如下图所示般，构建动画状态机，实现一个有机的动画播放环境：<br><img src="https://docs.unity3d.com/uploads/Main/MecanimHowItFitsTogether.jpg" alt="animator"><br>　　首先要注意的是，<strong>不推荐将动画状态机当成单位业务的状态机使用</strong>，虽然动画状态机有提供挂载脚本的形式，但事实上单位的状态<strong>并不是与某个动画绑死的</strong>，应该由状态去播放动画，而非是动画下绑定专门的业务。让动画的归动画，状态的归状态吧！<br>　　在动画切换控制方面，我使用了Animator自带的<a href="https://docs.unity3d.com/Manual/AnimationParameters.html" target="_blank" rel="external">变量机制(Parameters)</a>，结合条件切换、动画状态脚本、代码控制等方式，实现动画的高可控切换。<br>　　如前文提到的动画复用问题，实际上哪怕骨骼主体相同，但仍会有各自的特殊部件，这时候便要用上Animator的<a href="https://docs.unity3d.com/Manual/AnimationLayers.html" target="_blank" rel="external">分层机制(Layers)</a>了。通过定义多个不同的层次，在层次中使用<a href="https://docs.unity3d.com/Manual/AnimationMaskOnImportedClips.html" target="_blank" rel="external">Avatar Mask</a>确定影响的骨骼部位，在层次中定义各个动画状态下对应的部件动画。可以为层次定义独立的动画状态机体系，也可以在设置中选中<em>Sync</em>启用以主体层为准的体系。个人更推荐后者，除非与本体动画无关。<br>　　最后是业界不少人士喜欢用的<a href="https://docs.unity3d.com/Manual/class-BlendTree.html" target="_blank" rel="external">混合树(Blend Trees)</a>，分为多种类型（不同的维度乃至于机制），原理为定义若干个动画，确定每个动画在变量组合的特定值下权重最大（播放优先级最高），如此通过操纵变量即可灵活混合相关动画（每个动画的元素都有一定的权重，最终混合成独特的动画）。本人暂时还没用到，主要是追求更明确的动画，而非那种融合的感觉。</p>
<h2 id="补间与帧动画"><a href="#补间与帧动画" class="headerlink" title="补间与帧动画"></a>补间与帧动画</h2><p>　　骨骼动画的本质，便是在不同的时间点为某节骨骼定义了特定的位置、缩放、旋转。动画的运作便是根据两个时间点之间的骨骼数据做数值变化，这种行为称之为<strong>补间(Tweens)</strong>，同理骨骼动画也就是一种补间动画。与补间动画相对应的概念是<strong>帧动画</strong>，帧动画只会在特定的时间点发生变化，时间点之间的运动途中是不变的，在许多经典的2D游戏动画便是这种做法。<br>　　为何我会提及到这点呢？一个很明显的区别：较之帧动画，补间动画显得实在是<strong>太流畅了</strong>，毕竟理论上游戏运作的每一帧它都在改变。但是流畅不是很好么？这一直是电子游戏的追求才对啊！在大多数情况下也许没错，但有时太过流畅，反而会失去「力量感」，说的再通俗点，就是<strong>没2D游戏内味了</strong>。我想这也是不少一般3D动作游戏做的不好的一点。<br>　　这种现象在日本动画业界运用3D时早有发现：由于2D手绘帧的标准是24帧每秒，而如果3D动画按照视频播放帧进行输出，就会显得两者仿佛根本不在一个世界般。故后来都选择了按照2D手绘帧的帧率进行抽帧，以此达到同步。当然哪怕如此，3D动画也是无法还原出2D手绘帧那股味的，一者在于手绘帧的每帧内容都是人为创作的，具有独特的节奏感。另者在于2D手绘帧的运动帧为了表达动感，往往会画成糊成一团的样子：<br><img src="https://musoucrow.github.io/images/animation_guide/3.gif" alt="3"><br>　　这种效果在3D动画基本上是难以实现的，所以往往会盖一层特效解决：<br><img src="https://musoucrow.github.io/images/animation_guide/4.gif" alt="4"><br>　　当然《塞尔达传说：荒野之息》对此的处理已经算是上乘了，特意选择了与武器本体颜色相近的特效，在形状上也与2D运动帧接近。个人认为可以在此基础上为武器加入短时间内夸张的形变，使之更有张力。这在《守望先锋》里也有相关运用，留待后日实践验证了。<br>　　言归正传，鉴于补间动画过于流畅的特性，为此我也类似日本动画业界的做法一般，按照24帧每秒的形式对动画播放进行了抽帧。实现思想也很简单：平时将Animator暂停，使用一个定时器，在特定时间点让Animator一次性把暂停的时间差更新补上。如下图对照所示（图1抽帧，图2没有）：<br><img src="https://musoucrow.github.io/images/animation_guide/5.gif" alt="5"><br><img src="https://musoucrow.github.io/images/animation_guide/6.gif" alt="6"><br>　　当然这种方式并不完美：真正的2D帧动画每一帧的持续时间都是人为确定的，而这样只是粗暴的抽帧罢了。当然人为确定帧时间的方式势必带来更高的人力成本，具体如何仍需取舍。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　关于「补间与帧动画」一节纯属个人看法，在正统3D派看来也许属于邪道也说不定（笑。骨骼动画涉及的相关种种实际远不止如此，如换装、部位组合动画等，限于篇幅，就不展开了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　恰逢假期，在家继续推进Demo，骨骼动画
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Animation" scheme="https://musoucrow.github.io/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>Unity光照模式的总结</title>
    <link href="https://musoucrow.github.io/2020/01/12/light_guide/"/>
    <id>https://musoucrow.github.io/2020/01/12/light_guide/</id>
    <published>2020-01-12T13:01:33.000Z</published>
    <updated>2021-07-17T12:41:21.492Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　近日在琢磨Demo应该选择怎样的光照模式，遂做了个试验：对比在同一场合下，各种模式的情况。故以此文记录之（版本为2019.2、平台为Standalone、渲染管线为Builtin）。</p>
<h2 id="环境光"><a href="#环境光" class="headerlink" title="环境光"></a>环境光</h2><p>　　环境光(Ambient)严格来说并不是一种光照，它只是单纯的为所有显示元素上色罢了。可以理解为2D游戏便是有个(255, 255, 255)环境光。可于<strong>(Window → Rendering → Lighting Settings)</strong>下的Environment Lighting进行设置。<br><img src="https://musoucrow.github.io/images/light_guide/0.png" alt="0"><br>　　环境光是无论如何都需要的，一般用于决定画面的底色。下图便是用了白色的效果：<br><img src="https://musoucrow.github.io/images/light_guide/1.png" alt="1"><br>　　看到上图便能理解我说的「环境光严格来说并不是一种光照」，毕竟连影子都没有，整个画面显得很单薄。但事实上在早期、以及现在一些不依赖光影的游戏是有这种做法的。它们一般会采用类似2D游戏的做法，在素材层面解决各种显示效果问题。对于不依赖光影、强调美术的绝对控制的游戏，使用纯环境光是个方案。<br>　　顺带一提，在Environment Lighting设置下的Gradient与Skybox模式有着不一样的效果，属于更高级的环境光实现。</p>
<h2 id="实时光"><a href="#实时光" class="headerlink" title="实时光"></a>实时光</h2><p>　　实时光(Realtime)顾名思义，就是每时每刻都在进行的光照。在<strong>Light组件的Mode属性设置为Realtime</strong>即是。实时光的优缺点很明显，如下：</p>
<ul>
<li>优点<ul>
<li>游戏时可随时改变光照的状态，即刻产生反应</li>
<li>随取随用，无需烘焙</li>
<li>光照效果最好</li>
</ul>
</li>
<li>缺点<ul>
<li>在正向渲染(Forward Rendering)下，画面同时出现多个光照时，开销较大</li>
<li>为了节能，某些设备、设置下，光照的数量有限</li>
</ul>
</li>
</ul>
<p>　　实时光一般就是开箱即用到的光照，效果如下：<br><img src="https://musoucrow.github.io/images/light_guide/2.png" alt="2"><br>　　可以看得出，各项消耗指标都比纯环境光要高，而该场景只有三项光照（平行光1个、聚光灯2个）。故一般游戏都不会如此奢侈，会采用各种手段来达到相同的效果。<br>　　而以上却还不是效果的极致，还差个全局光照(Global Illumination)呢。刚才所见的光照只是「直接的光照」罢了，它只会考虑到照到了谁便处理谁，没有从全局的角度去考虑。在开启全局光照后，除了直接光照之外，还会产生物件之间相互反射的<strong>间接光照</strong>。效果如下：<br><img src="https://musoucrow.github.io/images/light_guide/3.png" alt="3"><br>　　从画面效果来看变得更为深邃了，墙壁与地板都有了反射后的光渍，而各项指标实际上与局部并无不同（疑似）。使用它的前提是要在上文的Lighting Settings下开启<em>Realtime Global Illumination</em>，并且为静态物件做好<em>Static标记</em>。具体实现细节请自行查阅官方文档，在此不表。<br>　　当然，这并不代表全局光照优于局部光照，就比如有些游戏的画面风格并不喜欢那些全局光照带来的光渍。还是要看想要怎样的美术效果。</p>
<h2 id="烘焙光"><a href="#烘焙光" class="headerlink" title="烘焙光"></a>烘焙光</h2><p>　　烘焙光(Baked)可谓实时光的反面：根据光照信息预先渲染成贴图，最后盖到场景上。这个「根据光照信息预先渲染成贴图」的过程，是为<strong>烘焙</strong>。而烘焙的类型、算法、设置有着多样化的选择，直接影响烘焙的时长、效果、贴图大小与数量。也因烘焙的特性，只适用于静态物件（标记为Static的对象）。优缺点如下：</p>
<ul>
<li>优点<ul>
<li>部分渲染元素（取决于烘焙类型）没有实时运行的开销</li>
<li>属于全局光照，拥有间接光</li>
</ul>
</li>
<li>缺点<ul>
<li>光照属性不能运行时修改</li>
<li>动态物件不受影响</li>
<li>烘焙耗时</li>
</ul>
</li>
</ul>
<p>　　烘焙类型主要分三种，效果如下：<br><img src="https://musoucrow.github.io/images/light_guide/4.png" alt="4">Subtractive: 全烘焙<br><img src="https://musoucrow.github.io/images/light_guide/5.png" alt="5">Shadowmask: 烘焙阴影与间接光<br><img src="https://musoucrow.github.io/images/light_guide/6.png" alt="6">Backed Indirect: 只烘焙间接光  </p>
<p>　　可以看到效果是一个比一个好，但性能却是一个比一个耗。并且可以看出，由于烘焙设置的问题，效果是不如实时光的。而通过设置达到最优的话，烘焙时长则又是个问题了，鱼和熊掌不可兼得啊（砸钱便能我全都要）。<br>　　对于Subtractive，只需把Light组件的Mode属性设置为<strong>Baked</strong>即可。对于其余两种，实际上是一种实时光+烘焙光的混合方案，则需设置为<strong>Mixed</strong>。由于动态对象不受烘焙光影响的特性，Subtractive下的胶囊仔直接跟纯环境光时一个样了。解决方案有很多种，如采用Mixed方案（静态物件烘焙光、动态物件实时光）、<a href="https://docs.unity3d.com/Manual/LightProbes.html" target="_blank" rel="external">Light Probes</a>等。<br>　　顺带一提，关于Shadowmask，在阴影设置中可调为<strong>Distance Shadowmask</strong>。如此将取决于阴影距离的设置，在阴影距离内的阴影，将采用实时阴影，距离之外的则是烘焙阴影。也算是一种提升品质的方式吧。<br>　　烘焙光在业界的应用相当广泛，其中Subtractive式烘焙在早期游戏与现代手游可谓家常便饭，妥善使用Light Probes也能达到不俗的效果。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　以上只是本人粗略的实验与记录，实际上光照的内容浩如烟海，远非本篇所能涵盖。在光照方面本人也只能算是初学者，有所不对还请海涵，并欢迎指教。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　近日在琢磨Demo应该选择怎样的光照模式
    
    </summary>
    
      <category term="Teach" scheme="https://musoucrow.github.io/categories/Teach/"/>
    
    
      <category term="Unity" scheme="https://musoucrow.github.io/tags/Unity/"/>
    
      <category term="Graphics" scheme="https://musoucrow.github.io/tags/Graphics/"/>
    
  </entry>
  
  <entry>
    <title>2019年度总结</title>
    <link href="https://musoucrow.github.io/2019/12/31/summary_2019/"/>
    <id>https://musoucrow.github.io/2019/12/31/summary_2019/</id>
    <published>2019-12-31T13:46:33.000Z</published>
    <updated>2021-07-17T12:41:21.493Z</updated>
    
    <content type="html"><![CDATA[<p>　　与前两年不同，今年可没有“不知不觉中，一年又过去了”的感觉。也许是上班了之后，对日子有了概念吧（毕竟元旦放假，笑）。同时与前两年相同，特作总结，以为归纳。<br>　　今年的Blog内容只有寥寥6篇，且全是DFQ相关。盖因10月之前都在紧张的开发中，实是无暇整点别的，希望明年有所不同吧。<br>　　若论今年最大的成就，自然是<a href="https://musoucrow.github.io/tags/DFQ/">DFQ</a>的完成了。相关事宜也在<a href="https://musoucrow.github.io/2019/10/17/dfq_end/">后记</a>有所总结。算是这些年来DNF同人的一张答卷吧。<br>　　除此之外，自然是利用这些年的积累，成功的找到了一份符合预期的工作。虽称不上惊艳，但也不差。在找工作期间也受到了不少业界同仁朋友的帮助，在此感谢。工作之后的最大好处便是生活作息规律了不少，至少不存在通宵了。其次是袋里也算有俩破钱，吃点买点都还凑合。在工作上也见识到不少业界才有的东西，并且深刻感受到了屎山、祖传代码、各种对接联调需求扯皮的滋味。也逐渐理解业界不少游戏明明肉眼可见的可调优项，却事实上没去改的现实。<br>　　主要原因在于，团队人数越多，意志的贯彻性就会越差。并且由于人多，野心也就愈大，需要做的杂七杂八也就愈多，不类独立游戏会专注于某项去做好。并且由于团队传承的关系，不免会存在换皮、祖传、屎山代码的现象。亦有可能熟悉这套玩意的核心成员已经不在而导致整体水平下滑，且由于规划、时间问题，没有成本去重构、推翻重做，这也是很无奈的事实。故工作后我最大的两点感受是：</p>
<ul>
<li>自己能白手写出某套东西并不算什么，能基于别人的东西去改出来那才是本事。</li>
<li>团队人愈多，工作流程（工具链、生产线、规章制度）就愈重要，这决定了团队生产力释放的多寡。并且人类之间的信息交接力其实很差，人多就不免要付出对接成本，这也是要通过工作流程去尽量减少的成本之一。</li>
</ul>
<p>　　说完工作的事，介于「生命不息，整活不止」的原则，新的整活计划自然如火如荼的进行中。如去年所言，需要在3D游戏开发方面发力。结果今年都在忙DFQ，有点惭愧。以上便是本人的2019年度总结，且待明年的Blog吧。<br>　　无双草泥马<br>　　2019.12.31</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　与前两年不同，今年可没有“不知不觉中，一年又过去了”的感觉。也许是上班了之后，对日子有了概念吧（毕竟元旦放假，笑）。同时与前两年相同，特作总结，以为归纳。&lt;br&gt;　　今年的Blog内容只有寥寥6篇，且全是DFQ相关。盖因10月之前都在紧张的开发中，实是无暇整点别的，希望
    
    </summary>
    
      <category term="Talk" scheme="https://musoucrow.github.io/categories/Talk/"/>
    
    
      <category term="Talk" scheme="https://musoucrow.github.io/tags/Talk/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——后记</title>
    <link href="https://musoucrow.github.io/2019/10/17/dfq_end/"/>
    <id>https://musoucrow.github.io/2019/10/17/dfq_end/</id>
    <published>2019-10-17T03:18:18.000Z</published>
    <updated>2021-07-17T12:41:21.491Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　DFQ终究是顺利的开发完成，并在发布之后的短短四日内达到<strong>接近十万的下载量</strong>。赢得广大玩家的好评，甚者认为比之官方的手游<strong>品质更佳</strong>。然而这一切恍若黄粱一梦，于昨日晚上收到了来自腾讯的律师函，要求删除<strong>相关下载渠道与宣传内容</strong>。<br>　　取得这等成绩自是喜人，能被腾讯警惕也证明品质确实出色。只可惜游戏尚有一些待完善之处，无法再为玩家提供更新了。在此期间也有不少请求换皮合作的邀请，但本人志不在此。也不想讨论相关太多，就来为这个项目做个总结吧。</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>　　关于制作DFQ的想法，在《阿拉德英雄传》3.0搁置以后便有了模糊的想法。认为要做一款简洁爽快的中小型DNF同人手游，作为我、以及开元的DNF同人最终章。但随着增长了见识以后，便发现自己的程序架构掌控力不足，于是花了不少时间恶补。且前期对于要做一款怎样的游戏并无清晰的概念，遂直到<strong>2018年6月</strong>才正式开始制作。<br>　　由于DFQ算是弥补3.0搁置的一个执念，于是依旧选择了<a href="http://love2d.org" target="_blank" rel="external">LÖVE</a>引擎。事实上这是个<strong>重大的决策失误</strong>。LÖVE关于移动端方面的功能只是刚刚推出，且是冷门引擎，没人帮忙踩坑。于是在制作时便遇到了很多问题，包括相关库的缺少或不合适以至于要造轮子、引擎本身的BUG之类等等。在发布之后更是遇到了诸多问题（NO GAME、全面屏、DPI等），在此奉劝各位，<strong>不要用冷门引擎</strong>。<br>　　说回程序本身，这次基本上是达到我的要求了，至少工程不再是一塌糊涂、难以协作的状态了。对于各种方面的写法问题也有过深刻的研究（如活动对象采用ECS架构），对于代码格式与写法也有了规范。不足之处在于状态的业务按理来说应该配置化，而非OOP，因其存在大量<strong>相似而不同</strong>的业务，而这些部分是难以用OOP解决的。以及在OOP的规范上，我引入了private（以_前缀表示），然而会发现很多时候这只会增加不必要的思考负担以及封装成本，这方面该如何处理其实至今我仍未有答案（在业界也是众说纷纭）。<br>　　为了弥补Lua没有强类型与智能提示的缺点，我引入了<a href="https://github.com/EmmyLua/VSCode-EmmyLua" target="_blank" rel="external">EmmyLua</a>。所以看过之前的开源工程的会发现代码会有形如<code>---@class XXX</code>的注释，不过这种外挂的形式终究不如原生来的爽快，且缺乏运行前检查的功能。对于代码健壮性的建设尚嫌不足，由此可见TypeScript才是究极的工程化脚本啊。<br>　　在后续测试的图中遇到过一次<strong>严重的内存泄漏</strong>事故，基本上刷到第三个地下城时便会内存膨胀到难以接受的地步。通过使用<a href="https://github.com/yaukeywang/LuaMemorySnapshotDump" target="_blank" rel="external">LuaMemorySnapshotDump</a>发现，由于我为了减少内存申请，会将一些固定的table类参数写成模块变量，而使用后却没有及时清空，导致游戏对象一直依附其中，无法回收。以及为了优化而做的对象池也是如此，真是汗颜。  </p>
<h2 id="美术"><a href="#美术" class="headerlink" title="美术"></a>美术</h2><p>　　美术方面可以说的不多，首先是由于因需求做了个<a href="https://github.com/MusouCrow/ParticleEditor" target="_blank" rel="external">粒子编辑器</a>，导致对粒子效果的掌控力上升。游戏的粒子特效使用率较之《阿拉德英雄传》有了大幅的提升。<br>　　在人物素材方面，实现了非常强大的纸娃娃，并且为了效率优化，纸娃娃是拼合成一张大图的，缺点在于合成相当耗时，需要在恰当的时机进行（如读图）。并且部分设备支持的图片大小最高为4096，而实际上则出现了超过该大小的图片（此问题至今尚未修复）。<br>　　在优化方面，由于引入了图集与压缩的措施，游戏的加载速度与显存占用是得到了极大的提升。在尚未采取压缩之前，小米9会出现显存带宽爆炸的情况。可以说安卓设备五花八门，令人十分头大。<br>　　UI方面，立绘依旧是小山龙同志的作品，质量较之当年可谓进步明显，原本打算采取live2d的方案，却因工期延宕而搁置了，实是一憾。至于界面本身，可以看出对于手游而言，连及格都称得上是勉强，实是因为一版过兼无经验所致。<br>　　手游UI与端游UI的不同处在于，由于屏幕太小，实际上UI要做的很大才显得正常。并且由于有着触控的需求，按钮也必须大且位置合适。如果为了美术效果而做得小，那也得必须要求附近无其他冲突项，且实际可触控范围要比素材看起来大才行。</p>
<h2 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h2><p>　　DFQ的原初想法实是一款刷刷刷的类暗黑游戏，但本人感觉这年头的游戏都过度强调养成了。遂在砍掉养成的前提下重新审视，定下了三国战纪+Roguelike的主基调。三国战纪的元素在于：角色扮演、街机闯关、拾取道具，Roguelike则是随机性了，可谓独立游戏时下的流行元素，当然大家不约而同选择Roguelike的原因很简单：游戏内容不足，所以要用随机性来增添耐玩性。这么一组合起来，DFQ的样子便很明显了：开局一把刀，一切全靠打，随机地图事件，横版街机闯关。<br>　　但是仅仅如此还是不够的，要是玩家一直用着一成不变的搭配进行游戏，那可就太浪费了。传统游戏对于此的解决方案有：上下级替换、针对性关卡替换，然DFQ没有条件搞上下级替换，针对性替换也未免苛刻。于是抄袭《塞尔达传说：荒野之息》的武器耐久度设定，让武器、道具、技能都具有轮替性。这份轮替性对于玩家而言实是辛辣了，以至于赢得不少吐槽。在后续版本中便为此做出了调整优化，但实是最佳之法。关键在于：玩家需要自己感到可控的设计，而非稀里糊涂的机制。DFQ在不少方面都有类似问题（如最初设想的动态难度），实该检讨。<br>　　在关卡设计上，DFQ是以传统游戏的标准进行设计的，做出了不少较之DNF的突破（如跨房间追击战、迷宫等）。在开发前期犯下一个严重的错误：以端游的标准去做手游，以至于难度过大。手游的操作成本比端游要大，以及更适合轻度的体验。传统的DNF操作方式并不够爽快，遂在此基础上加入了小技能可互相强制、普攻可减少技能冷却的设计，让整个游戏的体验如打了肾上腺素一般。<br>　　除此之外，在做《阿拉德英雄传》多年以来，落下不少错误的思想，如怪物的攻击频率相当鬼畜、没有合适的前后摇等。虽然较之当年，我的ACT设计理解有所提升，引入了反击元素，但仍是不足。在小草泥马的一番军训后，引入了紧张时间与舒适时间的概念，领悟了张弛有度的道理。怪物的设计上会做出提供玩家利用的破绽，让战斗的体验达到了业界平均水平（指国际）。  </p>
<h2 id="宣传"><a href="#宣传" class="headerlink" title="宣传"></a>宣传</h2><p>　　在此感谢轻声低语、瓦伦、夕阳飘羽三位同仁的协助，在DNF百度贴吧、COLG等处得到了极大的曝光，也感谢纷纷去安利、自发宣传的玩家们，以此得到了广泛关注。取得了<em>下载量近十万、B站宣传片十三万播放、贴吧关注量近七千、群人数两千七、COLG帖子47页</em>的成绩。<br>　　另外意想不到的是，以前《阿拉德英雄传》的玩家群体的活跃度也很高，并且开元工作室的名声也比想象中要大（不少人都知道，包括DNF吧的吧务），可见以前做下的成果也是有回报的。<br>　　其实在我看来，比较核心向的游戏，只要你知道受众的聚集地，并且有相关号召力的人士愿意帮忙。在赢得了核心玩家的认可下，宣传效果是非常棒的，哪怕远在韩国的好船同志也收到消息并通关了。这点和业界从广泛人群中捞玩家的买量游戏还是有所不同的。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　其实DFQ的成功，除了本身品质的优秀之外，更在于官方手游迟迟未发，当然最近又有动作了，这也算是撞枪口上了吧。且DFQ属于手游里少有的偏传统的单机类型，在玩腻了抽卡养成流水关卡的玩家看来，自然是十分闪耀的。而我之所以拒绝那些合作换皮的邀请，也在于我并没有想过符合游戏的商业化改造方案，如果按照市面上的那一套进行，结合下一次的天时地利人和，感觉迎来的只会是暴死吧。<br>　　经过这次的验证，可以见到我的ACT理解程度已经进入了新的台阶，然而这还不是我所能做到的极限，若有机会一定会再次整活。当然同人游戏是不会再做了，这次已经是撞倒了天花板，在各方面有其局限性。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　DFQ终究是顺利的开发完成，并在发布之后
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
  <entry>
    <title>《DFQ》开发随录——AI</title>
    <link href="https://musoucrow.github.io/2019/05/31/dfq_ai/"/>
    <id>https://musoucrow.github.io/2019/05/31/dfq_ai/</id>
    <published>2019-05-31T13:09:18.000Z</published>
    <updated>2021-07-17T12:41:21.491Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>欢迎参与讨论，转载请注明出处。</strong>      </p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　DFQ是PVE（Player VS Environment）游戏，那么自然要有AI了。DFQ的AI实现并不算复杂，并没有用到时下流行的<a href="https://en.wikipedia.org/wiki/Behavior_tree" target="_blank" rel="external">行为树（Behavior Tree）</a>。原因在于不需要做到太精细的操作，且AI部分的业务不需要执行策划参与（不需要编辑器化）。本文将一一叙述其中要点，相信对于同类型的游戏也有一定的参考价值。</p>
<h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><p>　　AI设计的宗旨只有一个：<strong>根据游戏的各种情况，决定进行怎样的操作</strong>。这样的思路其实挺仿生的，我们玩游戏的时候本质上也是如此。要注意的是，玩家进行操作的方式是通过外设（键盘鼠标手柄触控等）输入操作信息（按键坐标等）。从这点来说，AI也可以这么做，以<strong>进行虚拟的输入操作</strong>。这么做的好处是很明显的，如此AI与玩家在功能上达到了一致，AI也不需要与某个具体的功能耦合，只需要关注相应的操作指令，<strong>无需关注具体的功能实现</strong>。<br>　　而这一切只需要做一套操作模块即可，并且做联机时来自其他玩家的输入亦可如此处理，通过这种方式达到了玩家、AI、联机三者的有机统一。可谓「软件开发中遇到的所有问题，都可以通过增加一层抽象而得以解决」的一次实践。<br>　　当然这也会引入新的问题：<em>某些功能只想AI拥有，那该怎么办？</em>DFQ中的非转向移动便属于这类，解决方法很简单：设计一个<strong>玩家无法触发的操作指令</strong>即可。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>　　AI的实体存在就是个类对象（下文称AI对象）而已，它会被外部调用的基础函数只有两个：Update和Tick。Update用于处理持续性的业务，而Tick则是一次性的业务，当然两者可能会有所结合（Tick接收参数，以驱动Update的运作）。<br>　　AI对象主要会存在的场合有：常驻（移动和攻击）、技能（判断是否应发动）、状态（某些状态下需要后续的操作），通过配置化的方式，即可灵活的组合需要的AI了：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    script = <span class="string">"base"</span>,</div><div class="line">    state = <span class="string">"attack"</span>,</div><div class="line">    ai = &#123;</div><div class="line">        script = <span class="string">"battleJudge"</span>,</div><div class="line">        collider = <span class="string">"duelist/goblin/skin/3-attack"</span></div><div class="line">    &#125;,</div><div class="line">    attackValues = &#123;</div><div class="line">        &#123;</div><div class="line">            damageRate = <span class="number">1</span>,</div><div class="line">            isPhysical = <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　如上配置所示，这是个技能的配置。在AI部分选择了<code>battleJudge</code>类，并提供了用于判断范围的collider参数。如此便定下了该技能的AI方针：使用collider判断是否存在敌人，存在则按下技能对应的按键，以发动技能。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>　　说完基本构成后，再来说说一些具体AI业务的实现吧。</p>
<ul>
<li>移动：移动AI的核心构成有三<ul>
<li>获取目标：遍历符合条件的对象，涉及到阵营等因素。</li>
<li>寻路：以目标为终点展开的寻路，由于DFQ使用的是网格地图，所以使用A星之类的寻路算法即可。</li>
<li>输入操作：获取到移动路径后，通过发出输入指令以驱动角色以之移动。要注意的是，这种方式不可能做到完全贴合路径，所以出现了超过了路径点的情况也不会作处理。</li>
</ul>
</li>
<li>攻击：攻击AI要做的事情很单纯，遍历技能以Tick它们的AI对象进行发动而已。要注意的是，技能的使用顺序要建立优先级进行排序。</li>
<li>判定：这个判定，便是上文的battleJudge了，通过collider以判断目标是否存在。这里的collider便是先前<a href="https://musoucrow.github.io/2019/04/30/dfq_hit/">打击感</a>所言的立体矩形，如下图所示：<br><img src="https://musoucrow.github.io/images/dfq_ai/collider.png" alt="collider"></li>
</ul>
<p>　　以上便是DFQ里值得一提的AI业务。顺带一提的是，AI是典型的不需要<strong>立即生效</strong>的业务，所以可以考虑每帧只执行一个单位的AI业务，以此减缓性能压力，并且避免敌人一窝蜂展开攻击的现象。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>　　在本文开篇时，输入AI二字的我其实有点恍惚。短短数年，AI几乎成了深度学习/机器学习的代名词了。在游戏领域一个理所当然的缩写反倒让我踌躇了一瞬，真是唏嘘啊。也许以后的游戏AI真的都成了基于强化学习的实现也说不定呢（笑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;欢迎参与讨论，转载请注明出处。&lt;/strong&gt;      &lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;　　DFQ是PVE（Player VS En
    
    </summary>
    
      <category term="Development" scheme="https://musoucrow.github.io/categories/Development/"/>
    
    
      <category term="Development" scheme="https://musoucrow.github.io/tags/Development/"/>
    
      <category term="DFQ" scheme="https://musoucrow.github.io/tags/DFQ/"/>
    
  </entry>
  
</feed>
